soupId,projectId,title,body,titleJa,bodyJa
S1,P1,dynamic() ignores <Suspense> hierarchy resulting in layout flicker,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/determined-firefly-9dq24w

### To Reproduce

Open codesandbox on main page and observe the flicker

### Current vs. Expected behavior

My app suffers from a rare (when on prod-optimized build) race condition, which results in layout flicker when navigating between pages.
It got more intense as I moved more pages out of SSR to improve performance, using `dynamic`.
I recalled an earlier issue in which the Router could make a full browser page refresh under some conditions resulting in a white-page flicker, but looks like that issue is long gone (with some NextJS update) and I wasn't able to race it that way.

With Chrome frame-by-frame recording, I finally raced it and seen that the flickered frame contains just the <Footer element without the webpage content.

I wrapped my whole layout code with <Suspend, but the issue remained

So the layout code was
```
const Layout: FC<AppProps> = ({ Component, pageProps }) => {
  return (
    <Suspense>
      <div>
        <Header />
        <Component {...pageProps} />
        <Footer />
      </div>
    </Suspense>
  );
};
export default Layout;
```

Why?
NextJS uses <Suspend in dynamic(), but it will always force fallback to be either a provided element, or it's own element which returns empty content when Suspended.
That means React can't see the parent <Suspend which only works when the child has fallback=null, which would avoid rendering incomplete component with just <Footer inside.

I don't see rendering ""empty"" as a default fallback making sense, IMO it would make sense to use no fallback= at all and refer the error handling, which is part of current ""fallback"" function, to the ErrorBoundary, and otherwise just properly Suspense.

Alternatively, I tried forcing `loading` to `undefined` which should override it properly, but there's another part of code that expects it to be valid and results in crash(it switches the implementation file between server and client, or something):

https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/loadable.shared-runtime.tsx#L142

EDIT: I double checked and what I wrote about `<Suspend fallback={null}` is not right because it seems have no special mechanics compared to a fallback function that itself returns a null component. So in that case, mechanics of `lazy components` seem enough without <Suspend, and if the crash when `loading: undefined` is fixed, and logic for `hasSuspenseBoundary` is extended to avoid forcing it without SSR, it can be used to workaround this problem.

https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/lazy-dynamic/loadable.tsx#L52C11-L52C30

### Provide environment information

```bash
""next"": ""15.1.1-canary.1"",
    ""react"": ""^19.0.0"",
    ""react-dom"": ""^19.0.0""
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
dynamic()が<Suspense>の階層を無視し、レイアウトのちらつきを引き起こす","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/determined-firefly-9dq24w

### 再現手順

メインページでcodesandboxを開き、ちらつきを観察します。

### 現在の動作と期待される動作

私のアプリは、プロダクション最適化ビルド時に発生する稀なレースコンディションに悩まされており、ページ間のナビゲーション時にレイアウトのちらつきが発生します。
パフォーマンスを向上させるために、`dynamic`を使用してより多くのページをSSRから移動させるにつれて、問題は悪化しました。
以前、ルーターが特定の条件下でブラウザのページを完全にリフレッシュし、白いページのちらつきを引き起こすという問題を思い出しましたが、その問題は（NextJSの更新により）すでに解決されているようで、その方法でレースを再現することはできませんでした。

Chromeのフレームごとの録画を使用して、最終的にレースを再現し、ちらついたフレームにはウェブページのコンテンツなしに<Footer要素だけが含まれていることを確認しました。

全体のレイアウトコードを<Suspense>でラップしましたが、問題は残りました。

レイアウトコードは次のとおりです。
```
const Layout: FC<AppProps> = ({ Component, pageProps }) => {
  return (
    <Suspense>
      <div>
        <Header />
        <Component {...pageProps} />
        <Footer />
      </div>
    </Suspense>
  );
};
export default Layout;
```

なぜですか？
NextJSはdynamic()内で<Suspense>を使用しますが、常に提供された要素か、サスペンドされたときに空のコンテンツを返す独自の要素にフォールバックを強制します。
つまり、Reactは親の<Suspense>を認識できず、子がfallback=nullのときのみ機能します。これにより、<Footer>だけが含まれた不完全なコンポーネントのレンダリングを回避できます。

デフォルトのフォールバックとして「空」をレンダリングすることは意味がないと思います。私の意見では、フォールバック=なしを使用し、現在の「フォールバック」関数の一部であるエラーハンドリングをErrorBoundaryに委ね、そうでなければ適切にSuspenseを使用する方が理にかなっています。

別の方法として、`loading`を`undefined`に強制しようとしましたが、別のコード部分がそれを有効であることを期待しており、クラッシュを引き起こします（サーバーとクライアントの間で実装ファイルを切り替えるなど）：

https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/loadable.shared-runtime.tsx#L142

編集：私が書いた`<Suspense fallback={null}`については、特別なメカニズムがないため正しくありません。nullコンポーネントを返すフォールバック関数と比較して特別なメカニズムはないようです。したがって、その場合、`lazy components`のメカニズムは<Suspense>なしで十分であり、`loading: undefined`のクラッシュが修正され、`hasSuspenseBoundary`のロジックがSSRなしで強制しないように拡張されれば、この問題を回避するために使用できるでしょう。

https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/lazy-dynamic/loadable.tsx#L52C11-L52C30

### 環境情報を提供してください

```bash
""next"": ""15.1.1-canary.1"",
    ""react"": ""^19.0.0"",
    ""react-dom"": ""^19.0.0""
```

### 影響を受ける領域はどれですか？（すべて選択してください）

不明

### 影響を受けるステージはどれですか？（すべて選択してください）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

_応答なし_"
S1,P1,The link to Server Action's error with Client Component doesn't redirect to the corresponding section,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/condescending-shadow-lsly9n?workspaceId=ws_Sq4GMLXY8mhdG4GGt4EY7P

### To Reproduce

1. Start the application in development _(next dev)_.
2. Create a client component.
3. Create a server action in a different file adding the ""use server"" directive to the top of the function body.
4. Use the server action in the client component.
5. Clicking on the ""Read more"" [link](https://nextjs.org/docs/app/api-reference/functions/server-actions#with-client-components) from the error doesn't redirect to the corresponding client component section.

### Current vs. Expected behavior

Once you get the error and you want to learn how to solve it, the link doesn't redirect to the client component section. Instead, it redirects you to the top of the page.

❌ Current link:
* https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#with-client-components

✅ Should be:
* https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#client-components

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
  Available memory (MB): 15714
  Available CPU cores: 16
Binaries:
  Node: 20.6.1
  npm: 10.9.2
  Yarn: 1.22.22
  pnpm: 9.15.0
Relevant Packages:
  next: 15.1.0 // Latest available version is detected (15.1.0).
  eslint-config-next: 15.1.0
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

_No response_",サーバーアクションのエラーがクライアントコンポーネントにリンクされていない,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/condescending-shadow-lsly9n?workspaceId=ws_Sq4GMLXY8mhdG4GGt4EY7P

### 再現手順

1. アプリケーションを開発モードで起動する _(next dev)_。
2. クライアントコンポーネントを作成する。
3. 別のファイルでサーバーアクションを作成し、関数本体の先頭に「use server」ディレクティブを追加する。
4. クライアントコンポーネントでサーバーアクションを使用する。
5. エラーからの「続きを読む」[リンク](https://nextjs.org/docs/app/api-reference/functions/server-actions#with-client-components)をクリックすると、対応するクライアントコンポーネントセクションにリダイレクトされない。

### 現在の動作と期待される動作

エラーが発生し、それを解決する方法を学びたい場合、リンクはクライアントコンポーネントセクションにリダイレクトされません。代わりに、ページのトップにリダイレクトされます。

❌ 現在のリンク:
* https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#with-client-components

✅ あるべきリンク:
* https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations#client-components

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home
  利用可能なメモリ (MB): 15714
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.6.1
  npm: 10.9.2
  Yarn: 1.22.22
  pnpm: 9.15.0
関連パッケージ:
  next: 15.1.0 // 最新の利用可能バージョンが検出されました (15.1.0)。
  eslint-config-next: 15.1.0
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,[bug]: parallel/intercepting routes requires server reboot to work,"### Link to the code that reproduces this issue

https://github.com/juliusmarminge/next-intercepting-routes

### To Reproduce

1. Start the dev server
2. Navigate to the parallel segment (e.g http://localhost:3000/dashboard/1/1)
3. Click on a card, it opens in a modal
4. Now suppose we change the URL structure, so rename `audit` to `auditt` (in both places) and update the link to point to the new pathname. Refresh the page and click the card again, it opens in the full-page view
5. Restart the dev server, refresh the page again and now it opens in the modal view

Demo:

https://github.com/user-attachments/assets/e4513513-561d-4eff-bc0b-45e5ed0b8aa5



### Current vs. Expected behavior

It requires a server reboot when it shouldn't

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.2.0: Fri Nov 15 19:28:48 PST 2024; root:xnu-11215.61.3~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.1.1-canary.0 // Latest available version is detected (15.1.1-canary.0).
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context


Changing the path like this might not be very realistic, but I wasted a lot of time to understand why my parallel routes wasn't working when adding them yesterday, trying to understand the necessary folder structure. Then I tihnk i went and added a dep and when i started the server back up it was working all of a sudden... It wasn't until i was fighting another issue (https://github.com/vercel/next.js/issues/73801) and ran into it again when trying other stuff that I understood that this was the issue",[バグ]: 並行/インターセプトルートは動作するためにサーバーの再起動が必要,"### この問題を再現するコードへのリンク

https://github.com/juliusmarminge/next-intercepting-routes

### 再現手順

1. 開発サーバーを起動する
2. 並行セグメントに移動する（例: http://localhost:3000/dashboard/1/1）
3. カードをクリックすると、モーダルで開く
4. ここで、URL構造を変更すると仮定し、`audit`を`auditt`に名前変更し（両方の場所で）、リンクを新しいパス名に更新する。ページをリフレッシュし、再度カードをクリックすると、フルページビューで開く
5. 開発サーバーを再起動し、再度ページをリフレッシュすると、今度はモーダルビューで開く

デモ:

https://github.com/user-attachments/assets/e4513513-561d-4eff-bc0b-45e5ed0b8aa5

### 現在の動作と期待される動作

サーバーの再起動が必要だが、そうであるべきではない

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.2.0: Fri Nov 15 19:28:48 PST 2024; root:xnu-11215.61.3~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.1.1-canary.0 // 検出された最新の利用可能バージョン (15.1.1-canary.0)。
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並行およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

このようにパスを変更することはあまり現実的ではないかもしれませんが、昨日並行ルートを追加する際に、必要なフォルダ構造を理解するのに多くの時間を無駄にしました。その後、依存関係を追加し、サーバーを再起動したときに突然動作するようになりました... 別の問題（https://github.com/vercel/next.js/issues/73801）に取り組んでいるときに再び遭遇し、他のことを試しているときにこの問題を理解しました。"
S1,P1,[bug]: intercepting routes cannot go back outside dynamic params,"### Link to the code that reproduces this issue

https://github.com/juliusmarminge/next-intercepting-routes

### To Reproduce

1. Deploy the project. This issue works when running locally (both `next dev` and `next start`).
2. Navigate down the tree until you get to an ""app""-segment (e.g. https://next-intercepting-routes-one.vercel.app/dashboard/1/1)
3. Click on a card, it should open as a modal but instead it hard navigates


### Current vs. Expected behavior

Locally it does what you expect, deployed it hard-navigates and checking server logs reveals this error:

![CleanShot 2024-12-11 at 16 55 38](https://github.com/user-attachments/assets/449ce58c-29f7-4acf-bf68-4a4eb2a57539)

But that doesn't make any sense since the `/dashboard/[team]/audit` page doesn't expect the `appId` param, and on the `/dashboard/[team]/[appId]` page it should be present. Are you only tracking 1 URL?

Demo: 
https://github.com/user-attachments/assets/22a21b29-a18f-4d62-8db6-f469f80fc014

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.2.0: Fri Nov 15 19:28:48 PST 2024; root:xnu-11215.61.3~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 10.0.0-alpha.0
Relevant Packages:
  next: 15.1.1-canary.0 // Latest available version is detected (15.1.1-canary.0).
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

I cannot move the modal up above the `appId` segment since I don't want the modal to show when navigating from `/[team]` to `/[team]/audit` for example.

Also tried to create a route group between the two and mounting the modal there, without success.

At the end I even tried with a hacky workaround to do conditional hard navigations but that resulted in a whole other class of problems",[バグ]: インターセプティングルートは動的パラメータの外に戻れない,"### この問題を再現するコードへのリンク

https://github.com/juliusmarminge/next-intercepting-routes

### 再現手順

1. プロジェクトをデプロイします。この問題はローカルで実行しているときに発生します（`next dev` と `next start` の両方）。
2. ツリーを下にナビゲートして「app」セグメントに到達します（例: https://next-intercepting-routes-one.vercel.app/dashboard/1/1）
3. カードをクリックすると、モーダルが開くはずですが、代わりにハードナビゲートします。

### 現在の動作と期待される動作

ローカルでは期待通りに動作しますが、デプロイするとハードナビゲートし、サーバーログを確認するとこのエラーが表示されます：

![CleanShot 2024-12-11 at 16 55 38](https://github.com/user-attachments/assets/449ce58c-29f7-4acf-bf68-4a4eb2a57539)

しかし、`/dashboard/[team]/audit` ページは `appId` パラメータを期待していないので、これは意味がありません。また、`/dashboard/[team]/[appId]` ページにはそれが存在するべきです。URLを1つだけ追跡していますか？

デモ: 
https://github.com/user-attachments/assets/22a21b29-a18f-4d62-8db6-f469f80fc014

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.2.0: Fri Nov 15 19:28:48 PST 2024; root:xnu-11215.61.3~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 10.0.0-alpha.0
関連パッケージ:
  next: 15.1.1-canary.0 // 利用可能な最新バージョンが検出されました (15.1.1-canary.0)。
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並列およびインターセプティングルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

モーダルを `appId` セグメントの上に移動することはできません。なぜなら、例えば `/[team]` から `/[team]/audit` にナビゲートする際にモーダルを表示したくないからです。

また、2つの間にルートグループを作成し、そこにモーダルをマウントしようとしましたが、成功しませんでした。

最終的には、条件付きハードナビゲーションを行うためのハッキーな回避策を試みましたが、それは全く別の問題を引き起こしました。"
S1,P1,Cache handler ERR_MODULE_NOT_FOUND when using ESM modules,"### Link to the code that reproduces this issue

https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working

### To Reproduce

1. Clone the repo https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working
2. `npm i`
3. `npm run dev`
4. You'll see the error

### Current vs. Expected behavior

I have `""type"": ""module""` in my `package.json`, so I can't add the cache handler like this, as [the docs suggest](https://nextjs.org/docs/app/api-reference/config/next-config-js/incrementalCacheHandlerPath):

```js
module.exports = {
  cacheHandler: require.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // disable default in-memory caching
}
```

Instead, I need to add it like this:

```diff
module.exports = {
- cacheHandler: require.resolve('./cache-handler.js'),
+ cacheHandler: import.meta.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // disable default in-memory caching
}
```

However, when I do so, I get the following error on `npm run dev`:

```
$ npm run dev

> test-nextjs@0.1.0 dev
> next dev

   ▲ Next.js 15.1.0
   - Local:        http://localhost:3000
   - Network:      http://192.168.100.16:3000

 ✓ Starting...
 ✓ Ready in 1625ms
[Error: Cannot find module '/Users/hristiyan.dodov/Projects/test-nextjs/.next/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js' imported from /Users/hristiyan.dodov/Projects/test-nextjs/node_modules/next/dist/server/next-server.js] {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///Users/hristiyan.dodov/Projects/test-nextjs/.next/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js'
}
```

…and I also get it if I try `npm run build` directly:

```
$ npm run build

> test-nextjs@0.1.0 build
> next build

   ▲ Next.js 15.1.0

   Creating an optimized production build ...
 ✓ Compiled successfully
 ✓ Linting and checking validity of types    

> Build error occurred
[Error: Cannot find module '/Users/hristiyan.dodov/Projects/test-nextjs/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js' imported from /Users/hristiyan.dodov/Projects/test-nextjs/node_modules/next/dist/export/helpers/create-incremental-cache.js] {
  type: 'Error',
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///Users/hristiyan.dodov/Projects/test-nextjs/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js'
}
```

Check these two branches:

- https://github.com/hdodov/test-nextjs/tree/cache-handler-working — cache handler works here
- https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working — here it doesn't

Here's a diff between the two: https://github.com/hdodov/test-nextjs/compare/cache-handler-working...cache-handler-not-working

### Provide environment information

```
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.6.0: Thu Sep 12 23:34:49 PDT 2024; root:xnu-10063.141.1.701.1~1/RELEASE_X86_64
  Available memory (MB): 32768
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.15.0
Relevant Packages:
  next: 15.1.0 // Latest available version is detected (15.1.0).
  eslint-config-next: 15.1.0
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Module Resolution

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_",キャッシュハンドラー ERR_MODULE_NOT_FOUND が ESM モジュール使用時に発生する,"### この問題を再現するコードへのリンク

https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working

### 再現手順

1. リポジトリをクローンします https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working
2. `npm i` を実行します
3. `npm run dev` を実行します
4. エラーが表示されます

### 現在の動作と期待される動作

私の `package.json` には `""type"": ""module""` が含まれているため、[ドキュメントが示唆するように](https://nextjs.org/docs/app/api-reference/config/next-config-js/incrementalCacheHandlerPath)このようにキャッシュハンドラーを追加することはできません：

```js
module.exports = {
  cacheHandler: require.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // デフォルトのメモリ内キャッシュを無効にする
}
```

代わりに、次のように追加する必要があります：

```diff
module.exports = {
- cacheHandler: require.resolve('./cache-handler.js'),
+ cacheHandler: import.meta.resolve('./cache-handler.js'),
  cacheMaxMemorySize: 0, // デフォルトのメモリ内キャッシュを無効にする
}
```

しかし、これを行うと、`npm run dev` で次のエラーが発生します：

```
$ npm run dev

> test-nextjs@0.1.0 dev
> next dev

   ▲ Next.js 15.1.0
   - ローカル:        http://localhost:3000
   - ネットワーク:      http://192.168.100.16:3000

 ✓ 開始中...
 ✓ 1625ms で準備完了
[Error: Cannot find module '/Users/hristiyan.dodov/Projects/test-nextjs/.next/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js' imported from /Users/hristiyan.dodov/Projects/test-nextjs/node_modules/next/dist/server/next-server.js] {
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///Users/hristiyan.dodov/Projects/test-nextjs/.next/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js'
}
```

…また、`npm run build` を直接実行しても同様のエラーが発生します：

```
$ npm run build

> test-nextjs@0.1.0 build
> next build

   ▲ Next.js 15.1.0

   最適化されたプロダクションビルドを作成中 ...
 ✓ 正常にコンパイルされました
 ✓ リンティングと型の有効性をチェック中    

> ビルドエラーが発生しました
[Error: Cannot find module '/Users/hristiyan.dodov/Projects/test-nextjs/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js' imported from /Users/hristiyan.dodov/Projects/test-nextjs/node_modules/next/dist/export/helpers/create-incremental-cache.js] {
  type: 'Error',
  code: 'ERR_MODULE_NOT_FOUND',
  url: 'file:///Users/hristiyan.dodov/Projects/test-nextjs/file:/Users/hristiyan.dodov/Projects/test-nextjs/cache-handler.js'
}
```

次の2つのブランチを確認してください：

- https://github.com/hdodov/test-nextjs/tree/cache-handler-working — ここではキャッシュハンドラーが機能します
- https://github.com/hdodov/test-nextjs/tree/cache-handler-not-working — ここでは機能しません

これら2つの間の差分はこちらです： https://github.com/hdodov/test-nextjs/compare/cache-handler-working...cache-handler-not-working

### 環境情報を提供してください

```
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 23.6.0: Thu Sep 12 23:34:49 PDT 2024; root:xnu-10063.141.1.701.1~1/RELEASE_X86_64
  利用可能なメモリ (MB): 32768
  利用可能な CPU コア: 16
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.15.0
関連パッケージ:
  next: 15.1.0 // 利用可能な最新バージョンが検出されました (15.1.0)。
  eslint-config-next: 15.1.0
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

モジュール解決

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,Middleware matcher does not catch root path if base path is set,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/boring-cookies-go8s7s

### To Reproduce

1. Start application
2. Open root url (`/test`) - nothing will happen (but it should redirect)

### Current vs. Expected behavior

Commonly used matcher:
```
export const config = {
    matcher: [
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)'
    ]
}
```
does not catch root path if base path is set in next config. 

If I add sole `/` it matches:
```
export const config = {
    matcher: [
        '/',
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)'
    ]
}
```
If I remove base path from config the first example matches root path.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Debian 6.1.115-1 (2024-11-01)
  Available memory (MB): 31945
  Available CPU cores: 8
Binaries:
  Node: 21.7.1
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.4 // There is a newer version (15.1.0) available, upgrade recommended! 
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.6.3
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

_No response_",ミドルウェアマッチャーは、ベースパスが設定されている場合にルートパスをキャッチしません,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/boring-cookies-go8s7s

### 再現手順

1. アプリケーションを起動する
2. ルートURL（`/test`）を開く - 何も起こらない（リダイレクトすべきだが）

### 現在の動作と期待される動作

一般的に使用されるマッチャー：
```
export const config = {
    matcher: [
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)'
    ]
}
```
ベースパスがNext.jsの設定で設定されている場合、ルートパスをキャッチしません。

単独の`/`を追加すると、マッチします：
```
export const config = {
    matcher: [
        '/',
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)'
    ]
}
```
設定からベースパスを削除すると、最初の例がルートパスにマッチします。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Debian 6.1.115-1 (2024-11-01)
  利用可能なメモリ (MB): 31945
  利用可能なCPUコア: 8
バイナリ：
  Node: 21.7.1
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.4 // 新しいバージョン (15.1.0) が利用可能です。アップグレードを推奨します！
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.6.3
Next.js設定：
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,MDX Plugin String Format resolution doesn't work with ESM plugins with multiple exports,"### Link to the code that reproduces this issue

https://github.com/wesbos/next-mdx-plugin-string-issue

### To Reproduce

When using strings to import a MDX Rehype plugin, the Next.js importer fails.

I believe this is only when the package has multiple ESM exports - like this package: https://github.com/stefanprobst/rehype-extract-toc/blob/main/package.json

Thansk to @karlhorky for linking me to the possible commit / code. CC @timneutkens 

https://github.com/vercel/next.js/pull/72802/files#diff-d5904dff78d88856dc003d263e6f70f0a607166230fba8e4b947a3bae5e4e87cR10

```js
import createMDX from ""@next/mdx"";

const withMDX = createMDX({
  options: {
    rehypePlugins: [
      [""@stefanprobst/rehype-extract-toc""],
      [""@stefanprobst/rehype-extract-toc/mdx""],
    ],
  },
});
```

We get the Error:

```
Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
 ⨯ unhandledRejection: Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
 ⨯ unhandledRejection:  Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
```

Or 

```
Error: Package subpath './mdx' is not defined by ""exports"" in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
```

This error does not happen if the plugin is imported inside `next.config.mjs` and passed as a javascript function, but since Turborepo must pass as a string, I cannot do this.

The error exists both with and without --turbo.



### Current vs. Expected behavior

_

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 23.1.0
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.10.0
Relevant Packages:
  next: 15.0.4-canary.51 // Latest available version is detected (15.0.4-canary.51).
  eslint-config-next: N/A
  react: 19.0.0-beta-04b058868c-20240508
  react-dom: 19.0.0-beta-04b058868c-20240508
  typescript: 5.1.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Markdown (MDX)

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
MDXプラグインの文字列フォーマット解決が複数のエクスポートを持つESMプラグインで機能しない","本文:
### この問題を再現するコードへのリンク

https://github.com/wesbos/next-mdx-plugin-string-issue

### 再現手順

MDX Rehypeプラグインをインポートするために文字列を使用すると、Next.jsのインポーターが失敗します。

これは、パッケージに複数のESMエクスポートがある場合のみ発生すると思います - 例えば、このパッケージ: https://github.com/stefanprobst/rehype-extract-toc/blob/main/package.json

@karlhorkyに感謝します、可能なコミット/コードをリンクしてくれました。CC @timneutkens 

https://github.com/vercel/next.js/pull/72802/files#diff-d5904dff78d88856dc003d263e6f70f0a607166230fba8e4b947a3bae5e4e87cR10

```js
import createMDX from ""@next/mdx"";

const withMDX = createMDX({
  options: {
    rehypePlugins: [
      [""@stefanprobst/rehype-extract-toc""],
      [""@stefanprobst/rehype-extract-toc/mdx""],
    ],
  },
});
```

次のエラーが発生します:

```
Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
 ⨯ unhandledRejection: Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
 ⨯ unhandledRejection:  Error: No ""exports"" main defined in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
```

または 

```
Error: Package subpath './mdx' is not defined by ""exports"" in /Users/wesbos/Sites/delete-me/mdx-plugin-issue/node_modules/@stefanprobst/rehype-extract-toc/package.json
    at Array.map (<anonymous>) {
  code: 'ERR_PACKAGE_PATH_NOT_EXPORTED'
}
```

このエラーは、プラグインが`next.config.mjs`内でインポートされ、JavaScript関数として渡された場合には発生しませんが、Turborepoは文字列として渡す必要があるため、これを行うことができません。

このエラーは、--turboの有無にかかわらず存在します。

### 現在の動作と期待される動作

_

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 23.1.0
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.10.0
関連パッケージ:
  next: 15.0.4-canary.51 // 利用可能な最新バージョンが検出されました (15.0.4-canary.51)。
  eslint-config-next: N/A
  react: 19.0.0-beta-04b058868c-20240508
  react-dom: 19.0.0-beta-04b058868c-20240508
  typescript: 5.1.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて該当するものを選択）

Markdown (MDX)

### 影響を受けるステージはどれですか？（すべて該当するものを選択）

next dev (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,"dnyamicParams = true doesnt work with ""output: export"" config","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/heuristic-hooks-cndpsr

### To Reproduce

The CodeSandbox from NextJS to create minimal reproductions is broken, so my linked sandbox is too

use the output: export config,

create a page with a dynamic path: `/assessment/results/[id]/page.tsx`

add these contents:

```
export const dynamicParams = true

export function generateStaticParams() {
  return [{ params: { id: '1' } }]
}

export default function Page () .... // (doesnt matter what this is)
```

Run dev server and visit `http://localhost:3000/assessment/results/6

### Current vs. Expected behavior

it should render the page dynamically, instead I get the following error:

```
Error: Page ""/assessment/results/[id]/page"" is missing param ""/assessment/results/6"" in ""generateStaticParams()"", which is required with ""output: export"" config.
```

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Education
  Available memory (MB): 32700
  Available CPU cores: 8
Binaries:
  Node: 18.17.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.3 // An outdated version detected (latest is 15.0.4), upgrade is highly recommended!
  eslint-config-next: 14.0.4
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.3
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

Navigation, Output (export/standalone), Pages Router

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
dnyamicParams = trueは「output: export」設定で機能しません","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/heuristic-hooks-cndpsr

### 再現手順

NextJSの最小限の再現を作成するためのCodeSandboxが壊れているため、私のリンクされたサンドボックスも壊れています。

output: export設定を使用します。

動的パスを持つページを作成します: `/assessment/results/[id]/page.tsx`

以下の内容を追加します:

```
export const dynamicParams = true

export function generateStaticParams() {
  return [{ params: { id: '1' } }]
}

export default function Page () .... // (これが何であれ関係ありません)
```

開発サーバーを実行し、`http://localhost:3000/assessment/results/6`にアクセスします。

### 現在の動作と期待される動作

ページは動的にレンダリングされるべきですが、代わりに以下のエラーが表示されます:

```
Error: Page ""/assessment/results/[id]/page"" is missing param ""/assessment/results/6"" in ""generateStaticParams()"", which is required with ""output: export"" config.
```

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 10 Education
  利用可能なメモリ (MB): 32700
  利用可能なCPUコア: 8
バイナリ:
  Node: 18.17.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.3 // 古いバージョンが検出されました (最新は15.0.4)、アップグレードを強く推奨します!
  eslint-config-next: 14.0.4
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.3
Next.js設定:
  output: export
```

### 影響を受ける領域はどれですか？ (該当するすべてを選択)

ナビゲーション、出力 (export/standalone)、ページルーター

### 影響を受けるステージはどれですか？ (該当するすべてを選択)

next dev (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,Failed to build with the error occurred in `next/font`,"### Link to the code that reproduces this issue

https://stackblitz.com/edit/stackblitz-starters-yqm1pksx?file=package.json

### To Reproduce

1. Install next.js v14.2.20
2. Exec `npm run build` 

### Current vs. Expected behavior

**Current**

Failed to build with errors shown below

```
> next build

  ▲ Next.js 14.2.20
  - Environments: .env.local

   Creating an optimized production build ...
Failed to compile.

src/app/layout.tsx
An error occurred in `next/font`.

Error: Cannot find module '$HOME/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js'
```

**Expected**

Passing to build with no errors.

### Provide environment information

```bash
Operating System:
  Platform: Darwin
  Arch: arm64
  Version: 22.6.0
Binaries:
  Node: 20.16.0
  npm: 10.5.1
Relevant Packages:
  next: 14.2.20
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Font (next/font)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

I think this error is related with https://github.com/jridgewell/gen-mapping/issues/14","タイトル:
`next/font`で発生したエラーによるビルド失敗","本文:
### この問題を再現するコードへのリンク

https://stackblitz.com/edit/stackblitz-starters-yqm1pksx?file=package.json

### 再現手順

1. next.js v14.2.20をインストールする
2. `npm run build`を実行する

### 現在の動作と期待される動作

**現在の動作**

以下のエラーが表示されてビルドに失敗しました

```
> next build

  ▲ Next.js 14.2.20
  - 環境: .env.local

   最適化されたプロダクションビルドを作成中 ...
コンパイルに失敗しました。

src/app/layout.tsx
`next/font`でエラーが発生しました。

エラー: モジュール '$HOME/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js' が見つかりません
```

**期待される動作**

エラーなしでビルドが通過すること。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: Darwin
  アーキテクチャ: arm64
  バージョン: 22.6.0
バイナリ:
  Node: 20.16.0
  npm: 10.5.1
関連パッケージ:
  next: 14.2.20
Next.js設定:
  出力: スタンドアロン
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

フォント (next/font)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)

### 追加のコンテキスト

このエラーは https://github.com/jridgewell/gen-mapping/issues/14 に関連していると思います。"
S1,P1,Empty URL search params are swallowed when rewriting via middleware on Vercel,"### Link to the code that reproduces this issue

https://github.com/migueloller/vercel-middleware-search-params-bug-repro

### To Reproduce

Deploy the application to Vercel. The easiest way is using the Vercel CLI. I have a deployed version that can be used to test [here](https://search-params-drab.vercel.app/?foo=bar).

Visit the path `/?foo=` and then visit `/?foo=bar`. Note that while the search params are there for `/?foo=bar`, they are not there for `/?foo=`.

### Current vs. Expected behavior

The expectation is that URL search params are there even if the value is an empty string. Note, this is only happening because of the rewrite in the middleware. If the `middleware.ts` file is deleted, then the expected behavior occurs.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 18.19.0
  npm: 10.2.3
  Yarn: 1.22.21
  pnpm: 8.15.6
Relevant Packages:
  next: 15.0.3 // There is a newer version (15.0.4) available, upgrade recommended! 
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js Config:
  output: N/A
 ⚠ There is a newer version (15.0.4) available, upgrade recommended! 
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

The issue only happens when deploying to Vercel, it does not reproduce during local development. This is likely due to differences in the runtime middleware runs on in Vercel vs local dev.","タイトル:
Vercelのミドルウェアを介した書き換え時に空のURL検索パラメータが消失する","本文:
### この問題を再現するコードへのリンク

https://github.com/migueloller/vercel-middleware-search-params-bug-repro

### 再現手順

アプリケーションをVercelにデプロイします。最も簡単な方法はVercel CLIを使用することです。テストに使用できるデプロイ済みのバージョンがあります[こちら](https://search-params-drab.vercel.app/?foo=bar)。

`/?foo=`のパスにアクセスし、その後`/?foo=bar`にアクセスします。`/?foo=bar`には検索パラメータが存在しますが、`/?foo=`には存在しないことに注意してください。

### 現在の動作と期待される動作

期待されるのは、値が空の文字列であってもURL検索パラメータが存在することです。これはミドルウェアの書き換えによってのみ発生しています。`middleware.ts`ファイルを削除すると、期待される動作が発生します。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 18.19.0
  npm: 10.2.3
  Yarn: 1.22.21
  pnpm: 8.15.6
関連パッケージ:
  next: 15.0.3 // 新しいバージョン (15.0.4) が利用可能です。アップグレードを推奨します！ 
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js設定:
  出力: N/A
 ⚠ 新しいバージョン (15.0.4) が利用可能です。アップグレードを推奨します！ 
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細を読む - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

この問題はVercelにデプロイしたときのみ発生し、ローカル開発中には再現しません。これは、Vercelとローカル開発でミドルウェアが実行されるランタイムの違いによるものと思われます。"
S1,P1,"Clicking on a <Link> to the current page focuses the first page.tsx element, not the first layout.tsx element","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/vigilant-orla-2snw6p

### To Reproduce

1. Put a link in the root `layout.tsx` file that takes you to `/`
2. Click that link, notice how `document.activeElement` is now the first element from the `page.tsx`, and not `layout.tsx`

### Current vs. Expected behavior

I would expect this line to find the first element on the page, but instead it finds the first element from the `page.tsx`, causing the page to scroll down when clicking on a link to itself:

https://github.com/vercel/next.js/blob/657c2cbd72ebf8f9a58edb4a7393c596246e3161/packages/next/src/client/components/layout-router.tsx#L209

This is causing issues on our site as it scrolls the user down every time they visit the home page, because we have a large shared navigation bar that is on every page.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.49 // Latest available version is detected (15.0.4-canary.49).
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

Related: #49427",現在のページへの<Link>をクリックすると、最初のlayout.tsx要素ではなく、最初のpage.tsx要素にフォーカスが当たる,"### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/vigilant-orla-2snw6p

### 再現手順

1. ルートの`layout.tsx`ファイルに`/`に移動するリンクを追加します。
2. そのリンクをクリックし、`document.activeElement`が`layout.tsx`の最初の要素ではなく、`page.tsx`の最初の要素になっていることに気づきます。

### 現在の動作と期待される動作

この行がページ上の最初の要素を見つけることを期待していましたが、代わりに`page.tsx`の最初の要素を見つけてしまい、自己リンクをクリックするとページが下にスクロールします：

https://github.com/vercel/next.js/blob/657c2cbd72ebf8f9a58edb4a7393c596246e3161/packages/next/src/client/components/layout-router.tsx#L209

これにより、私たちのサイトでは、ホームページを訪れるたびにユーザーが下にスクロールされる問題が発生しています。なぜなら、すべてのページに大きな共有ナビゲーションバーがあるからです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.4-canary.49 // 検出された最新の利用可能バージョンは (15.0.4-canary.49) です。
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.3.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

関連: #49427"
S1,P1,API Routes Responses Not Being Gzipped in Next.js App Router #73693,"### Link to the code that reproduces this issue

https://github.com/huseyinbuyukdere/temp-issue-gzip-next

### To Reproduce

**Start the application in development mode using next dev.**

**Create an API route under the App Router, e.g., /app/api/example/route.js**

Example Api Route
```javascript 
export async function GET() {
    const data = Array(5000).fill({ id: 1, name: ""example"" });
    return NextResponse.json(data, {
        headers: {
            ""Content-Type"": ""application/json"",
        },
    });
}
```


**Send a GET request to the API route with curl**

curl -H ""Accept-Encoding: gzip"" http://localhost:3000/api/example

**Observe the response headers and payload.**

### Current vs. Expected behavior

### Current vs. Expected behavior


```yaml
**Current**
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 12345
Date: Mon, 11 Dec 2024 12:34:56 GMT

**Expected**: The response should be gzipped if the **Accept-Encoding: gzip** header is present.
HTTP/1.1 200 OK
Content-Type: application/json
Content-Encoding: gzip
Content-Length: 4567
Date: Mon, 11 Dec 2024 12:34:56 GMT


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernelroot:t-11215.1.10~2/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.4 // Latest available version is detected (15.0.4).
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware, Performance, Runtime

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

- This issue is reproducible in both development (next dev) and production (next start) modes.
- Tested with Next.js versions 14.1.0 and 15.0.4.
- Static assets are gzipped correctly by Next.js, but API route responses are not.
- There is no middleware or CDN in use during these tests. I expected gzip compression to be handled automatically by the framework.",APIルートのレスポンスがNext.jsアプリルーターでGzip圧縮されない #73693,"### この問題を再現するためのコードへのリンク

https://github.com/huseyinbuyukdere/temp-issue-gzip-next

### 再現手順

**next devを使用してアプリケーションを開発モードで起動します。**

**アプリルーターの下にAPIルートを作成します。例: /app/api/example/route.js**

例のAPIルート
```javascript 
export async function GET() {
    const data = Array(5000).fill({ id: 1, name: ""example"" });
    return NextResponse.json(data, {
        headers: {
            ""Content-Type"": ""application/json"",
        },
    });
}
```

**curlを使用してAPIルートにGETリクエストを送信します。**

curl -H ""Accept-Encoding: gzip"" http://localhost:3000/api/example

**レスポンスヘッダーとペイロードを観察します。**

### 現在の動作と期待される動作

### 現在の動作と期待される動作

```yaml
**現在の動作**
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 12345
Date: Mon, 11 Dec 2024 12:34:56 GMT

**期待される動作**: **Accept-Encoding: gzip**ヘッダーが存在する場合、レスポンスはGzip圧縮されるべきです。
HTTP/1.1 200 OK
Content-Type: application/json
Content-Encoding: gzip
Content-Length: 4567
Date: Mon, 11 Dec 2024 12:34:56 GMT

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernelroot:t-11215.1.10~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.4 // 検出された最新の利用可能バージョンは15.0.4です。
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.7.2
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア、パフォーマンス、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

- この問題は、開発モード（next dev）と本番モード（next start）の両方で再現可能です。
- Next.jsのバージョン14.1.0と15.0.4でテスト済みです。
- 静的アセットはNext.jsによって正しくGzip圧縮されていますが、APIルートのレスポンスは圧縮されていません。
- これらのテスト中にミドルウェアやCDNは使用していません。Gzip圧縮はフレームワークによって自動的に処理されることを期待していました。"
S1,P1,Next.js Cache not working with CircleCI,"### Link to the code that reproduces this issue

https://github.com/DoctrineLegal/nextjs-cache-issue/blob/master/README.md

### To Reproduce

1. Trigger a build on CircleCI
2. Cache it's .next directory
3. Re-trigger a build on CircleCI with a hot cache
4. See that next.js is not using the cache

### Current vs. Expected behavior

### Current behavior: https://app.circleci.com/pipelines/github/DoctrineLegal/nextjs-cache-issue/1/workflows/745158ac-1c40-448e-9083-391e90cb0938/jobs/1

CircleCI is not using the cache. And consistently taking the same time to build.
![CleanShot 2024-12-09 at 07 27 03@2x](https://github.com/user-attachments/assets/fb433d38-5475-4d9e-af70-30640b702ae0)


### Expected Behavior: https://app.circleci.com/pipelines/github/DoctrineLegal/nextjs-cache-issue/1/workflows/745158ac-1c40-448e-9083-391e90cb0938/jobs/1
CircleCI should use the cache as specified here : https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#circleci


When forcing the cache dir it actually works.
![CleanShot 2024-12-09 at 07 25 11@2x](https://github.com/user-attachments/assets/e35a80e2-bd69-41eb-aef0-0da300b062d1)


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:38:45 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8122
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 22.4.1
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: 9.15.0
Relevant Packages:
  next: 15.0.4-canary.46 // There is a newer canary version (15.0.4-canary.48) available, please upgrade! 
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js Config:
  output: N/A
 ⚠ There is a newer canary version (15.0.4-canary.48) available, please upgrade! 
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Performance, Webpack

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

CircleCI is indeed running on docker with a cgroup container docker : https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/is-docker/index.js and found as docker from this file.

I believe this PR : https://github.com/vercel/next.js/pull/70516 from @shuding introduced the issue.

As a side note : CircleCI is currently rolling out new containers that will not be subject to this issue : https://discuss.circleci.com/t/docker-executor-infrastructure-upgrade/52282",Next.jsのキャッシュがCircleCIで機能しない,"### この問題を再現するためのコードへのリンク

https://github.com/DoctrineLegal/nextjs-cache-issue/blob/master/README.md

### 再現手順

1. CircleCIでビルドをトリガーする
2. .nextディレクトリをキャッシュする
3. ホットキャッシュでCircleCIでビルドを再トリガーする
4. next.jsがキャッシュを使用していないことを確認する

### 現在の動作と期待される動作

### 現在の動作: https://app.circleci.com/pipelines/github/DoctrineLegal/nextjs-cache-issue/1/workflows/745158ac-1c40-448e-9083-391e90cb0938/jobs/1

CircleCIはキャッシュを使用しておらず、ビルドにかかる時間が常に同じです。
![CleanShot 2024-12-09 at 07 27 03@2x](https://github.com/user-attachments/assets/fb433d38-5475-4d9e-af70-30640b702ae0)

### 期待される動作: https://app.circleci.com/pipelines/github/DoctrineLegal/nextjs-cache-issue/1/workflows/745158ac-1c40-448e-9083-391e90cb0938/jobs/1
CircleCIはここに指定されているようにキャッシュを使用するべきです: https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#circleci

キャッシュディレクトリを強制すると、実際に機能します。
![CleanShot 2024-12-09 at 07 25 11@2x](https://github.com/user-attachments/assets/e35a80e2-bd69-41eb-aef0-0da300b062d1)

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:38:45 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8122
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 8
バイナリ:
  Node: 22.4.1
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: 9.15.0
関連パッケージ:
  next: 15.0.4-canary.46 // 新しいカナリアバージョン (15.0.4-canary.48) が利用可能です。アップグレードしてください!
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js設定:
  出力: N/A
 ⚠ 新しいカナリアバージョン (15.0.4-canary.48) が利用可能です。アップグレードしてください!
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細を読む - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

パフォーマンス、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build（ローカル）

### 追加のコンテキスト

CircleCIは実際にcgroupコンテナのdockerで実行されており、https://github.com/vercel/next.js/blob/canary/packages/next/src/compiled/is-docker/index.js からdockerとして見つかりました。

このPR: https://github.com/vercel/next.js/pull/70516 が@shudingによって問題を引き起こしたと考えています。

余談ですが、CircleCIは現在、この問題の影響を受けない新しいコンテナを展開しています: https://discuss.circleci.com/t/docker-executor-infrastructure-upgrade/52282"
S1,P1,Bug: adsbygoogle.push() error: Only one 'enable_page_level_ads' allowed per page in Next.js v14,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/sleepy-yalow-h3d3n3

### To Reproduce

1. Setup a Next.js v14 Project:
2. Initialize a new Next.js project or use an existing one running on version 14.
3. Create the GoogleAdsense Component:
4. Add the GoogleAdsense.tsx component in the src/components/analytics/ directory with the following content (credentials hidden for security).

<details><summary>Details</summary>
<p>
src/components/analytics/GoogleAdsense.tsx
</p>
</details> 

```
'use client';

import { useEffect } from 'react';
import Script from 'next/script';

let adsenseInitialized = false;

const GoogleAdsense = () => {
  useEffect(() => {
    if (!adsenseInitialized && typeof window !== 'undefined') {
      try {
        (window.adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: 'ca-pub-XXXXXXXXXXXXXXX', // Replace with your AdSense client ID
          enable_page_level_ads: true,
        });
        adsenseInitialized = true;
      } catch (e) {
        console.error('Adsense error:', e);
      }
    }
  }, []);

  return (
    <>
      <Script
        async
        src=""https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXX"" // Replace with your AdSense client ID
        crossOrigin=""anonymous""
        strategy=""afterInteractive""
      />
    </>
  );
};

export default GoogleAdsense;
```

5. Integrate GoogleAdsense into RootLayout:
6. Modify your app/layout.tsx to include the GoogleAdsense component alongside GoogleAnalytics.

<details><summary>Details</summary>
<p>
app/layout.tsx
</p>
</details> 

```
import GoogleAnalytics from '@/components/analytics/GoogleAnalytics';
import GoogleAdsense from '@/components/analytics/GoogleAdsense';
import Footer from '@/components/layout/footer';
import Header from '@/components/layout/header';
import { ThemeProvider } from '@/components/theme-provider';

import '../../globals.css';

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <head>
        <GoogleAnalytics />
        <GoogleAdsense />
      </head>
      <body
        className="""">
        <ThemeProvider
          attribute=""class""
          defaultTheme=""system""
          enableSystem
          disableTransitionOnChange>
          <Header />
          {children}
          <Footer />
        </ThemeProvider>
      </body>
    </html>
  );
}
```
7. Run the Project:
8. Start your Next.js development server.
9. npm run dev
10. Observe the Console:
11. Open the browser’s developer console and navigate to your website (http://localhost:3000).
12. You should encounter the following error:
	_TagError: adsbygoogle.push() error: Only one 'enable_page_level_ads' allowed per page._

### Current vs. Expected behavior

Current Behavior:

When integrating both Google Analytics and Google AdSense into a Next.js v14 project, attempting to initialize Google AdSense results in the following error in the browser console:

TagError: adsbygoogle.push() error: Only one 'enable_page_level_ads' allowed per page.

Expected Behavior:

Both Google Analytics and Google AdSense should coexist without conflicts, allowing successful initialization and functionality of both services. Specifically:
	•	Google Analytics should track user interactions and page views as intended.
	•	Google AdSense should load and display ads without triggering initialization errors.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:00:32 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6030
  Available memory (MB): 18432
  Available CPU cores: 11
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.15.0
Relevant Packages:
  next: 14.2.3 // An outdated version detected (latest is 15.0.4), upgrade is highly recommended!
  eslint-config-next: 14.2.3
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.2
Next.js Config:
  output: N/A
 ⚠ An outdated version detected (latest is 15.0.4), upgrade is highly recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Script (next/script)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed)

### Additional context

_No response_",バグ: adsbygoogle.push() エラー: ページごとに 'enable_page_level_ads' は1つのみ許可されています (Next.js v14),"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/sleepy-yalow-h3d3n3

### 再現手順

1. Next.js v14 プロジェクトをセットアップします。
2. 新しい Next.js プロジェクトを初期化するか、バージョン14で実行中の既存のプロジェクトを使用します。
3. GoogleAdsense コンポーネントを作成します。
4. src/components/analytics/ ディレクトリに以下の内容で GoogleAdsense.tsx コンポーネントを追加します（セキュリティのために資格情報は非表示）。

<details><summary>詳細</summary>
<p>
src/components/analytics/GoogleAdsense.tsx
</p>
</details> 

```
'use client';

import { useEffect } from 'react';
import Script from 'next/script';

let adsenseInitialized = false;

const GoogleAdsense = () => {
  useEffect(() => {
    if (!adsenseInitialized && typeof window !== 'undefined') {
      try {
        (window.adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: 'ca-pub-XXXXXXXXXXXXXXX', // あなたの AdSense クライアント ID に置き換えてください
          enable_page_level_ads: true,
        });
        adsenseInitialized = true;
      } catch (e) {
        console.error('Adsense error:', e);
      }
    }
  }, []);

  return (
    <>
      <Script
        async
        src=""https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXX"" // あなたの AdSense クライアント ID に置き換えてください
        crossOrigin=""anonymous""
        strategy=""afterInteractive""
      />
    </>
  );
};

export default GoogleAdsense;
```

5. GoogleAdsense を RootLayout に統合します。
6. app/layout.tsx を修正して、GoogleAnalytics と一緒に GoogleAdsense コンポーネントを含めます。

<details><summary>詳細</summary>
<p>
app/layout.tsx
</p>
</details> 

```
import GoogleAnalytics from '@/components/analytics/GoogleAnalytics';
import GoogleAdsense from '@/components/analytics/GoogleAdsense';
import Footer from '@/components/layout/footer';
import Header from '@/components/layout/header';
import { ThemeProvider } from '@/components/theme-provider';

import '../../globals.css';

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <head>
        <GoogleAnalytics />
        <GoogleAdsense />
      </head>
      <body
        className="""">
        <ThemeProvider
          attribute=""class""
          defaultTheme=""system""
          enableSystem
          disableTransitionOnChange>
          <Header />
          {children}
          <Footer />
        </ThemeProvider>
      </body>
    </html>
  );
}
```
7. プロジェクトを実行します。
8. Next.js 開発サーバーを起動します。
9. npm run dev
10. コンソールを観察します。
11. ブラウザの開発者コンソールを開き、あなたのウェブサイト (http://localhost:3000) に移動します。
12. 次のエラーが発生するはずです：
	_TagError: adsbygoogle.push() エラー: ページごとに 'enable_page_level_ads' は1つのみ許可されています。_

### 現在の動作と期待される動作

現在の動作：

Google Analytics と Google AdSense の両方を Next.js v14 プロジェクトに統合すると、Google AdSense を初期化しようとすると、ブラウザのコンソールに次のエラーが表示されます：

TagError: adsbygoogle.push() エラー: ページごとに 'enable_page_level_ads' は1つのみ許可されています。

期待される動作：

Google Analytics と Google AdSense の両方が競合することなく共存し、両方のサービスの初期化と機能が成功すること。具体的には：
	•	Google Analytics はユーザーのインタラクションとページビューを意図した通りに追跡するべきです。
	•	Google AdSense は広告を読み込み、表示し、初期化エラーを引き起こさずに動作するべきです。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:00:32 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 18432
  利用可能な CPU コア: 11
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.15.0
関連パッケージ：
  next: 14.2.3 // 古いバージョンが検出されました (最新は 15.0.4)、アップグレードを強く推奨します！
  eslint-config-next: 14.2.3
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.5.2
Next.js 設定：
  出力: N/A
 ⚠ 古いバージョンが検出されました (最新は 15.0.4)、アップグレードを強く推奨します！
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細を読む - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（すべて該当するものを選択）

スクリプト (next/script)

### 影響を受けるステージはどれですか？（すべて該当するものを選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

_回答なし_"
S1,P1,Vercel local build for NextJS and prebuilt deployment throws error with styled-jsx,"### Link to the code that reproduces this issue

https://github.com/nikitimi/examiner-monorepo

### To Reproduce

1. Set-up a monorepo using `pnpm`.
2. create catalog with `codemode pnpm/catalog`.
3. create-next-app inside monorepo's packages.
4. create `pnpm-workspace.yaml`.
5. include catalogs in `pnpm-workspace.yaml`:

```yaml
  catalogs:
    next-canary:
      next: 15.0.4-canary.45
      react: 19.0.0-rc.1
      react-dom: 19.0.0-rc.1
    next-stable:
      next: 15.0.4
      react: 19.0.0-rc.1
      react-dom: 19.0.0-rc.1
```
6. Run `vercel build && vercel deploy --prebuilt`.

### Current vs. Expected behavior

### Expected:

Deployed in Vercel.

### Current:
![Screenshot 2024-12-08 020246](https://github.com/user-attachments/assets/d8d959ca-8ede-4575-8fc1-bc48c01ae7f4)


### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 8026
  Available CPU cores: 8
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.4 // Latest available version is detected (15.0.4).
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

I've tested putting env var like stated in [issue #1209](https://github.com/orgs/vercel/discussions/1209) to disable build cache, but it is not working, I also tested passing --force flag, but it is still not working.",VercelのローカルビルドとNextJSのプリビルドデプロイでstyled-jsxのエラーが発生,"### コードのリンク

https://github.com/nikitimi/examiner-monorepo

### 再現手順

1. `pnpm`を使用してモノレポをセットアップします。
2. `codemode pnpm/catalog`でカタログを作成します。
3. モノレポのパッケージ内にcreate-next-appを作成します。
4. `pnpm-workspace.yaml`を作成します。
5. `pnpm-workspace.yaml`にカタログを含めます：

```yaml
  catalogs:
    next-canary:
      next: 15.0.4-canary.45
      react: 19.0.0-rc.1
      react-dom: 19.0.0-rc.1
    next-stable:
      next: 15.0.4
      react: 19.0.0-rc.1
      react-dom: 19.0.0-rc.1
```
6. `vercel build && vercel deploy --prebuilt`を実行します。

### 現在の動作と期待される動作

### 期待される動作：

Vercelにデプロイされること。

### 現在の動作：
![Screenshot 2024-12-08 020246](https://github.com/user-attachments/assets/d8d959ca-8ede-4575-8fc1-bc48c01ae7f4)

### 環境情報

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Pro
  利用可能なメモリ (MB): 8026
  利用可能なCPUコア: 8
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ：
  next: 15.0.4 // 利用可能な最新バージョンが検出されました (15.0.4)。
  eslint-config-next: N/A
  react: 19.0.0
  react-dom: 19.0.0
  typescript: N/A
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、出力（エクスポート/スタンドアロン）

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build（ローカル）

### 追加のコンテキスト

[issue #1209](https://github.com/orgs/vercel/discussions/1209)に記載されているように、ビルドキャッシュを無効にするための環境変数を設定しましたが、機能していません。また、--forceフラグを渡すことも試しましたが、依然として機能していません。"
S1,P1,revalidatePath doesn't invalidate route cache for back/forward,"### Link to the code that reproduces this issue

https://stackblitz.com/edit/stackblitz-starters-cxo2blep?file=app%2Fpage.tsx

### To Reproduce

1. Click [Update] (it sends POST /foo, which updates data.value, and calls revalidatePath).
2. Click [Go to /b page]
3. Click [Go back with history.back()]

### Current vs. Expected behavior

Expected: data.value: 1
Actual: data.value: 0

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: Ubuntu 20.04.0 LTS Sat Dec 07 2024 16:27:55 GMT+0500 (Yekaterinburg Standard Time)
  Available memory (MB): NaN
  Available CPU cores: 8
Binaries:
  Node: 18.20.3
  npm: 10.2.3
  Yarn: 1.22.19
  pnpm: 8.15.6
Relevant Packages:
  next: 15.0.4 // Latest available version is detected (15.0.4).
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.2.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

- According to the docs, `revalidatePath` should invalidate Route Cache. But actually, it doesn't affect back/forward caching, which is unexpected.
- This is a minimal reproduction. My real case is, several client components have useState(initialState), where initialState is data from server component. After updating the data using route handler, going to another page and navigating backwards, the entire page state becomes outdated.
- Similar issue https://github.com/vercel/next.js/issues/59958","タイトル:
revalidatePathはバック/フォワードのルートキャッシュを無効にしません","本文:
### この問題を再現するコードへのリンク

https://stackblitz.com/edit/stackblitz-starters-cxo2blep?file=app%2Fpage.tsx

### 再現手順

1. [更新]をクリックします（POST /fooを送信し、data.valueを更新し、revalidatePathを呼び出します）。
2. [ページ/bに移動]をクリックします。
3. [history.back()]で戻るをクリックします。

### 現在の動作と期待される動作

期待される結果: data.value: 1  
実際の結果: data.value: 0

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: Ubuntu 20.04.0 LTS Sat Dec 07 2024 16:27:55 GMT+0500 (エカテリンブルク標準時)
  利用可能なメモリ (MB): NaN
  利用可能なCPUコア: 8
バイナリ:
  Node: 18.20.3
  npm: 10.2.3
  Yarn: 1.22.19
  pnpm: 8.15.6
関連パッケージ:
  next: 15.0.4 // 利用可能な最新バージョンが検出されました (15.0.4)。
  eslint-config-next: 15.0.4
  react: 19.0.0
  react-dom: 19.0.0
  typescript: 5.2.2
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

- ドキュメントによると、`revalidatePath`はルートキャッシュを無効にするはずですが、実際にはバック/フォワードキャッシュには影響を与えず、予期しない動作です。
- これは最小限の再現です。私の実際のケースでは、いくつかのクライアントコンポーネントがuseState(initialState)を持ち、initialStateはサーバーコンポーネントからのデータです。ルートハンドラーを使用してデータを更新した後、別のページに移動し、戻ると、ページ全体の状態が古くなります。
- 類似の問題 https://github.com/vercel/next.js/issues/59958"
S1,P1,Server action with redirect to external URL returns undefined to client,"### Link to the code that reproduces this issue

https://github.com/alexeden/server-action-returns-undefined

### To Reproduce

1. Clone repo, install, `npm dev`
2. Open browser & console
3. Click button that calls action with relative URL redirect, note that the action result isn't logged (expected)
4. Click buttons that calls action with redirect to external URL, return value is logged as `undefined`

![image](https://github.com/user-attachments/assets/483f5a28-f7a0-4b52-a7cd-113f94c21243)


### Current vs. Expected behavior

**Current** Server actions that redirect to external URLs return `undefined` to the client component, even if the action itself returns a real value

**Expected** Server actions with redirects behave the same regardless of the URL they redirect to, insofar as their callers can expect `never` to mean that they don't return anything

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.14.4
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

This breaks (albeit short-lived, since the redirect still proceeds) any subsequent code in a client that calls the action if the action usually returns normal values, e.g. data from a server. 

Discovered the issue on a project when someone applied network throttling and noticed that a form component was flashing an error message right before the browser redirected because it was attempting to do something with an `undefined` value.

I tried different spins on this like using `useTransition`; no go.",サーバーアクションによる外部URLへのリダイレクトがクライアントに未定義を返す,"### この問題を再現するコードへのリンク

https://github.com/alexeden/server-action-returns-undefined

### 再現手順

1. リポジトリをクローンし、インストールして `npm dev` を実行
2. ブラウザとコンソールを開く
3. 相対URLリダイレクトを伴うアクションを呼び出すボタンをクリックし、アクションの結果がログに表示されないことを確認（期待通り）
4. 外部URLへのリダイレクトを伴うアクションを呼び出すボタンをクリックし、戻り値が `undefined` としてログに表示されることを確認

![image](https://github.com/user-attachments/assets/483f5a28-f7a0-4b52-a7cd-113f94c21243)

### 現在の動作と期待される動作

**現在の動作** 外部URLにリダイレクトするサーバーアクションは、アクション自体が実際の値を返しても、クライアントコンポーネントに `undefined` を返します。

**期待される動作** リダイレクトを伴うサーバーアクションは、リダイレクト先のURLに関係なく同様に動作し、呼び出し元は `never` が何も返さないことを期待できるべきです。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020
  利用可能メモリ (MB): 32768
  利用可能CPUコア: 12
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.14.4
関連パッケージ:
  next: 15.0.3 // 利用可能な最新バージョンが検出されました (15.0.3)。
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

これは、アクションが通常の値（例：サーバーからのデータ）を返す場合に、クライアント内のその後のコードを壊します（短命ですが、リダイレクトは続行されます）。

ネットワークスロットリングを適用したプロジェクトでこの問題を発見し、フォームコンポーネントがリダイレクトの直前に `undefined` 値で何かをしようとしてエラーメッセージを表示していることに気付きました。

`useTransition` を使用するなど、さまざまな試みをしましたが、効果はありませんでした。"
S1,P1,Variable expansions for media queries inside styled-jsx break with Turbopack (bis),"### Link to the code that reproduces this issue

https://github.com/miselin/next-style-jsx-var-expansion-repro

### To Reproduce

1. Clone reproduction repository
1. Run `npm install`
1. Run `npm run dev`
1. Visit http://localhost:3000/
1. The page should display without error, showing an ""Hello"" text that changes size based on the browser window dimensions (i.e. the media query is using the variable-expanded 768px breakpoint correctly)
1. Terminate that process
1. Run `npm run dev:turbo`
1. Visit http://localhost:3000/
1. The page should display without error but the ""Hello"" text does not change its size based on the browser window dimensions anymore (i.e. the media query using the variable-expanded 768px breakpoint is not used)

### Current vs. Expected behavior

Expected: I see the expected variable expansion and correct media query CSS, allowing the use of constants for controlling media query breakpoints in an application.

Current: enabling Turbopack breaks the media query breakpoint unless the variables are removed.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
Binaries:
  Node: 20.16.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.38
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.1.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

This does not repro with Next 14.1.4. The first version that repros this issue seems to be 14.2.0-canary.14. Canary versions between 14.2.0-canary.0 and 14.2.0-canary.13 behaves as issue #61788.",変数展開によるメディアクエリがTurbopackで壊れる（その2）,"### コードのリンク（この問題を再現するための）

https://github.com/miselin/next-style-jsx-var-expansion-repro

### 再現手順

1. 再現リポジトリをクローンする
1. `npm install`を実行する
1. `npm run dev`を実行する
1. http://localhost:3000/ にアクセスする
1. ページはエラーなく表示され、「Hello」テキストがブラウザウィンドウのサイズに基づいてサイズを変更する（つまり、メディアクエリが変数展開された768pxのブレークポイントを正しく使用している）
1. そのプロセスを終了する
1. `npm run dev:turbo`を実行する
1. http://localhost:3000/ にアクセスする
1. ページはエラーなく表示されるが、「Hello」テキストはブラウザウィンドウのサイズに基づいてサイズを変更しなくなる（つまり、変数展開された768pxのブレークポイントを使用したメディアクエリが使用されていない）

### 現在の動作と期待される動作

期待される動作：期待される変数展開と正しいメディアクエリCSSが表示され、アプリケーション内でメディアクエリのブレークポイントを制御するための定数を使用できる。

現在の動作：Turbopackを有効にすると、変数を削除しない限りメディアクエリのブレークポイントが壊れる。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 11 Pro
バイナリ：
  Node: 20.16.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.4-canary.38
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.1.3
Next.js 設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）

### 追加のコンテキスト

これはNext 14.1.4では再現しません。この問題を再現する最初のバージョンは14.2.0-canary.14のようです。14.2.0-canary.0から14.2.0-canary.13の間のカナリアバージョンは、問題#61788のように動作します。"
S1,P1,Client components wrapped in React.memo rendered by a server component remount unexpectedly,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/wispy-leftpad-9scxwl?workspaceId=ws_TBJMVdGvaGCmBYC6VerWKV

### To Reproduce

In the provided example, click the ""router.refresh()"" button to observe the unexpected remount behavior of memo-ed components.

Details are given directly in the provided example. For completeness, this is a copy of the explanation in the example:

<p>
        All components here are client components that use the same base
        component logging into the console when it is mounted and unmounted and
        updating an internal counting state every 500ms. All components are
        children of the same server component.
      </p>
      <div>
        The differences are:
        <ul>
          <li>Normal: Nothing special, only renders the base component</li>
          <li>Memo: Same as normal, but wrapped in React.memo</li>
          <li>
            Indirect Memo: Normal component that renders a second component that
            is wrapped in React.memo
          </li>
        </ul>
      </div>
      <p>
        When you hit the ""router.refresh()"" button, you can observe, that the
        ""Memo"" component is remounted (see console and resetted state), which is
        an unexpected behavior.
      </p>
      <p>
        You can observe that this is not happening for ""Indirect Memo"". It only
        seems to affect components wrappend in React.memo that are directly
        rendered from a server component.
      </p> 

### Current vs. Expected behavior

The component wrapped in React.memo remounts when the server component rerenders, here triggered with router.refresh().

The expected behavior would be, that it behaves like the other components and just rerenders, but not remounts.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 8198
  Available CPU cores: 4
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.37 // Latest available version is detected (15.0.4-canary.37).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

I tested this in next 14 and 15 (15.0.4-canary.37) and was able to reproduce it with both versions.",クライアントコンポーネントがReact.memoでラップされ、サーバーコンポーネントによって予期せず再マウントされる,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/wispy-leftpad-9scxwl?workspaceId=ws_TBJMVdGvaGCmBYC6VerWKV

### 再現手順

提供された例で「router.refresh()」ボタンをクリックすると、メモ化されたコンポーネントの予期しない再マウント動作を観察できます。

詳細は提供された例に直接記載されています。完全性のために、例の説明をコピーします：

<p>
        ここにあるすべてのコンポーネントはクライアントコンポーネントで、マウントおよびアンマウント時にコンソールにログを出力し、500msごとに内部のカウント状態を更新する同じベースコンポーネントを使用しています。すべてのコンポーネントは同じサーバーコンポーネントの子です。
      </p>
      <div>
        違いは次のとおりです：
        <ul>
          <li>通常：特に何もなく、ベースコンポーネントをレンダリングするだけ</li>
          <li>メモ：通常と同じですが、React.memoでラップされています</li>
          <li>
            間接メモ：React.memoでラップされた2番目のコンポーネントをレンダリングする通常のコンポーネント
          </li>
        </ul>
      </div>
      <p>
        「router.refresh()」ボタンを押すと、「メモ」コンポーネントが再マウントされることが観察できます（コンソールを参照し、状態がリセットされます）。これは予期しない動作です。
      </p>
      <p>
        「間接メモ」ではこれが発生しないことが観察できます。これは、サーバーコンポーネントから直接レンダリングされるReact.memoでラップされたコンポーネントにのみ影響を与えるようです。
      </p> 

### 現在の動作と期待される動作

React.memoでラップされたコンポーネントは、サーバーコンポーネントが再レンダリングされると再マウントされます。ここではrouter.refresh()でトリガーされています。

期待される動作は、他のコンポーネントのように再レンダリングされるが、再マウントされないことです。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム：linux
  アーキ：x64
  バージョン：#1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ（MB）：8198
  利用可能なCPUコア：4
バイナリ：
  Node：20.9.0
  npm：9.8.1
  Yarn：1.22.19
  pnpm：8.10.2
関連パッケージ：
  next：15.0.4-canary.37 // 検出された最新の利用可能なバージョン（15.0.4-canary.37）。
  eslint-config-next：N/A
  react：19.0.0-rc-b01722d5-20241114
  react-dom：19.0.0-rc-b01722d5-20241114
  typescript：5.3.3
Next.js設定：
  output：N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、Vercel（デプロイ済み）、その他（デプロイ済み）

### 追加のコンテキスト

私はこれをnext 14および15（15.0.4-canary.37）でテストし、両方のバージョンで再現できました。"
S1,P1,Next lint doesn't give warning of unused dependencies in other places than pages/components,"### Link to the code that reproduces this issue

https://github.com/Harsh-Sharma25/lint-issue-next

### To Reproduce

1. pnpm i
2. pnpm lint
& then if you run `pnpm eslint .` you will see the difference.

### Current vs. Expected behavior

When you run `pnpm lint` which in turn runs next lint it doesn't gives warning for missing dependencies in the hooks folder but if you define a hook inside pages then it does. `pnpm eslint .` seems to give proper warnings.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home Single Language
  Available memory (MB): 16077
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.14.2
Relevant Packages:
  next: 15.0.4-canary.37 // Latest available version is detected (15.0.4-canary.37).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Linting

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

My original project is not on canary release, it is on 15.0.3 and it also doesn't use react 19 rc, which is when I encountered this issue. I've also tested with the eslint version: 9.15.0.
",次のlintは、ページ/コンポーネント以外の場所で未使用の依存関係の警告を出しません,"### この問題を再現するコードへのリンク

https://github.com/Harsh-Sharma25/lint-issue-next

### 再現手順

1. pnpm i
2. pnpm lint
& その後、`pnpm eslint .`を実行すると、違いがわかります。

### 現在の動作と期待される動作

`pnpm lint`を実行すると、次のlintが実行されますが、フックフォルダ内の依存関係が不足していることに対する警告が表示されません。しかし、ページ内にフックを定義すると、警告が表示されます。`pnpm eslint .`は適切な警告を出すようです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home Single Language
  利用可能なメモリ (MB): 16077
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.14.2
関連パッケージ:
  next: 15.0.4-canary.37 // 検出された最新のバージョンは (15.0.4-canary.37) です。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Linting

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

私の元のプロジェクトはカナリアリリースではなく、15.0.3で、また、私がこの問題に遭遇したときはreact 19 rcも使用していませんでした。eslintのバージョン9.15.0でもテストしました。"
S1,P1,"useRef value not reset on component suspension caused by ""use"" after client-side navigation","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/fl4vdz

### To Reproduce

1. open codesandbox
2. run build and then prod-mode server
3. visit the root `/` in preview and hit ""NAVIGATE""
4. observe that the loaded page has a blank result value and the ref is set to ""done""

<img width=""438"" alt=""image"" src=""https://github.com/user-attachments/assets/e1170fed-3135-49cb-bbec-7c54aee1cac8"">


### Current vs. Expected behavior

From everything I can find online, a component should not retain the values in `useRef` when the ref is set before suspension.
https://github.com/facebook/react/issues/17271

It seems that if a page is client-side navigated to and a suspense is triggered via calling `use` on a server-passed promise, the ref value that is set on initial render is not reset.

This is demonstrated in my example by having the code attempt to store the value returned by `use` in state, but this does not work because the ref that is checked before calling this code is never set back to null when the component unsuspends.

```tsx
export const SuspendedRefTest = ({ promise }: { promise: Promise<string> }) => {
  const ref = useRef<string | null>(null);
  const [someData, setData] = useState("""");

  console.log(""current ref"", ref.current);
  if (!ref.current) {
    ref.current = ""done"";
    console.log(""getting data"");
    const data = use(promise);
    // EXPECTED: after the data is resolved from the `use` call, this should run
    // this is because when the component re-renders after it unsuspends, the value of `ref.current` should have been reset to null
    // ACTUAL: this never runs because ref.current retains its value after suspension
    console.log(""setting data"");
    setData(data);
  }

  return (
    <>
      RESULT: {someData}, CURRENT REF: {ref.current}
      <br />
      <button onClick={() => window.location.replace(""/"")}>RESET</button>
    </>
  );
};
```

I would expect that the ref should be reset and the suspended component re-rendered from scratch.

As far as I can tell this is not an issue if you directly load the page in question from scratch, it only happens if you client-side navigate to it.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 8.15.6
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc.1
  react-dom: 19.0.0-rc.1
  typescript: 5.4.5
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Lazy Loading

### Which stage(s) are affected? (Select all that apply)

next start (local)

### Additional context

_No response_",useRefの値がクライアントサイドナビゲーション後の「use」によるコンポーネントサスペンションでリセットされない,"### コードのリンク

https://codesandbox.io/p/devbox/fl4vdz

### 再現手順

1. コードサンドボックスを開く
2. ビルドを実行し、プロダクションモードのサーバーを起動する
3. プレビューでルート `/` にアクセスし、「NAVIGATE」をクリックする
4. 読み込まれたページが空の結果値を持ち、refが「done」に設定されていることを確認する

<img width=""438"" alt=""image"" src=""https://github.com/user-attachments/assets/e1170fed-3135-49cb-bbec-7c54aee1cac8""> 

### 現在の動作と期待される動作

オンラインで見つけた情報によれば、コンポーネントはサスペンションの前にrefが設定されている場合、`useRef`の値を保持しないはずです。
https://github.com/facebook/react/issues/17271

クライアントサイドでページにナビゲートし、サーバーから渡されたPromiseに対して`use`を呼び出すことでサスペンスがトリガーされると、初期レンダリング時に設定されたrefの値がリセットされないようです。

私の例では、`use`から返された値を状態に保存しようとするコードがあり、これは機能しません。なぜなら、このコードを呼び出す前にチェックされるrefが、コンポーネントがサスペンドから復帰する際にnullにリセットされないからです。

```tsx
export const SuspendedRefTest = ({ promise }: { promise: Promise<string> }) => {
  const ref = useRef<string | null>(null);
  const [someData, setData] = useState("""");

  console.log(""current ref"", ref.current);
  if (!ref.current) {
    ref.current = ""done"";
    console.log(""getting data"");
    const data = use(promise);
    // 期待される動作: `use`呼び出しからデータが解決された後、これが実行されるはず
    // これは、コンポーネントがサスペンドから復帰した後に再レンダリングされる際に、ref.currentの値がnullにリセットされるべきだからです
    // 実際の動作: ref.currentがサスペンション後もその値を保持するため、これが実行されません
    console.log(""setting data"");
    setData(data);
  }

  return (
    <>
      結果: {someData}, 現在のref: {ref.current}
      <br />
      <button onClick={() => window.location.replace(""/"")}>リセット</button>
    </>
  );
};
```

refはリセットされ、サスペンドされたコンポーネントが最初から再レンダリングされるべきだと期待しています。

私が確認した限りでは、これはページを最初から直接読み込む場合には問題ではなく、クライアントサイドでナビゲートした場合にのみ発生します。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 8.15.6
関連パッケージ:
  next: 15.0.3 // 最新の利用可能なバージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc.1
  react-dom: 19.0.0-rc.1
  typescript: 5.4.5
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

遅延読み込み

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next start (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Loading.tsx and Suspense do not work on second page load and on,"### Link to the code that reproduces this issue

https://github.com/Vovch/test-next-2

### To Reproduce

1. pnpm i
2. add .env file for DB connection (Postgres)
3. pnpm dev
4. navigate to localhost:3000/dashboard
5. reload the page
6. reload the page again
7. comment out or delete the Suspense wrapper in app\dashboard\page.tsx
8. reload the page
9. reload the page again

### Current vs. Expected behavior

Expected:
On steps 4 and 5 I expect the Suspense component to be rendered correctly without delaying the page load.
Steps 8 and 9 - Expected component from loading.tsx to be shown on the screen

Current: 
The page is not loaded into the browser at all before all the components are rendered on the server (3+ seconds). Suspense or loading.tsx components are not shown.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Enterprise
  Available memory (MB): 32257  
  Available CPU cores: 8        
Binaries:
  Node: 18.20.3
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.11.0
Relevant Packages:
  next: 15.0.4-canary.36 // Latest available version is detected (15.0.4-canary.36).
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Lazy Loading

### Which stage(s) are affected? (Select all that apply)

next dev (local)
next start (local)

### Additional context

I was also able to reproduce this issue with next 15.0.3 and 14.2.18.

The code was created by following the tutorial up to and including chapter 9 https://nextjs.org/learn/dashboard-app/streaming and then trying to find the issue (since I couldn't make it work while following the tutorial).

in app\dashboard\page.tsx there is a commented out string with `await new Promise(...)`. If enabled it causes the app to work correctly. The effect depends on milliseconds value passed to the timeout, higher values (1000 and on) make the best result, lower values like `500` makes the defect reproducible again.

Intermittently I'm unable to get the loaders even when navigating between the pages by links in the app even if the first loaded page is not the dashboard itself.","タイトル:
Loading.tsxとSuspenseが2回目のページロードで機能しない","本文:
### この問題を再現するコードへのリンク

https://github.com/Vovch/test-next-2

### 再現手順

1. pnpm i
2. DB接続用の.envファイルを追加（Postgres）
3. pnpm dev
4. localhost:3000/dashboardに移動
5. ページをリロード
6. もう一度ページをリロード
7. app\dashboard\page.tsxのSuspenseラッパーをコメントアウトまたは削除
8. ページをリロード
9. もう一度ページをリロード

### 現在の動作と期待される動作

期待される動作:
ステップ4と5では、Suspenseコンポーネントがページロードを遅延させることなく正しくレンダリングされることを期待しています。
ステップ8と9では、loading.tsxからのコンポーネントが画面に表示されることを期待しています。

現在の動作:
すべてのコンポーネントがサーバーでレンダリングされる前に、ページがブラウザに全くロードされません（3秒以上）。Suspenseまたはloading.tsxコンポーネントは表示されません。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Enterprise
  利用可能メモリ (MB): 32257  
  利用可能CPUコア: 8        
バイナリ:
  Node: 18.20.3
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.11.0
関連パッケージ:
  next: 15.0.4-canary.36 // 利用可能な最新バージョンが検出されました (15.0.4-canary.36)。
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.2
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

レイジーローディング

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）
next start（ローカル）

### 追加のコンテキスト

next 15.0.3および14.2.18でもこの問題を再現できました。

コードは、チュートリアルの第9章までに従って作成され、その後問題を見つけようとしました（チュートリアルに従ってもうまくいかなかったため）。

app\dashboard\page.tsxには、`await new Promise(...)`のコメントアウトされた文字列があります。これを有効にするとアプリが正しく動作します。効果は、タイムアウトに渡されるミリ秒の値に依存し、高い値（1000以上）が最良の結果をもたらし、低い値（500など）は再現性のある欠陥を引き起こします。

時折、アプリ内のリンクを介してページ間を移動してもローダーが表示されないことがあります。最初に読み込まれたページがダッシュボードでない場合でも同様です。"
S1,P1,Static export with a specified basePath causes request mismatch for RSC payload .txt file,"### Link to the code that reproduces this issue

https://github.com/yukiyokotani/next-static-export-404-reproduce

### To Reproduce

1. The code in the linked repository is deployed in the following github pages with static export.
   - https://yukiyokotani.github.io/next-static-export-404-reproduce/
2. This site only has a link to the root path: `/`. If you look at the network tab in the developer tools, you will see that the RSC Payload request corresponding to the root path is 404.

### Current vs. Expected behavior

Current:
- A request for the RSC Payload corresponding to the root path is being made to https://yukiyokotani.github.io/next-static-export-404-reproduce.txt?_rsc=3eatq.

Expected:
- The request for the RSC Payload corresponding to the root path should be made to https://yukiyokotani.github.io/next-static-export-404-reproduce/index.txt?_rsc=3eatq. This is because the static export outputs the RSC payload .txt file as `index.txt` and not a file like `next-static-export-404-reproduce.txt`.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:16:46 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8112
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 22.2.0
  npm: 10.8.1
  Yarn: 3.2.4
  pnpm: 9.4.0
Relevant Packages:
  next: 14.2.18 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.18
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.7.2
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next build (local), Other (Deployed)

### Additional context

In the code output generated by Static Export, the request path for the RSC Payload `.txt` files is constructed by appending `.txt` to the page path if the path ends with `'/'`, and by appending `index.txt` otherwise. When `basePath` is set and `trailingSlash` is disabled (default settings), the root path `'/'` is treated as `''`, and according to the mentioned logic, the RSC Payload `.txt` file path becomes `{basePath}.txt`. However, the RSC Payload `.txt` file corresponding to `'/'` in the Static Export output is always `index.txt`. As a result, when trying to access `{basePath}.txt`, which should be `{basePath}/index.txt`, a 404 error occurs.",指定された basePath での静的エクスポートが RSC ペイロード .txt ファイルのリクエスト不一致を引き起こす,"### この問題を再現するコードへのリンク

https://github.com/yukiyokotani/next-static-export-404-reproduce

### 再現手順

1. リンクされたリポジトリのコードが、静的エクスポートで以下の GitHub ページにデプロイされています。
   - https://yukiyokotani.github.io/next-static-export-404-reproduce/
2. このサイトにはルートパス `/` へのリンクのみがあります。開発者ツールのネットワークタブを見ると、ルートパスに対応する RSC ペイロードリクエストが 404 であることがわかります。

### 現在の動作と期待される動作

現在の動作:
- ルートパスに対応する RSC ペイロードのリクエストが https://yukiyokotani.github.io/next-static-export-404-reproduce.txt?_rsc=3eatq に対して行われています。

期待される動作:
- ルートパスに対応する RSC ペイロードのリクエストは https://yukiyokotani.github.io/next-static-export-404-reproduce/index.txt?_rsc=3eatq に対して行われるべきです。これは、静的エクスポートが RSC ペイロードの .txt ファイルを `index.txt` として出力するためであり、`next-static-export-404-reproduce.txt` のようなファイルではないからです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:16:46 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8112
  利用可能メモリ (MB): 16384
  利用可能 CPU コア: 8
バイナリ:
  Node: 22.2.0
  npm: 10.8.1
  Yarn: 3.2.4
  pnpm: 9.4.0
関連パッケージ:
  next: 14.2.18 // 古いバージョンが検出されました (最新は 15.0.3)、アップグレードを強く推奨します！
  eslint-config-next: 14.2.18
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.7.2
Next.js 設定:
  出力: export
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

出力 (export/standalone)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

静的エクスポートによって生成されたコード出力では、RSC ペイロードの `.txt` ファイルのリクエストパスは、パスが `'/'` で終わる場合はページパスに `.txt` を追加し、そうでない場合は `index.txt` を追加することによって構築されます。`basePath` が設定され、`trailingSlash` が無効になっている（デフォルト設定）場合、ルートパス `'/'` は `''` として扱われ、前述のロジックに従って RSC ペイロードの `.txt` ファイルパスは `{basePath}.txt` になります。しかし、静的エクスポート出力における `'/'` に対応する RSC ペイロードの `.txt` ファイルは常に `index.txt` です。その結果、`{basePath}.txt` にアクセスしようとすると、`{basePath}/index.txt` であるべきところで 404 エラーが発生します。"
S1,P1,Link prefetch doesn't work for the initial page user lands,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/dazzling-margulis-zmc54v

### To Reproduce

1. Start the application `pnpm run build && pnpm run start`
2. Navigate to `/product/3` page and refresh so it's the initial landed page
3. Navigate to other pages using the links
4. Navigate to `Product 3` page using the link
5. Notice that all links except `Product 3` is prefetched and displayed instantly while `Product 3` page is not.


### Current vs. Expected behavior

## Current behaviour

The initial page user lands won't load instantly on later navigations with `prefetch={true}` on Links.

Example: when landing on `product/3` page first and then trying to navigate back to `product/3` later is very slow, however all other links work perfectly

https://github.com/user-attachments/assets/30fa51fa-e3d4-412b-a247-9b9f77bf54ad

## Expected behaviour

When user clicks on `Product 3` link, page should show up immediately like the other links

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.34 // Latest available version is detected (15.0.4-canary.34).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next start (local), Vercel (Deployed)

### Additional context

It can be reproduced both by running locally or deploying on Vercel.

Issue is also reproducible on https://github.com/vercel/commerce repo, live on https://demo.vercel.store/ which [uses RC1](https://github.com/vercel/commerce/blob/main/package.json#L20)",リンクのプリフェッチがユーザーが最初にアクセスするページで機能しない,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/dazzling-margulis-zmc54v

### 再現手順

1. アプリケーションを開始する `pnpm run build && pnpm run start`
2. `/product/3` ページに移動し、初めてのページとしてリフレッシュする
3. リンクを使用して他のページに移動する
4. リンクを使用して `Product 3` ページに移動する
5. `Product 3` ページ以外のすべてのリンクがプリフェッチされ、瞬時に表示されるのに対し、`Product 3` ページは表示されないことに気づく。

### 現在の動作と期待される動作

## 現在の動作

ユーザーが最初にアクセスするページは、リンクの `prefetch={true}` が設定されていても、後のナビゲーションで瞬時に読み込まれない。

例：最初に `product/3` ページにアクセスし、その後再度 `product/3` に戻ろうとすると非常に遅くなりますが、他のすべてのリンクは完璧に機能します。

https://github.com/user-attachments/assets/30fa51fa-e3d4-412b-a247-9b9f77bf54ad

## 期待される動作

ユーザーが `Product 3` リンクをクリックすると、他のリンクのようにページが即座に表示されるべきです。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能な CPU コア: 2
バイナリ：
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ：
  next: 15.0.4-canary.34 // 利用可能な最新バージョンが検出されました (15.0.4-canary.34)。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js 設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next start (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

ローカルで実行するか、Vercel にデプロイすることで再現できます。

この問題は、https://github.com/vercel/commerce リポジトリでも再現可能で、https://demo.vercel.store/ でライブで確認できます。このリポジトリは [RC1](https://github.com/vercel/commerce/blob/main/package.json#L20) を使用しています。"
S1,P1,Next middleware with ioredis error: [TypeError]: Cannot read properties of undefined (reading 'charCodeAt'),"### Link to the code that reproduces this issue

https://github.com/KUN1007/next-middleware-ioredis-error

### To Reproduce

1. Clone the code from [the repository](https://github.com/KUN1007/next-middleware-ioredis-error) and install dependencies.
2. Run `pnpm dev` and visit [http://localhost:3000](http://localhost:3000). This will trigger the error:
<img width=""736"" alt=""KUN_2024-12-02_19-27-33"" src=""https://github.com/user-attachments/assets/3c348b3c-10a0-4ee9-b661-ce734c0bec67"">


### Current vs. Expected behavior

The normal access to http://localhost:3000 should not result in any errors, and the program should run properly.
However, the program crashes with an error as soon as it sends a request.
If the line `await setKv('kun', 'kun')` in auth.ts is commented out, the program works normally and displays `Hello, Next.js!` at the root page.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 16291
  Available CPU cores: 16
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.1
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack, TypeScript

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I've already reviewed these issues, but the solutions mentioned there don't apply to my situation.
https://github.com/vercel/next.js/discussions/54469
https://github.com/vercel/next.js/issues/58094
btw, the canary version also has this error.",次のミドルウェアでのioredisエラー: [TypeError]: 未定義のプロパティを読み取れません（'charCodeAt'を読み取っています）,"### この問題を再現するコードへのリンク

https://github.com/KUN1007/next-middleware-ioredis-error

### 再現手順

1. [リポジトリ](https://github.com/KUN1007/next-middleware-ioredis-error)からコードをクローンし、依存関係をインストールします。
2. `pnpm dev`を実行し、[http://localhost:3000](http://localhost:3000)にアクセスします。これにより、エラーが発生します：
<img width=""736"" alt=""KUN_2024-12-02_19-27-33"" src=""https://github.com/user-attachments/assets/3c348b3c-10a0-4ee9-b661-ce734c0bec67"">

### 現在の動作と期待される動作

http://localhost:3000への通常のアクセスはエラーを引き起こさず、プログラムは正常に動作するべきです。
しかし、リクエストを送信するとすぐにプログラムがエラーでクラッシュします。
auth.tsの`await setKv('kun', 'kun')`の行をコメントアウトすると、プログラムは正常に動作し、ルートページに`Hello, Next.js!`が表示されます。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 10 Pro
  利用可能なメモリ (MB): 16291
  利用可能なCPUコア: 16
バイナリ：
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.1
関連パッケージ：
  next: 15.0.3 // 検出された最新の利用可能バージョンは15.0.3です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.7.2
Next.jsの設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

Turbopack、TypeScript

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

これらの問題をすでに確認しましたが、そこに記載されている解決策は私の状況には適用されません。
https://github.com/vercel/next.js/discussions/54469
https://github.com/vercel/next.js/issues/58094
ちなみに、カナリアバージョンにもこのエラーがあります。"
S1,P1,wrong resources URL keep reloading multiple times,"### Link to the code that reproduces this issue

https://github.com/lior-amsalem/nextjs-refresh-bug

### To Reproduce

1. git clone this project: `git clone https://github.com/lior-amsalem/nextjs-refresh-bug`
2. npm i
3. npm run dev
4. open console see this:
<img width=""755"" alt=""image"" src=""https://github.com/user-attachments/assets/a69be4fd-37e4-481c-9c97-9c886cf6ede8"">

this happens if the resource is not accessible, for some reasons nextjs keep trying to reload it 


### Current vs. Expected behavior

image path is wrong, nextjs keep trying to reload it- expected behavioour: don't reload again and again 

### Provide environment information

```bash
sonoma
v22.5.1
nextjs 15
""next"": ""15.0.3"",
""react"": ""19.0.0-rc-66855b96-20241106"",
""react-dom"": ""19.0.0-rc-66855b96-20241106""
```


### Which area(s) are affected? (Select all that apply)

Not sure, Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",リソースURLの誤りが何度もリロードされる,"### この問題を再現するコードへのリンク

https://github.com/lior-amsalem/nextjs-refresh-bug

### 再現手順

1. このプロジェクトをクローンします: `git clone https://github.com/lior-amsalem/nextjs-refresh-bug`
2. npm i
3. npm run dev
4. コンソールを開いて、次のように表示されることを確認します:
<img width=""755"" alt=""image"" src=""https://github.com/user-attachments/assets/a69be4fd-37e4-481c-9c97-9c886cf6ede8"">

リソースにアクセスできない場合、何らかの理由でnextjsがそれを再ロードし続けます。

### 現在の動作と期待される動作

画像パスが間違っており、nextjsが再ロードし続けています。期待される動作: 再度リロードしないこと。

### 環境情報を提供してください

```bash
sonoma
v22.5.1
nextjs 15
""next"": ""15.0.3"",
""react"": ""19.0.0-rc-66855b96-20241106"",
""react-dom"": ""19.0.0-rc-66855b96-20241106""
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明、開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,Cache control header is missing in response,"### Link to the code that reproduces this issue

https://github.com/zeckaissue/nextjs-missing-cache-control

### To Reproduce

I created this repository as a working base to reproduce this bug locally. Unfortunately, I haven't been able to reproduce the bug locally so far.

Because this bug is very random, it’s difficult for me to find the right way to reproduce it. I’m a bit lost on how to debug this issue...

### Current vs. Expected behavior

Sometimes, mainly just after a deployment, the `cache-control` header is not included in the response.


<details>
<summary>Here is two response header of the same page:</summary>

#### With the bug (Missing cache-control value)
![image](https://github.com/user-attachments/assets/efeae13c-e398-4029-9eda-bc9d831e379e)
#### Without the bug
![image](https://github.com/user-attachments/assets/30a97676-b0a7-4319-83a3-c0970814d078)

</details>

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.4.0: Fri Mar 15 00:10:42 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.5.0
Relevant Packages:
  next: 14.2.16 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.16
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.3
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

- I’m working on an App Router.
- I have a custom Redis cache handler.
- My app is deployed on Azure App Service and is behind Azure Front Door.

### Why it's an issue for me ?
When the response doesn’t include a `Cache-Control` header, Azure Front Door keeps the response cached for an indefinite duration. As a result, even if the content changes, the page is not refreshed.

### Workaround used
Before [v14.2.10](https://github.com/vercel/next.js/releases/tag/v14.2.10) I used a workaround by setting a custom response header through `next.config.js` as a fallback. With this configuration, when the bug occurred, instead of omitting the `Cache-Control `header, Next.js would return the fallback value (in this case, max-age=60).

**Before [v14.2.10](https://github.com/vercel/next.js/releases/tag/v14.2.10) , the behavior was as follows:**
If the page had its own`revalidate` value, the `Cache-Control` header was taken from this revalidate value.
Otherwise, the value was taken from the Next.js configuration (next.config.js).
So the next.js
**So, the header configuration in `next.config.js` was not prioritized over the `revalidate` value defined individually for each route.**

But this behaviour seems to be consider as a bug from nextjs team (https://github.com/vercel/next.js/issues/22319) (#69802)
So after this [pr on v14.2.10](https://github.com/vercel/next.js/pull/69802) my workaround was not working anymore because all page get the same Cache-Control header.

Here the next config workaround
```js
const nextConfig = {
    headers: async () => {
      return [
        {
          source: '/(.*)',
          headers: [
            {
              key: 'Cache-Control',
              value: 'public, s-maxage=60, stale-while-revalidate=60',
            },
          ],
        },
      ];
    },
  }
```
As a potential workaround, I am looking for a way to modify the response just before it is sent to the client.
This would allow me to add a Cache-Control header if one is not already present.
I have opened a discussion about this: https://github.com/vercel/next.js/discussions/72240


Has anyone else encountered the same issue?

Do you have any suggestions to help me debug it better and find potential solutions?

Maybe related to:
- https://github.com/vercel/next.js/issues/70213
- https://github.com/vercel/next.js/issues/22319","タイトル:
レスポンスにキャッシュ制御ヘッダーが欠落しています","本文:
### この問題を再現するコードへのリンク

https://github.com/zeckaissue/nextjs-missing-cache-control

### 再現手順

このリポジトリを作成して、このバグをローカルで再現するための作業ベースとしました。残念ながら、これまでのところローカルでバグを再現することができていません。

このバグは非常にランダムであるため、再現するための正しい方法を見つけるのが難しいです。この問題をデバッグする方法に少し迷っています...

### 現在の動作と期待される動作

時々、主にデプロイ直後に、レスポンスに `cache-control` ヘッダーが含まれていません。

<details>
<summary>同じページの2つのレスポンスヘッダーを示します:</summary>

#### バグあり（キャッシュ制御値が欠落）
![image](https://github.com/user-attachments/assets/efeae13c-e398-4029-9eda-bc9d831e379e)
#### バグなし
![image](https://github.com/user-attachments/assets/30a97676-b0a7-4319-83a3-c0970814d078)

</details>

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.4.0: Fri Mar 15 00:10:42 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.5.0
関連パッケージ:
  next: 14.2.16 // 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
  eslint-config-next: 14.2.16
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.3
Next.js設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

- アプリルーターで作業しています。
- カスタムRedisキャッシュハンドラーがあります。
- アプリはAzure App Serviceにデプロイされており、Azure Front Doorの背後にあります。

### なぜ私にとって問題なのか？
レスポンスに `Cache-Control` ヘッダーが含まれていない場合、Azure Front Doorはレスポンスを無期限にキャッシュします。その結果、コンテンツが変更されてもページが更新されません。

### 使用した回避策
[v14.2.10](https://github.com/vercel/next.js/releases/tag/v14.2.10) より前は、`next.config.js` を通じてカスタムレスポンスヘッダーを設定することで回避策を使用していました。この設定では、バグが発生した場合、`Cache-Control` ヘッダーを省略する代わりに、Next.jsはフォールバック値（この場合、max-age=60）を返します。

**[v14.2.10](https://github.com/vercel/next.js/releases/tag/v14.2.10) より前の動作は次のとおりです:**
ページに独自の `revalidate` 値がある場合、`Cache-Control` ヘッダーはこの再検証値から取得されました。
そうでない場合、値はNext.jsの設定（next.config.js）から取得されました。
したがって、next.js
**したがって、`next.config.js` のヘッダー設定は、各ルートに個別に定義された `revalidate` 値よりも優先されませんでした。**

しかし、この動作はnextjsチームによってバグと見なされているようです (https://github.com/vercel/next.js/issues/22319) (#69802)
そのため、[pr on v14.2.10](https://github.com/vercel/next.js/pull/69802) の後、私の回避策は機能しなくなりました。なぜなら、すべてのページが同じCache-Controlヘッダーを取得するからです。

次の設定の回避策
```js
const nextConfig = {
    headers: async () => {
      return [
        {
          source: '/(.*)',
          headers: [
            {
              key: 'Cache-Control',
              value: 'public, s-maxage=60, stale-while-revalidate=60',
            },
          ],
        },
      ];
    },
  }
```
クライアントに送信される直前にレスポンスを変更する方法を探しています。
これにより、すでに存在しない場合はCache-Controlヘッダーを追加できます。
この件についての議論を開いています: https://github.com/vercel/next.js/discussions/72240

他に同じ問題に直面した人はいますか？

この問題をより良くデバッグし、潜在的な解決策を見つけるための提案はありますか？

関連しているかもしれない:
- https://github.com/vercel/next.js/issues/70213
- https://github.com/vercel/next.js/issues/22319"
S1,P1,root not-found page not displayed when inside a route group,"### Link to the code that reproduces this issue

https://github.com/stefanprobst/issue-next-not-found-route-group

### To Reproduce

1. clone the [repo](https://github.com/stefanprobst/issue-next-not-found-route-group)
2. `pnpm install && pnpm build && pnpm start`
3. open http://localhost:3000/not-existing-route
4. see the built-in default not-found page being displayed, not the one from `/app/(app)/not-found.tsx`

### Current vs. Expected behavior

the custom root not-found page is not shown for e.g. http://localhost:3000/not-existing-route because it lives in a route group (instead the built-in default 404 page is shown):

```
└── app
    └── (app)
        ├── layout.tsx
        ├── not-found.tsx
        └── page.tsx
```

it only works correctly when getting rid of the route group (check out the [no-route-group branch](https://github.com/stefanprobst/issue-next-not-found-route-group/tree/no-route-group))

```
└── app
    ├── layout.tsx
    ├──	not-found.tsx
    └── page.tsx
```


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #49-Ubuntu SMP PREEMPT_DYNAMIC Mon Nov  4 02:06:24 UTC 2024
  Available memory (MB): 32041
  Available CPU cores: 4
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.14.2
Relevant Packages:
  next: 15.0.4-canary.32 // Latest available version is detected (15.0.4-canary.32).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_",ルートの未検出ページがルートグループ内で表示されない,"### この問題を再現するコードへのリンク

https://github.com/stefanprobst/issue-next-not-found-route-group

### 再現手順

1. [リポジトリ](https://github.com/stefanprobst/issue-next-not-found-route-group)をクローンする
2. `pnpm install && pnpm build && pnpm start`を実行する
3. http://localhost:3000/not-existing-routeを開く
4. `/app/(app)/not-found.tsx`からのものではなく、組み込みのデフォルトの未検出ページが表示されるのを確認する

### 現在の動作と期待される動作

カスタムのルート未検出ページは、例えば http://localhost:3000/not-existing-route では表示されません。なぜなら、それがルートグループ内に存在するからです（組み込みのデフォルトの404ページが表示されます）：

```
└── app
    └── (app)
        ├── layout.tsx
        ├── not-found.tsx
        └── page.tsx
```

ルートグループを取り除くと正しく動作します（[no-route-groupブランチ](https://github.com/stefanprobst/issue-next-not-found-route-group/tree/no-route-group)を確認してください）：

```
└── app
    ├── layout.tsx
    ├── not-found.tsx
    └── page.tsx
```

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #49-Ubuntu SMP PREEMPT_DYNAMIC Mon Nov  4 02:06:24 UTC 2024
  利用可能なメモリ (MB): 32041
  利用可能なCPUコア: 4
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.14.2
関連パッケージ:
  next: 15.0.4-canary.32 // 検出された最新の利用可能なバージョン (15.0.4-canary.32)。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.7.2
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Cannot use Next.js as a transitive dep to build an application,"### Link to the code that reproduces this issue

https://github.com/Ethan-Arrowood/next-issue-repro

### To Reproduce

Follow readme in https://github.com/Ethan-Arrowood/next-issue-repro

Or:

1. Generate a new nextjs app, `npx create-next-app`. Called it `my-app`
2. As a sibling to the next app created in step 1, create a new directory `next-transitive`
3. Add a package.json with the content: `{ ""dependencies"": { ""next-app"": ""file:../my-app"" } }`
4. cd into `next-transitive` and run `npm install --install-links` (the option is so that the file: is actually installed instead of symlinked)
5. cd into `node_modules/next-app` and try to run `npx next build` or `npm run build`. They will both fail with the following:

```
> my-app@0.1.0 build
> next build

   ▲ Next.js 15.0.3

   Creating an optimized production build ...
Failed to compile.

./app/page.js
Module parse failed: Unexpected token (6:4)
File was processed with these loaders:
 * ../next/dist/build/webpack/loaders/next-flight-loader/index.js
 * ../next/dist/build/webpack/loaders/next-swc-loader.js
You may need an additional loader to handle the result of these loaders.
| export default function Home() {
|   return (
>     <div className={styles.page}>
|       <main className={styles.main}>
|         <Image

Import trace for requested module:
./app/page.js


> Build failed because of webpack errors
```

### Current vs. Expected behavior

This behavior seems to exist for a few major versions. My assumption is that the build process is not resolving its own dependencies correctly. 

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6030
  Available memory (MB): 18432
  Available CPU cores: 12
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Script (next/script), SWC, Webpack

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_","タイトル:
Next.jsを遷移依存関係として使用してアプリケーションをビルドできない","本文:
### この問題を再現するコードへのリンク

https://github.com/Ethan-Arrowood/next-issue-repro

### 再現手順

https://github.com/Ethan-Arrowood/next-issue-reproのreadmeに従ってください。

または：

1. 新しいnextjsアプリを生成します。`npx create-next-app`を実行し、`my-app`と名付けます。
2. ステップ1で作成したnextアプリの兄弟として、新しいディレクトリ`next-transitive`を作成します。
3. 次の内容のpackage.jsonを追加します：`{ ""dependencies"": { ""next-app"": ""file:../my-app"" } }`
4. `next-transitive`にcdし、`npm install --install-links`を実行します（このオプションは、file:が実際にシンリンクではなくインストールされるようにするためです）。
5. `node_modules/next-app`にcdし、`npx next build`または`npm run build`を実行してみてください。どちらも以下のエラーで失敗します：

```
> my-app@0.1.0 build
> next build

   ▲ Next.js 15.0.3

   最適化されたプロダクションビルドを作成しています...
コンパイルに失敗しました。

./app/page.js
モジュールの解析に失敗しました：予期しないトークン (6:4)
ファイルはこれらのローダーで処理されました：
 * ../next/dist/build/webpack/loaders/next-flight-loader/index.js
 * ../next/dist/build/webpack/loaders/next-swc-loader.js
これらのローダーの結果を処理するために追加のローダーが必要です。
| export default function Home() {
|   return (
>     <div className={styles.page}>
|       <main className={styles.main}>
|         <Image

要求されたモジュールのインポートトレース：
./app/page.js

> ビルドはwebpackエラーのために失敗しました
```

### 現在の動作と期待される動作

この動作は、いくつかの主要バージョンで存在するようです。私の仮定では、ビルドプロセスが自身の依存関係を正しく解決していないということです。

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 18432
  利用可能なCPUコア: 12
バイナリ：
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.3 // 検出された最新の利用可能バージョンは15.0.3です。
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: N/A
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

開発者体験、スクリプト (next/script)、SWC、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,"Navigating out of ""Not Found"" page gives error if Parallel routing exists","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/gallant-kalam-2xqmnr?workspaceId=08193210-3c43-4dee-852a-15fcfd6a6e98

### To Reproduce
Fork the sandbox to see error in terminal.

If you have parallel routes defined somewhere in the project and put it inside layout, eventhough it successfully redirects, nextjs throws error when inside notfound page with a link. 

I have tried my best to log what's undefined at 0 index, NextJS gives this :
{ children: [ '/_not-found', { children: [Array] } ] } children
{ children: [ '/_not-found', { children: [Array] } ] } testRoute

it tries to reach parallel route slot name but only has children.

In order to replecate the issue : 
1 - Have a parallel route and a interceptor route inside
2 - ```<Link>``` inside notfound page.
3 - Go to notfound page (force nextjs give not found- go to any route that doesn't exists)
4 - click on the link.

```
 ⨯ next/dist/src/server/app-render/walk-tree-with-flight-router-state.tsx (238:50) @ walkTreeWithFlightRouterState
 ⨯ TypeError: Cannot read properties of undefined (reading '0')
    at async doRender (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:2660:21)
    at async responseGenerator (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3021:21)
    at async DevServer.renderToResponseWithComponentsImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3033:23)
    at async DevServer.renderPageComponent (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3613:15)
    at async DevServer.renderToResponseImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3675:23)
    at async DevServer.pipeImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:1698:20)
    at async NextNodeServer.handleCatchallRenderRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/next-server.ts:1046:6)
    at async DevServer.handleRequestImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:1463:8)
    at async (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/dev/next-dev-server.ts:512:13)
    at async Span.traceAsyncFn (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/trace/trace.ts:143:13)
    at async DevServer.handleRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/dev/next-dev-server.ts:510:19)
    at async invokeRender (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:284:10)
    at async handleRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:530:15)
    at async requestHandlerImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:576:6)
    at async Server.requestListener (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/start-server.ts:152:6) {
  page: '/'
}
  236 |         subPath[0] === DEFAULT_SEGMENT_KEY &&
  237 |         flightRouterState &&
> 238 |         !!flightRouterState[1][parallelRouteKey][0] &&
      |                                                  ^
  239 |         flightRouterState[1][parallelRouteKey][3] !== 'refetch'
  240 |       ) {
  241 |         continue
  ```

### Current vs. Expected behavior

Current:
Throws an error. 

Expected:
Should not throw an error

### Provide environment information

```bash
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.31 // Latest available version is detected (15.0.4-canary.31).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation, Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

We are currently using ^14 in production the issue exists. My sandbox (attached to issue) is ^15 canary.31 still have this issue.

![image](https://github.com/user-attachments/assets/5dfc85fe-7c07-487f-9361-53cc3ded3a93)
","タイトル:
「見つかりません」ページからのナビゲーションが、並行ルーティングが存在する場合にエラーを引き起こす","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/gallant-kalam-2xqmnr?workspaceId=08193210-3c43-4dee-852a-15fcfd6a6e98

### 再現手順
サンドボックスをフォークして、ターミナルでエラーを確認してください。

プロジェクト内のどこかに並行ルートが定義されていて、それをレイアウト内に配置した場合、リダイレクトは成功するものの、「見つかりません」ページ内のリンクをクリックすると、Next.jsがエラーを投げます。

何が未定義なのかを0インデックスでログに記録しようとしましたが、Next.jsは次のように返します：
{ children: [ '/_not-found', { children: [Array] } ] } children
{ children: [ '/_not-found', { children: [Array] } ] } testRoute

並行ルートのスロット名にアクセスしようとしますが、子供だけしかありません。

この問題を再現するためには：
1 - 並行ルートとインターセプタールートを持つ
2 - 「<Link>」を見つからないページ内に配置する
3 - 見つからないページに移動する（Next.jsに見つからないページを強制的に表示させる - 存在しない任意のルートに移動する）
4 - リンクをクリックする。

```
 ⨯ next/dist/src/server/app-render/walk-tree-with-flight-router-state.tsx (238:50) @ walkTreeWithFlightRouterState
 ⨯ TypeError: Cannot read properties of undefined (reading '0')
    at async doRender (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:2660:21)
    at async responseGenerator (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3021:21)
    at async DevServer.renderToResponseWithComponentsImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3033:23)
    at async DevServer.renderPageComponent (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3613:15)
    at async DevServer.renderToResponseImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:3675:23)
    at async DevServer.pipeImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:1698:20)
    at async NextNodeServer.handleCatchallRenderRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/next-server.ts:1046:6)
    at async DevServer.handleRequestImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/base-server.ts:1463:8)
    at async (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/dev/next-dev-server.ts:512:13)
    at async Span.traceAsyncFn (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/trace/trace.ts:143:13)
    at async DevServer.handleRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/dev/next-dev-server.ts:510:19)
    at async invokeRender (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:284:10)
    at async handleRequest (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:530:15)
    at async requestHandlerImpl (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/router-server.ts:576:6)
    at async Server.requestListener (node_modules/.pnpm/next@15.0.4-canary.31_react-dom@19.0.0-rc-b01722d5-20241114_react@19.0.0-rc-b01722d5-20241114/node_modules/next/src/server/lib/start-server.ts:152:6) {
  page: '/'
}
  236 |         subPath[0] === DEFAULT_SEGMENT_KEY &&
  237 |         flightRouterState &&
  238 |         !!flightRouterState[1][parallelRouteKey][0] &&
      |                                                  ^
  239 |         flightRouterState[1][parallelRouteKey][3] !== 'refetch'
  240 |       ) {
  241 |         continue
  ```

### 現在の動作と期待される動作

現在：
エラーが発生します。

期待される：
エラーが発生しないこと。

### 環境情報の提供

```bash
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.4-canary.31 // 検出された最新のバージョンは (15.0.4-canary.31) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション、並行およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next start（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

現在、私たちは本番環境で ^14 を使用して"
S1,P1,Next.js 14 `loading.tsx` bug,"### Link to the code that reproduces this issue

https://github.com/jelius-sama/loading-bug-nextjs-14.git

### To Reproduce

1. Start the dev server.
2. Do a hard refresh to make sure nothing is cached in the browser.
3. From the index route (""/""), navigate to ""art page"" by clicking the link an observe the bordered section.

### Current vs. Expected behavior

1. Following the steps, the loading UI looks to be incorrect (look into the code: ""src/app/[artist]/[art]/loading.tsx"" for the actual UI verses what was rendered).
2. The loading UI should've been ""Loading art page..."" instead we get to see ""Loading artist page...""

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home Single Language
  Available memory (MB): 5990
  Available CPU cores: 8
Binaries:
  Node: 20.10.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.5 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.5
  output: N/A
 ⚠ An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Lazy Loading, Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

_No response_",Next.js 14 `loading.tsx`のバグ,"### この問題を再現するコードへのリンク

https://github.com/jelius-sama/loading-bug-nextjs-14.git

### 再現手順

1. 開発サーバーを起動します。
2. ブラウザにキャッシュがないことを確認するためにハードリフレッシュを行います。
3. インデックスルート（""/""）から「アートページ」へのリンクをクリックして、境界線のあるセクションを観察します。

### 現在の動作と期待される動作

1. 手順に従うと、ローディングUIが正しくないように見えます（実際のUIとレンダリングされたものの違いは「src/app/[artist]/[art]/loading.tsx」のコードを確認してください）。
2. ローディングUIは「アートページを読み込み中...」であるべきですが、「アーティストページを読み込み中...」が表示されます。

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home Single Language
  利用可能メモリ (MB): 5990
  利用可能CPUコア: 8
バイナリ：
  Node: 20.10.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 14.2.5 // 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
  eslint-config-next: 14.2.5
  output: N/A
 ⚠ 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
   新しい問題を作成する前に、最新のカナリアバージョン（`npm install next@canary`）を試して、問題がまだ存在するか確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

レイジーローディング、ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next start（ローカル）、Vercel（デプロイ済み）、その他（デプロイ済み）

### 追加のコンテキスト

_応答なし_"
S1,P1,`Only plain objects can be passed from Client Components to Server Components` on route handler,"### Link to the code that reproduces this issue

https://github.com/tjwelde/next15-pinata-issue

### To Reproduce

1. `npm install`
2. `npm run dev`
3. open page (e.g. http://localhost:3000/)
4. everything still normal
5. reload page
6. see error in server logs

### Current vs. Expected behavior

Expected:
a. No error to be thrown
b. If there is an actual issue with the library used: since the error seems to stem from a route handler, I would've expected the error to not mention client and server components and/or being more precise

Current:
Following error is logged:
```
Error: [ Server ] Only plain objects can be passed to Client Components from Server Components. Set objects are not supported.
  {P: </>, b: ..., p: """", c: ["""", """"], i: ..., f: ..., m: Set, G: ..., s: ..., S: ...}
                                                          ^^^
    at createUnhandledError (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/console-error.js:27:49)
    at handleClientError (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/use-error-handler.js:44:56)
    at console.error (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/globals/intercept-console-error.js:48:56)
    at react-stack-bottom-frame (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2446:58)
    at resolveConsoleEntry (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:1961:9)
    at processFullStringRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2095:11)
    at processFullBinaryRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2059:7)
    at progress (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2262:17)
```

### Provide environment information

```bash
Node.js v20.15.0

Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.15.0
  npm: 10.7.0
  Yarn: 4.2.2
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.30 // Latest available version is detected (15.0.4-canary.30).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I tested my reproduction against multiple versions up to 14.0.0 

14.1.0 still shows the error with a bit more details:
```
Warning: Only plain objects can be passed to Client Components from Server Components. Set objects are not supported.
  <... buildId=... assetPrefix="""" urlParts=... initialTree=... initialSeedData=... couldBeIntercepted=... initialHead=... globalErrorComponent=... missingSlots={Set}>
                                                                                                                                                                ^^^^^
```

14.0.0 does not show the error

as background:
- I am trying to upgrade an existing project from next@13.5.7 to next@15.x
- the `@pinata/sdk` package is deprecated and we will switch to the new `pinata-web3` package, which does not seem to have this issue in my early tests. 
- Still, I think other libraries might also trigger an error like this, so I think it is worth investigating, what is actually going on
- My main issue here is, that it took a long time to debug, because the error said it would have something to do with the client/server component boundary, so I was looking at the wrong things for quite some time.
  - Having a more precise error message would already help immensely
- Still not sure, if there is an actual error happening somewhere. Wrapping the affected call in a try..catch did not catch anything though","タイトル:
`クライアントコンポーネントからサーバーコンポーネントに渡せるのはプレーンオブジェクトのみ` ルートハンドラーにおいて","本文:
### この問題を再現するコードへのリンク

https://github.com/tjwelde/next15-pinata-issue

### 再現手順

1. `npm install`
2. `npm run dev`
3. ページを開く（例: http://localhost:3000/）
4. すべてが正常
5. ページをリロード
6. サーバーログにエラーを確認

### 現在の動作と期待される動作

期待される動作:
a. エラーが発生しないこと
b. 使用しているライブラリに実際の問題がある場合: エラーがルートハンドラーから発生しているように見えるので、エラーがクライアントおよびサーバーコンポーネントに言及せず、より正確であることを期待していました

現在の動作:
次のエラーがログに記録されます:
```
エラー: [ サーバー ] クライアントコンポーネントにサーバーコンポーネントから渡せるのはプレーンオブジェクトのみです。セットオブジェクトはサポートされていません。
  {P: </>, b: ..., p: """", c: ["""", """"], i: ..., f: ..., m: Set, G: ..., s: ..., S: ...}
                                                          ^^^
    at createUnhandledError (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/console-error.js:27:49)
    at handleClientError (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/use-error-handler.js:44:56)
    at console.error (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/components/react-dev-overlay/internal/helpers/globals/intercept-console-error.js:48:56)
    at react-stack-bottom-frame (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2446:58)
    at resolveConsoleEntry (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:1961:9)
    at processFullStringRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2095:11)
    at processFullBinaryRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2059:7)
    at progress (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2262:17)
```

### 環境情報を提供

```bash
Node.js v20.15.0

オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 12
バイナリ:
  Node: 20.15.0
  npm: 10.7.0
  Yarn: 4.2.2
  pnpm: N/A
関連パッケージ:
  next: 15.0.4-canary.30 // 検出された最新の利用可能バージョン (15.0.4-canary.30)。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

不明

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)

### 追加のコンテキスト

私は、14.0.0までの複数のバージョンに対して再現テストを行いました。

14.1.0では、もう少し詳細なエラーが表示されます:
```
警告: クライアントコンポーネントにサーバーコンポーネントから渡せるのはプレーンオブジェクトのみです。セットオブジェクトはサポートされていません。
  <... buildId=... assetPrefix="""" urlParts=... initialTree=... initialSeedData=... couldBeIntercepted=... initialHead=... globalErrorComponent=... missingSlots={Set}>
                                                                                                                                                                ^^^^^
```

14.0.0ではエラーは表示されません。

背景として:
- 既存のプロジェクトをnext@13.5.7からnext@15.xにアップグレードしようとしています。
- `@pinata/sdk`パッケージは非推奨であり、新しい`pinata-web3`パッケージに切り替える予定ですが、初期テストではこの問題は発生しないようです。
- それでも、他のライブラリもこのようなエラーを引き起こす可能性があると思うので、実際に何が起こっているのか調査する価値があると思います。
- 私の主な問題は、エラーがクライアント/サーバーコンポーネントの境界に関係していると言っていたため、しばらくの間間違ったことを見ていたので、デバッグに時間がかかったことです。
  - より正確なエラーメッセージがあれば、非常に助かります。
- どこかで実際のエラーが発生しているかどうかはまだ不明です。影響を受ける呼び出しをtry..catchでラップしても何もキャッチできませんでした。"
S1,P1,[codemod] Unused params Causes next build Failure After Async API Codemod Execution,"### Link to the code that reproduces this issue

https://github.com/CastaChick/next_codemod_example

### To Reproduce

1. Create new next app using `next@14` by `npx create-next-app@14` command.
2. Add new pages with/without unused params

`app/example-unused-params/[id]/page.tsx`
```tsx
interface ExampleUnusedParamsProps {
   params: {
        id: string;
   }
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export default function ExampleUnusedParams({params}: ExampleUnusedParamsProps) {
  return (
    <div>foo</div>
  )
}
```
`app/example-used-params/[id]/page.tsx`
```tsx
interface ExampleUsedParamsProps {
   params: {
        id: string;
   }
}

export default function ExampleUsedParams({params}: ExampleUsedParamsProps) {
  console.log(params.id)
  return (
    <div>foo</div>
  )
}
```

3. Run the migration command to `next@15` by running `npx @next/codemod@canary upgrade latest`
4. Then build the next app by running `npm run build` ← build failed

```
src/app/example-unused-params/[id]/page.tsx
Type error: Type 'ExampleUnusedParamsProps' does not satisfy the constraint 'PageProps'.
  Types of property 'params' are incompatible.
    Type '{ id: string; }' is missing the following properties from type 'Promise<any>': then, catch, finally, [Symbol.toStringTag]
```

### Current vs. Expected behavior

In Pull Request #71664 , it appears that transform is not executed when `params` is not accessed within a function. However, even if `params` is not used within the function, the build process (`next build`) will fail if `params` is not wrapped in a `Promise`.

To ensure developers can confidently build their projects after running `npx @next/codemod@canary next-async-request-api .`, I suggest either removing this behavior or ignoring unused, synchronously declared `params` during the build process. This adjustment would provide a smoother and more reliable development experience.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6030
  Available memory (MB): 36864
  Available CPU cores: 12
Binaries:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_",[codemod] 未使用のパラメータが非同期APIコーデモッド実行後の次のビルド失敗を引き起こす,"### この問題を再現するためのコードへのリンク

https://github.com/CastaChick/next_codemod_example

### 再現手順

1. `npx create-next-app@14` コマンドを使用して `next@14` の新しいアプリを作成します。
2. 未使用のパラメータの有無にかかわらず新しいページを追加します。

`app/example-unused-params/[id]/page.tsx`
```tsx
interface ExampleUnusedParamsProps {
   params: {
        id: string;
   }
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
export default function ExampleUnusedParams({params}: ExampleUnusedParamsProps) {
  return (
    <div>foo</div>
  )
}
```
`app/example-used-params/[id]/page.tsx`
```tsx
interface ExampleUsedParamsProps {
   params: {
        id: string;
   }
}

export default function ExampleUsedParams({params}: ExampleUsedParamsProps) {
  console.log(params.id)
  return (
    <div>foo</div>
  )
}
```

3. `npx @next/codemod@canary upgrade latest` を実行して `next@15` への移行コマンドを実行します。
4. 次に、`npm run build` を実行して次のアプリをビルドします ← ビルド失敗

```
src/app/example-unused-params/[id]/page.tsx
型エラー: 型 'ExampleUnusedParamsProps' は 'PageProps' の制約を満たしていません。
  プロパティ 'params' の型が互換性がありません。
    型 '{ id: string; }' は型 'Promise<any>' から次のプロパティが欠けています: then, catch, finally, [Symbol.toStringTag]
```

### 現在の動作と期待される動作

プルリクエスト #71664 では、関数内で `params` がアクセスされない場合に変換が実行されないようです。しかし、関数内で `params` が使用されていなくても、`params` が `Promise` でラップされていない場合、ビルドプロセス（`next build`）は失敗します。

開発者が `npx @next/codemod@canary next-async-request-api .` を実行した後に自信を持ってプロジェクトをビルドできるようにするために、この動作を削除するか、ビルドプロセス中に未使用の同期宣言された `params` を無視することを提案します。この調整により、よりスムーズで信頼性の高い開発体験が提供されます。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 36864
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 利用可能な最新バージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

開発者体験、出力（エクスポート/スタンドアロン）

### 影響を受けるステージはどれですか？（すべて選択）

次のビルド（ローカル）

### 追加のコンテキスト

_応答なし_"
S1,P1,Combining root catchAll route + parallel nested route causes build failure,"Example setup that causes failure:

./app/[...segment]/page.tsx
./app/someroute/page.tsx
./app/someroute/layout.tsx
./app/someroute/@someslot/subroute/page.tsx

### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/distracted-chatterjee-6vjhh9?workspaceId=6caaae1b-8862-4fe4-9ff9-fe868ceec1a7

### To Reproduce

1. Run pnpm build
2. The build will fail

### Current vs. Expected behavior

The app should build /[...segment], /someroute, and /someroute/subroute but instead the build fails with `TypeError: Cannot read properties of undefined (reading 'entryCSSFiles')`

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.29 // Latest available version is detected (15.0.4-canary.29).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

_No response_","タイトル:
ルートキャッチオールと並列ネストルートの組み合わせがビルド失敗を引き起こす","本文:
失敗を引き起こす例のセットアップ：

./app/[...segment]/page.tsx  
./app/someroute/page.tsx  
./app/someroute/layout.tsx  
./app/someroute/@someslot/subroute/page.tsx  

### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/distracted-chatterjee-6vjhh9?workspaceId=6caaae1b-8862-4fe4-9ff9-fe868ceec1a7  

### 再現手順

1. pnpm buildを実行
2. ビルドが失敗する

### 現在の動作と期待される動作

アプリは/[...segment]、/someroute、および/someroute/subrouteをビルドするべきだが、代わりにビルドは`TypeError: Cannot read properties of undefined (reading 'entryCSSFiles')`で失敗する。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能メモリ (MB): 4102
  利用可能CPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.4-canary.29 // 利用可能な最新バージョンが検出されています (15.0.4-canary.29)。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並列およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,formData with app router: Upload error: TypeError: Failed to parse body as FormData.,"### Link to the code that reproduces this issue

https://codesandbox.io/p/sandbox/twilight-flower-v6pl9s

### To Reproduce

i am uploading a  file using axios in a client side component in this way:
```
        const options: AxiosRequestConfig = {
        headers: { 'Content-Type': 'multipart/form-data' }
      };

      const { data } = await axios.post<{ success: boolean; }>(
        '/api/upload',
        formData,
        options
      );
```

in the **/api/upload** route i have the following code:
```
export async function POST(request: NextRequest) {
  try {
    console.log('in post');
    let formData = await request.formData();
    console.log('formData', formData);
    const file = formData.get('file') as File;
  } catch (error) {
    console.error('Upload error:', error);
    return NextResponse.json(
      { error: 'Failed to upload file' },
      { status: 500 }
    );
  }
}
```

if the file is <~2GB everythings is working, the formData is returned with the correct values, otherwise if the file is bigger i get the following output:
```
Upload error: TypeError: Failed to parse body as FormData.
    at node:internal/deps/undici/undici:5668:27
    at successSteps (node:internal/deps/undici/undici:5712:27)
    at fullyReadBody (node:internal/deps/undici/undici:4609:9)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async consumeBody (node:internal/deps/undici/undici:5721:7)
    at async POST (/Users/539hex/dev/deft.cx/.next/server/chunks/_bc0f62._.js:282:24)
    at async /Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:55831
    at async eO.execute (/Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:46527)
    at async eO.handle (/Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:57165)
    at async doRender (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1353:42)
    at async cacheEntry.responseCache.get.routeKind (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1575:28)
    at async DevServer.renderToResponseWithComponentsImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1483:28)
    at async DevServer.renderPageComponent (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1911:24)
    at async DevServer.renderToResponseImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1949:32)
    at async DevServer.pipeImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:921:25)
    at async NextNodeServer.handleCatchallRenderRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/next-server.js:272:17)
    at async DevServer.handleRequestImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:817:17)
    at async /Users/539hex/dev/deft.cx/node_modules/next/dist/server/dev/next-dev-server.js:339:20
    at async Span.traceAsyncFn (/Users/539hex/dev/deft.cx/node_modules/next/dist/trace/trace.js:154:20)
    at async DevServer.handleRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/dev/next-dev-server.js:336:24)
    at async invokeRender (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:173:21)
    at async handleRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:350:24)
    at async requestHandlerImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:374:13)
    at async Server.requestListener (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/start-server.js:141:13)
 POST /api/upload 500 in 9203ms
```

### Current vs. Expected behavior

I expect always to have the formData returned despite the file size

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 23.3.0
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.12.1
Relevant Packages:
  next: 14.2.18 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
 ⚠ An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

i tried also to update to next 15.0.3 and i have the same exact issue.",formDataとアプリルーター: アップロードエラー: TypeError: FormDataとしてボディを解析できませんでした。,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/sandbox/twilight-flower-v6pl9s

### 再現手順

私はクライアントサイドコンポーネントでaxiosを使用してファイルをアップロードしています。このように：
```
        const options: AxiosRequestConfig = {
        headers: { 'Content-Type': 'multipart/form-data' }
      };

      const { data } = await axios.post<{ success: boolean; }>(
        '/api/upload',
        formData,
        options
      );
```

**/api/upload** ルートには次のコードがあります：
```
export async function POST(request: NextRequest) {
  try {
    console.log('in post');
    let formData = await request.formData();
    console.log('formData', formData);
    const file = formData.get('file') as File;
  } catch (error) {
    console.error('Upload error:', error);
    return NextResponse.json(
      { error: 'Failed to upload file' },
      { status: 500 }
    );
  }
}
```

ファイルが<~2GBの場合はすべてが正常に動作し、formDataは正しい値で返されますが、ファイルが大きい場合は次の出力が得られます：
```
Upload error: TypeError: Failed to parse body as FormData.
    at node:internal/deps/undici/undici:5668:27
    at successSteps (node:internal/deps/undici/undici:5712:27)
    at fullyReadBody (node:internal/deps/undici/undici:4609:9)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async consumeBody (node:internal/deps/undici/undici:5721:7)
    at async POST (/Users/539hex/dev/deft.cx/.next/server/chunks/_bc0f62._.js:282:24)
    at async /Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:55831
    at async eO.execute (/Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:46527)
    at async eO.handle (/Users/539hex/dev/deft.cx/node_modules/next/dist/compiled/next-server/app-route.runtime.dev.js:6:57165)
    at async doRender (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1353:42)
    at async cacheEntry.responseCache.get.routeKind (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1575:28)
    at async DevServer.renderToResponseWithComponentsImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1483:28)
    at async DevServer.renderPageComponent (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1911:24)
    at async DevServer.renderToResponseImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:1949:32)
    at async DevServer.pipeImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/base-server.js:921:25)
    at async NextNodeServer.handleCatchallRenderRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/next-server.js:272:17)
    at async DevServer.handleRequestImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/dev/next-dev-server.js:339:20)
    at async Span.traceAsyncFn (/Users/539hex/dev/deft.cx/node_modules/next/dist/trace/trace.js:154:20)
    at async DevServer.handleRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/dev/next-dev-server.js:336:24)
    at async invokeRender (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:173:21)
    at async handleRequest (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:350:24)
    at async requestHandlerImpl (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/router-server.js:374:13)
    at async Server.requestListener (/Users/539hex/dev/deft.cx/node_modules/next/dist/server/lib/start-server.js:141:13)
 POST /api/upload 500 in 9203ms
```

### 現在の動作と期待される動作

ファイルサイズに関係なく、常にformDataが返されることを期待しています。

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 12
バイナリ：
  Node: 23.3.0
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.12.1
関連パッケージ：
  next: 14.2.18 // 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します！
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定：
  出力: N/A
 ⚠ 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します！
   問題がまだ存在するか確認するために、最新のカナリアバージョン (`npm install next@canary`) を試してください。新しい問題を作成する前に確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？ (該当するすべてを選択)

不明

### 影響を受けるステージはどれですか？ (該当するすべてを選択)

next dev (ローカル)

### 追加のコンテキスト

next 15.0.3にアップデートしても同じ問題が発生しました。"
S1,P1,Nested parallel routes not unmounted when navigating back using router.back after a hard refresh,"### Verify canary release

- [X] I verified that the issue exists in the latest Next.js canary release

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 16329
  Available CPU cores: 6
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.28 // Latest available version is detected (15.0.4-canary.28).
  eslint-config-next: 14.2.13
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which example does this report relate to?

https://github.com/rexfordessilfie/next-tabs

### What browser are you using? (if relevant)

_No response_

### How are you deploying your application? (if relevant)

_No response_

### Describe the Bug

When navigating through the application, the following sequence of actions leads to the sub-a route being mounted:

1. Starting from the root, navigate to tab-a.
2. Then, navigate to sub-a under tab-a.
3. Perform a hard reload of the page.
4. Use the browser back button (or router.back()) to return to tab-a.

### Expected Behavior

Upon navigating back to tab-a, the sub-a route should be unmounted, and the view should correctly reflect the state of tab-a.

### To Reproduce

1. Navigate to root.
2. Navigate to tab-a.
3. Navigate to sub-a.
4. Hard reload the page (Ctrl + R or Command + R).
5. Use the browser back button (or router.back()).
6. Observe that the sub-a route remains mounted under tab-a.",ネストされた並列ルートがハードリフレッシュ後にrouter.backを使用して戻る際にアンマウントされない,"### カナリアリリースの確認

- [X] 最新のNext.jsカナリアリリースに問題が存在することを確認しました

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能メモリ (MB): 16329
  利用可能CPUコア: 6
バイナリ：
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ：
  next: 15.0.4-canary.28 // 検出された最新バージョンは (15.0.4-canary.28) です。
  eslint-config-next: 14.2.13
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定：
  出力: N/A
```

### このレポートはどの例に関連していますか？

https://github.com/rexfordessilfie/next-tabs

### 使用しているブラウザは何ですか？（該当する場合）

_回答なし_

### アプリケーションをどのようにデプロイしていますか？（該当する場合）

_回答なし_

### バグの説明

アプリケーションをナビゲートする際、次の一連のアクションがサブaルートをマウントすることにつながります：

1. ルートからtab-aに移動します。
2. 次に、tab-aの下のsub-aに移動します。
3. ページをハードリロードします。
4. ブラウザの戻るボタン（またはrouter.back()）を使用してtab-aに戻ります。

### 期待される動作

tab-aに戻る際、sub-aルートはアンマウントされ、ビューはtab-aの状態を正しく反映する必要があります。

### 再現手順

1. ルートに移動します。
2. tab-aに移動します。
3. sub-aに移動します。
4. ページをハードリロードします（Ctrl + RまたはCommand + R）。
5. ブラウザの戻るボタン（またはrouter.back()）を使用します。
6. sub-aルートがtab-aの下にマウントされたままであることを確認します。"
S1,P1,Middleware called redirect but the browser is not redirected,"### Link to the code that reproduces this issue

https://github.com/kuanjiahong/nextjs-middleware-redirect-issue-demo

### To Reproduce

1. npm run dev
2. Go to http://localhost:3000
3. Click ""Go to Dashboard"" on ""/"" page
4. Click ""Set Session Cookie"" on ""/set-cookie"" page
5. Click ""Go to Dashboard"" on ""/"" page
6. Click ""Remove Session"" on ""/dashboard"" page
7. Click ""Call Server Action"" on ""/dashboard"" page

### Current vs. Expected behavior

**Current behavior**
After clicking ""Remove Session"" and then clicking ""My Server Action"", the page is not redirected to ""/set-cookie"" page

**Expected behaviour**
After clicking ""Remove Session"" and then clicking ""My Server Action"", the page should be redirected to ""/set-cookie"" page


### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
  Available memory (MB): 16086
  Available CPU cores: 8
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.27 // Latest available version is detected (15.0.4-canary.27).
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

I tested my reproduction on 15.0.4-canary.27 and also 15.0.3. The issues are reproduceable for both of these version.",ミドルウェアがリダイレクトを呼び出したが、ブラウザがリダイレクトされない,"### この問題を再現するためのコードへのリンク

https://github.com/kuanjiahong/nextjs-middleware-redirect-issue-demo

### 再現手順

1. npm run dev
2. http://localhost:3000 にアクセス
3. ""/"" ページで ""Go to Dashboard"" をクリック
4. ""/set-cookie"" ページで ""Set Session Cookie"" をクリック
5. ""/"" ページで ""Go to Dashboard"" をクリック
6. ""/dashboard"" ページで ""Remove Session"" をクリック
7. ""/dashboard"" ページで ""Call Server Action"" をクリック

### 現在の動作と期待される動作

**現在の動作**
""Remove Session"" をクリックした後、""My Server Action"" をクリックしても、ページは ""/set-cookie"" ページにリダイレクトされません。

**期待される動作**
""Remove Session"" をクリックした後、""My Server Action"" をクリックすると、ページは ""/set-cookie"" ページにリダイレクトされるべきです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home
  利用可能メモリ (MB): 16086
  利用可能 CPU コア: 8
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.4-canary.27 // 利用可能な最新バージョンが検出されました (15.0.4-canary.27)。
  eslint-config-next: N/A
  react: 19.0.0-rc-b01722d5-20241114
  react-dom: 19.0.0-rc-b01722d5-20241114
  typescript: 5.3.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

15.0.4-canary.27 と 15.0.3 の両方で再現テストを行いました。これらのバージョンで問題が再現されます。"
S1,P1,Parallel routes and route groups conflicting,"### Link to the code that reproduces this issue

https://github.com/chris-orgorg/parallel-routes

### To Reproduce

1. yarn dev
2. visit http://localhost:3000/subfolder/mypage

### Current vs. Expected behavior

Current:  

No default component was found for a parallel route rendered on this page. Falling back to nearest NotFound boundary.
Learn more: https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs

Missing slots: @breadcrumb Error Component Stack

Expected:
/ layout
/ subfolder layout
/ mypage page
/ subfolder/@breadcrumb page

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  Available memory (MB): 40960
  Available CPU cores: 16
Binaries:
  Node: 22.0.0
  npm: 10.5.1
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

It seems that by having a route group (in this case (app)) at the same level as another subfolder, both using the same name for a parallel route (in this case @breadcrumb) causes the incorrect resolution for getting the parallel routes.  Maybe the parallel routes are getting fetched by path (but route grouping doesn't show up in the path, so it's looking in the wrong place).

I would expect the parallel routes to resolve or search by actual folder structure.

Changing the parallel routes to different names will fix the issue.","タイトル:
並行ルートとルートグループの競合","本文:
### この問題を再現するためのコードへのリンク

https://github.com/chris-orgorg/parallel-routes

### 再現手順

1. yarn dev
2. http://localhost:3000/subfolder/mypage にアクセス

### 現在の動作と期待される動作

現在:  

このページにレンダリングされた並行ルートのデフォルトコンポーネントが見つかりませんでした。最も近いNotFound境界にフォールバックします。
詳細はこちら: https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs

不足しているスロット: @breadcrumb エラーコンポーネントスタック

期待される動作:
- / layout
- / subfolder layout
- / mypage page
- / subfolder/@breadcrumb page

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  利用可能なメモリ (MB): 40960
  利用可能なCPUコア: 16
バイナリ:
  Node: 22.0.0
  npm: 10.5.1
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.3 // 最新の利用可能バージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.7.2
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並行およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

同じレベルにルートグループ（この場合は(app)）があり、別のサブフォルダーと同じ名前の並行ルート（この場合は@breadcrumb）を使用していると、並行ルートの取得に対して不正な解決が発生するようです。おそらく、並行ルートはパスによって取得されているが、ルートグルーピングはパスに表示されないため、間違った場所を探しているのかもしれません。

並行ルートは実際のフォルダー構造によって解決または検索されるべきだと思います。

並行ルートの名前を異なるものに変更すると、問題が解決します。"
S1,P1,"Parallel, intercepted catchall routes provided wrong params","### Link to the code that reproduces this issue

https://github.com/Drewsapple/repro-intercept-catchall

### To Reproduce

1. Start the app (`next dev` or `next build && next start`)
2. navigate to `/reproduction`
3. click the link to `/reproduction/double/double`
4. refresh the page or otherwise load the same route so navigation is not intercepted

### Current vs. Expected behavior

When the default export from `(.)[...catchall]/page.tsx` is loaded, the params object passed is are follows:

Navigating to `/reproduction/single`
```
{""catchall"":[""single""]}
```

Navigating to `/reproduction/double/double`
```
{""catchall"":[""doubledouble""]}
```

Instead of the route segments being concatenated as strings, they should be concatenated as array elements, i.e.
```
{""catchall"":[""double"",""double""]}
```



### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Debian 6.11.6-1 (2024-11-04)
  Available memory (MB): 15748
  Available CPU cores: 8
Binaries:
  Node: 20.11.1
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.14.2
Relevant Packages:
  next: 14.2.18 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

I tried this in v14.2.14 as well, to see if it was a regression introduced by #65063 in v14.2.15, but the behavior was the same.

In v15.0.3 (with awaited params), the catchall group doesn't intercept a navigation with multiple path segments at all. This modification is tracked in the `v15.0.3` branch of the reproduction repo.","タイトル:
並行してインターセプトされたキャッチオールルートが間違ったパラメータを提供","本文:
### この問題を再現するためのコードへのリンク

https://github.com/Drewsapple/repro-intercept-catchall

### 再現手順

1. アプリを起動する（`next dev` または `next build && next start`）
2. `/reproduction` に移動する
3. `/reproduction/double/double` へのリンクをクリックする
4. ページをリフレッシュするか、同じルートを再度読み込むことでナビゲーションがインターセプトされないようにする

### 現在の動作と期待される動作

`(.)[...catchall]/page.tsx` からのデフォルトエクスポートが読み込まれると、渡されるパラメータオブジェクトは次のようになります：

`/reproduction/single` に移動すると
```
{""catchall"":[""single""]}
```

`/reproduction/double/double` に移動すると
```
{""catchall"":[""doubledouble""]}
```

ルートセグメントが文字列として連結されるのではなく、配列要素として連結されるべきです。つまり、
```
{""catchall"":[""double"",""double""]}
```

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Debian 6.11.6-1 (2024-11-04)
  利用可能なメモリ (MB): 15748
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.11.1
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.14.2
関連パッケージ:
  next: 14.2.18 // 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

並行およびインターセプトされたルート

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

v14.2.14でもこの問題を試しましたが、v14.2.15で導入された#65063による回帰かどうかは同じ動作でした。

v15.0.3（待機されたパラメータを使用）では、キャッチオールグループは複数のパスセグメントを持つナビゲーションを全くインターセプトしません。この修正は、再現リポジトリの`v15.0.3`ブランチで追跡されています。"
S1,P1,SASS import error when adding carbon-components to nextjs with turbopack,"### Link to the code that reproduces this issue

https://github.com/krab7191/turbopack-sass-carbon-issue

### To Reproduce

1. Create a new nextjs project and choose to use Turbopack
2. Adjust React & React DOM versions to 18.2.0 as required peer deps 
3. Follow instructions to add [carbon-components](https://carbondesignsystem.com/developing/react-tutorial/overview/) (step 1)


### Current vs. Expected behavior

When running `npm run dev` the following error appears: 

```
Error evaluating Node.js code
Error: Can't find stylesheet to import.
  ╷
1 │ @use '@carbon/react';
```

When changing the sass use statement to `@use '@carbon/react/index.scss';` the error changes to:

```
Error evaluating Node.js code
Error: Can't find stylesheet to import.
  ╷
8 │ @forward '@carbon/colors';
```

Removing the `--turbopack` option from the ""dev"" script and restarting makes everything render properly, aka the button appears on the page.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 21.7.3
  npm: 10.5.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",SASSインポートエラー：Turbopackを使用してNext.jsにcarbon-componentsを追加する際の問題,"### この問題を再現するコードへのリンク

https://github.com/krab7191/turbopack-sass-carbon-issue

### 再現手順

1. 新しいNext.jsプロジェクトを作成し、Turbopackを使用することを選択します
2. 必要なピア依存関係としてReactおよびReact DOMのバージョンを18.2.0に調整します
3. [carbon-components](https://carbondesignsystem.com/developing/react-tutorial/overview/)を追加する手順に従います（ステップ1）

### 現在の動作と期待される動作

`npm run dev`を実行すると、次のエラーが表示されます：

```
Node.jsコードの評価中にエラーが発生しました
エラー：インポートするスタイルシートが見つかりません。
  ╷
1 │ @use '@carbon/react';
```

Sassの使用文を`@use '@carbon/react/index.scss';`に変更すると、エラーは次のように変わります：

```
Node.jsコードの評価中にエラーが発生しました
エラー：インポートするスタイルシートが見つかりません。
  ╷
8 │ @forward '@carbon/colors';
```

""dev""スクリプトから`--turbopack`オプションを削除し、再起動すると、すべてが正しくレンダリングされ、ボタンがページに表示されます。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム：darwin
  アーキテクチャ：arm64
  バージョン：Darwinカーネルバージョン24.1.0：2024年10月10日木曜日21:03:15 PDT；root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  利用可能なメモリ（MB）：32768
  利用可能なCPUコア：10
バイナリ：
  Node：21.7.3
  npm：10.5.0
  Yarn：該当なし
  pnpm：該当なし
関連パッケージ：
  next：15.0.3 // 利用可能な最新バージョンが検出されました（15.0.3）。
  eslint-config-next：15.0.3
  react：18.2.0
  react-dom：18.2.0
  typescript：5.6.3
Next.js設定：
  出力：該当なし
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,Calling notFound() in ISR generates static files in app router.,"### Link to the code that reproduces this issue

https://github.com/peterlidee/isr-not-found-bug

### To Reproduce

1. Run next build
2. Check build folder: `.next/app/post/a.html` and `.next/pages/post2/a.html` exist (SSG)
3. Run next start
4. Visit `/post/a` (app router) and `/post2/a` (pages router). Pages appear as expected.
5. Visit `/post/b` (app router) and `/post2/b` (pages router). Pages appear as expected.  (ISR works confirmed)
6. Visit `/post/c` (app router) and `/post2/c` (pages router). 404 as expected. (`{ notfound: true }` and `notFound()` work)
7. Check build pages folder: `.next/pages/post2/` now contains 2 static html files: `a.html` and `b.html`. No `c.html` because we returned `{ notfound: true }` from `getStaticProps`. This is as expected.
8. Check build app folder: `.next/app/post/` now contains 3 static html files: `a.html` and `b.html` as expected but also `c.html`.
9. `c.html` should not have been generated because we called `notFound()`.

### Current vs. Expected behavior

Following the steps from the previous section, I expected `c.html` to *not* exist in the app router build folder but it did exist.

I setup an example running ISR in the app router ([https://github.com/peterlidee/isr-not-found-bug/blob/main/src/app/post/[slug]/page.tsx](https://github.com/peterlidee/isr-not-found-bug/blob/main/src/app/post/%5Bslug%5D/page.tsx)). I use `generateStaticParams` to generate one page: `post/a`:

```
export function generateStaticParams() {
  return [{ slug: 'a' }];
}
```
In the actual functional component, I only allow slugs ""a"" or ""b"":

```
export default async function page({ params }: Props) {
  const slug = (await params).slug;
  const validParams = ['a', 'b'];
  if (!validParams.includes(slug)) {
    notFound();
  }
  return <div>post slug: {slug}</div>;
}
```
Slug ""a"" has been prerendered at build time. When visiting `/post/b`, next will do ISR and generate static html in the app build folder: `.next/app/post/b.html`. This confirms that ISR works.

The problem lies with slug ""c"" (or anything other then ""a"" or ""b""). When the slug is ""c"" `notFound()` gets called and we get an error 404 as expected. However, when visiting the build folder we see that a static `c.html` was generated: `.next/app/post/c.html`.

This is unexpected behaviour: we just told next this page doesn't exist so why generate a static file for this? I copied the functionality of this page in the pages router ([https://github.com/peterlidee/isr-not-found-bug/blob/main/src/pages/post2/[slug].tsx](https://github.com/peterlidee/isr-not-found-bug/blob/main/src/pages/post2/%5Bslug%5D.tsx)) (`/post2`) using `getStaticPaths` and `getStaticProps` and in the pages router `c.html` does not get generated in the build folder.

I'm not 100% this is a bug because the app router behaviour is similar in Next 13, 14, 15 and canary.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Education
  Available memory (MB): 32617
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local), next start (local)

### Additional context

_No response_","タイトル:
ISRでnotFound()を呼び出すと、アプリルーターに静的ファイルが生成される。","本文:
### この問題を再現するためのコードへのリンク

https://github.com/peterlidee/isr-not-found-bug

### 再現手順

1. next buildを実行
2. ビルドフォルダを確認: `.next/app/post/a.html` と `.next/pages/post2/a.html` が存在する（SSG）
3. next startを実行
4. `/post/a`（アプリルーター）と`/post2/a`（ページルーター）を訪問。ページは期待通りに表示される。
5. `/post/b`（アプリルーター）と`/post2/b`（ページルーター）を訪問。ページは期待通りに表示される。（ISRが機能していることが確認された）
6. `/post/c`（アプリルーター）と`/post2/c`（ページルーター）を訪問。404が期待通りに表示される。(`{ notfound: true }` と `notFound()` が機能する)
7. ビルドページフォルダを確認: `.next/pages/post2/` には現在2つの静的HTMLファイルが含まれている: `a.html` と `b.html`。`c.html` は `getStaticProps` から `{ notfound: true }` を返したため存在しない。これは期待通り。
8. ビルドアプリフォルダを確認: `.next/app/post/` には期待通りに `a.html` と `b.html` の他に `c.html` も含まれている。
9. `c.html` は生成されるべきではなかった。なぜなら `notFound()` を呼び出したから。

### 現在の動作と期待される動作

前のセクションの手順に従った結果、アプリルーターのビルドフォルダに `c.html` が *存在しない* ことを期待していたが、実際には存在していた。

ISRをアプリルーターで実行する例を設定した（[https://github.com/peterlidee/isr-not-found-bug/blob/main/src/app/post/[slug]/page.tsx](https://github.com/peterlidee/isr-not-found-bug/blob/main/src/app/post/%5Bslug%5D/page.tsx)）。`generateStaticParams` を使用して1ページを生成する: `post/a`:

```
export function generateStaticParams() {
  return [{ slug: 'a' }];
}
```
実際の機能コンポーネントでは、スラグ ""a"" または ""b"" のみを許可している:

```
export default async function page({ params }: Props) {
  const slug = (await params).slug;
  const validParams = ['a', 'b'];
  if (!validParams.includes(slug)) {
    notFound();
  }
  return <div>post slug: {slug}</div>;
}
```
スラグ ""a"" はビルド時にプリレンダリングされている。`/post/b` を訪問すると、nextはISRを実行し、アプリビルドフォルダに静的HTMLを生成する: `.next/app/post/b.html`。これによりISRが機能していることが確認される。

問題はスラグ ""c""（または ""a"" または ""b"" 以外のもの）にある。スラグが ""c"" の場合、`notFound()` が呼び出され、期待通りに404エラーが表示される。しかし、ビルドフォルダを訪問すると、静的な `c.html` が生成されていることがわかる: `.next/app/post/c.html`。

これは予期しない動作である。私たちはnextにこのページは存在しないと伝えたのに、なぜ静的ファイルが生成されるのか？このページの機能をページルーターでコピーした（[https://github.com/peterlidee/isr-not-found-bug/blob/main/src/pages/post2/[slug].tsx](https://github.com/peterlidee/isr-not-found-bug/blob/main/src/pages/post2/%5Bslug%5D.tsx)）(`/post2`)し、`getStaticPaths` と `getStaticProps` を使用したが、ページルーターでは `c.html` はビルドフォルダに生成されなかった。

これはバグであるかどうかは100%確信がない。なぜならアプリルーターの動作はNext 13、14、15およびcanaryで類似しているからである。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Education
  利用可能なメモリ (MB): 32617
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 最新の利用可能なバージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれか？（すべて選択）

不明

### 影響を受けるステージはどれか？（すべて選択）

next build（ローカル）、next start（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,Relay multi-project configuration doesn't work,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/crimson-frog-go8s7s

### To Reproduce

Provide a Relay configuration that makes use of the multi-project format:

```js
module.exports = {
    root: ""."",
    // For simplicity I'm defining just one project but it doesn't make any difference
    sources: {
      ""."": ""repro"",
    },
    excludes: [""**/node_modules/**"", ""**/__mocks__/**"", ""**/__generated__/**""],
    projects: {
      ""repro"": {
        output: ""__generated__"",
        language: ""typescript"",
        schema: ""schema.graphql"",
      },
    },
  };
```

Start the app (both dev mode or build) and observe the Relay integration doesn't work.

### Current vs. Expected behavior

 ```
 ⚠ Invalid next.config.mjs options detected: 
 ⚠     ""compiler.relay.src"" is missing, expected string
 ⚠ See more info here: https://nextjs.org/docs/messages/invalid-next-config
 ```

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.23 // Latest available version is detected (15.0.4-canary.23).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
Done in 3.69s.
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_",リレーのマルチプロジェクト構成が機能しない,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/crimson-frog-go8s7s

### 再現手順

マルチプロジェクト形式を利用したリレーの設定を提供します：

```js
module.exports = {
    root: ""."",
    // 簡単のためにプロジェクトを1つだけ定義していますが、違いはありません
    sources: {
      ""."": ""repro"",
    },
    excludes: [""**/node_modules/**"", ""**/__mocks__/**"", ""**/__generated__/**""],
    projects: {
      ""repro"": {
        output: ""__generated__"",
        language: ""typescript"",
        schema: ""schema.graphql"",
      },
    },
  };
```

アプリを起動します（開発モードまたはビルドの両方）し、リレーの統合が機能しないことを確認します。

### 現在の動作と期待される動作

 ```
 ⚠ 無効な next.config.mjs オプションが検出されました: 
 ⚠     ""compiler.relay.src"" が欠落しています。文字列が必要です
 ⚠ 詳細はこちらを参照してください: https://nextjs.org/docs/messages/invalid-next-config
 ```

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能メモリ (MB): 4102
  利用可能 CPU コア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.4-canary.23 // 検出された最新の利用可能バージョン (15.0.4-canary.23)。
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js 設定:
  output: N/A
完了までに 3.69 秒かかりました。
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,`“use cache”` does not serialize the serializable value (but `unstable_cache` serializes),"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/keen-cloud-gggnf4?embed=1

### To Reproduce

unstable_cache serializes everything and everything works.
All logs are output to the console

1. Try entering mail in the field with unstable_cache
2. Try to enter mail again in the field with unstable_cache and look at the logs (make sure there are no errors)
3. Try to enter the mail again in the “use cache” field and make sure that the error pops up.
```
Error: Only plain objects, and a few built-ins, can be passed to Client Components from Server Components. Classes or null prototypes are not supported.
  [{}]
   ^^
    at stringify (<anonymous>)
Error while saving cache key: [""development"",""c04d358ed385c8992fa9fcf45e6ff96556234302f3"",[{""ctx"":{},""type"":""query"",""path"":""user.getByEmail"",""rawInput"":""oxmaster@gmail.com"",""meta"":""$undefined"",""input"":""oxmaster@gmail.com"",""next"":""$T""}]] Error: Only plain objects, and a few built-ins, can be passed to Client Components from Server Components. Classes or null prototypes are not supported.
  [{}]
   ^^
```


BONUS:
1. Try replacing `<main>` in `page.tsx` with a fragment (empty tag) and make sure the error does not correspond to reality

### Current vs. Expected behavior

Current: error
Expected: no error

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 16320
  Available CPU cores: 6
Binaries:
  Node: 22.10.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.4-canary.22 // Codesandbox: (15.0.4-canary.23)
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.7.1-rc
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

dynamicIO

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

An unexplained error is displayed when trying to serialize a value. But `“use cache”` cannot serialize it, although `unstable_cache` serializes everything fine","タイトル:
`“use cache”` はシリアライズ可能な値をシリアライズしません（しかし `unstable_cache` はシリアライズします）","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/keen-cloud-gggnf4?embed=1

### 再現手順

unstable_cache はすべてをシリアライズし、すべてが正常に動作します。
すべてのログがコンソールに出力されます。

1. unstable_cache を使用したフィールドにメールを入力してみてください。
2. unstable_cache を使用したフィールドに再度メールを入力してみて、ログを確認してください（エラーがないことを確認してください）。
3. “use cache” フィールドに再度メールを入力して、エラーが表示されることを確認してください。
```
エラー: サーバーコンポーネントからクライアントコンポーネントに渡せるのは、プレーンオブジェクトといくつかのビルトインのみです。クラスや null プロトタイプはサポートされていません。
  [{}]
   ^^
    at stringify (<anonymous>)
キャッシュキーの保存中にエラーが発生しました: [""development"",""c04d358ed385c8992fa9fcf45e6ff96556234302f3"",[{""ctx"":{},""type"":""query"",""path"":""user.getByEmail"",""rawInput"":""oxmaster@gmail.com"",""meta"":""$undefined"",""input"":""oxmaster@gmail.com"",""next"":""$T""}]] エラー: サーバーコンポーネントからクライアントコンポーネントに渡せるのは、プレーンオブジェクトといくつかのビルトインのみです。クラスや null プロトタイプはサポートされていません。
  [{}]
   ^^
```

ボーナス:
1. `page.tsx` の `<main>` をフラグメント（空のタグ）に置き換えて、エラーが現実に対応しないことを確認してください。

### 現在の動作と期待される動作

現在: エラー
期待される: エラーなし

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 16320
  利用可能な CPU コア: 6
バイナリ:
  Node: 22.10.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.4-canary.22 // Codesandbox: (15.0.4-canary.23)
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.7.1-rc
Next.js 設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

dynamicIO

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

値をシリアライズしようとしたときに説明のないエラーが表示されます。しかし、`“use cache”` はそれをシリアライズできませんが、`unstable_cache` はすべてを正常にシリアライズします。"
S1,P1,`webpackPrefetch: true` magic comment doesn't work in next v15.0.3,"### Link to the code that reproduces this issue

https://github.com/gavrilikhin-d/repro

### To Reproduce

Test prefetching in production mode
1.  ```bash
    npm install
    npm run build
    npm run start
2. Open http://localhost:3000
3. Open the Network tab in the browser's developer tools
4. Click on the ""Load Dynamic Component""
5. See no prefetching happening

### Current vs. Expected behavior

Prefetching should work

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:05:14 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T8103
  Available memory (MB): 8192
  Available CPU cores: 8
Binaries:
  Node: 22.9.0
  npm: 10.8.3
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Lazy Loading, Webpack

### Which stage(s) are affected? (Select all that apply)

next build (local), next start (local)

### Additional context

Broken since `15.0.3-canary.7`, because on `15.0.3-canary.6` it works",`webpackPrefetch: true` マジックコメントが next v15.0.3 で機能しない,"### この問題を再現するコードへのリンク

https://github.com/gavrilikhin-d/repro

### 再現手順

プロダクションモードでのプリフェッチをテストする
1.  ```bash
    npm install
    npm run build
    npm run start
2. http://localhost:3000 を開く
3. ブラウザの開発者ツールでネットワークタブを開く
4. 「動的コンポーネントを読み込む」をクリック
5. プリフェッチが行われていないことを確認

### 現在の動作と期待される動作

プリフェッチは機能するはずです

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:05:14 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T8103
  利用可能なメモリ (MB): 8192
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.9.0
  npm: 10.8.3
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 検出された最新の利用可能バージョンは (15.0.3) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

レイジーローディング、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

`15.0.3-canary.7` から壊れており、`15.0.3-canary.6` では機能します"
S1,P1,Turbopack does not respect forceSwcTransforms,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/peaceful-bhabha-n67k3g

### To Reproduce

1. Have a next config:
```
const nextConfig = {
  experimental: {
    forceSwcTransforms: true,
    turbo: {
      rules: {
        ""*.svg"": {
          loaders: [""@svgr/webpack""],
          exclude: /node_modules/,
          as: ""*.js"",
        },
      },
    },
  },
};
```

2. Have a babel file in root
3. Run `next dev --turbopack`

### Current vs. Expected behavior

You are using configuration and/or tools that are not yet
supported by Next.js with Turbopack:
Babel detected (babel.config.js)
  Babel is not yet supported. To use Turbopack at the moment,
  you'll need to remove your usage of Babel.

- Unsupported Next.js configuration option(s) (next.config.js)
  To use Turbopack, remove the following configuration options:
    - experimental.forceSwcTransforms


If you cannot make the changes above, but still want to try out
Next.js with Turbopack, create the Next.js playground app
by running the following commands:

  yarn create next-app --example with-turbopack with-turbopack-app
  cd with-turbopack-app
  yarn run dev
        
 ⚠ Learn more about Next.js and Turbopack: https://nextjs.link/with-turbopack

Expected: The build should succeed, same as it does without `--turbopack`.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.11.0
  npm: 10.2.4
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
TurbopackはforceSwcTransformsを尊重しません","本文:
### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/peaceful-bhabha-n67k3g

### 再現手順

1. 次の設定を持つnext configを用意します:
```
const nextConfig = {
  experimental: {
    forceSwcTransforms: true,
    turbo: {
      rules: {
        ""*.svg"": {
          loaders: [""@svgr/webpack""],
          exclude: /node_modules/,
          as: ""*.js"",
        },
      },
    },
  },
};
```

2. ルートにbabelファイルを用意します
3. `next dev --turbopack`を実行します

### 現在の動作と期待される動作

あなたは、Turbopackを使用するNext.jsでまだサポートされていない設定やツールを使用しています:
Babelが検出されました (babel.config.js)
  現時点ではBabelはサポートされていません。Turbopackを使用するには、
  Babelの使用を削除する必要があります。

- サポートされていないNext.jsの設定オプション (next.config.js)
  Turbopackを使用するには、次の設定オプションを削除してください:
    - experimental.forceSwcTransforms

上記の変更を行うことができない場合でも、Turbopackを使用したNext.jsを試したい場合は、次のコマンドを実行してNext.jsプレイグラウンドアプリを作成してください:

  yarn create next-app --example with-turbopack with-turbopack-app
  cd with-turbopack-app
  yarn run dev
        
 ⚠ Next.jsとTurbopackについての詳細: https://nextjs.link/with-turbopack

期待される結果: ビルドは成功するべきで、`--turbopack`なしで成功するのと同じです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.11.0
  npm: 10.2.4
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 検出された最新のバージョンは15.0.3です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？ (すべて選択)

Turbopack

### 影響を受けるステージはどれですか？ (すべて選択)

next dev (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,Inconsistent behavior of `usePathname` with static rendering during build,"### Link to the code that reproduces this issue

https://github.com/amannn/nextjs-bug-repro-usepathnamessg/commit/c6b084df43e08a9b043548fb577be8db5f059bde

### To Reproduce

Compare the output of `usePathname` in development vs during the static prerender when accessing the route `/test` which uses a rewrite in the middleware.

### Current vs. Expected behavior

`usePathname` seems to pick up a request-time pathname from a middleware rewrite. However, as this information is not available during a static build, `usePathname` will return a different value in this case. Then again, when running the app in production, `usePathname` will return the pathname that's displayed in the browser (i.e. after a rewrite), but only on the client side.

In the reproduction this leads to a text content mismatch, but more generally this breaks a dev/prod guarantee. I'd expect a static prerender to only be a performance optimization and not to change application logic.

I guess some unification would be necessary here.

Note that this only applies for static prerendering, if you use SSR in production then the behavior is the same as in dev.

A more real world use case where this behavior was encountered: https://github.com/amannn/next-intl/issues/1568

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.14.2
Relevant Packages:
  next: 15.0.4-canary.23 // Latest available version is detected (15.0.4-canary.23).
  eslint-config-next: 15.0.4-canary.23
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

Maybe a hook like `useInternalPathname()` (naming TBD) could help that always reliably returns the pathname that renders in Next.js, regardless of any rewrites—essentially matching the directory structure in `src/app`.","タイトル:
ビルド中の静的レンダリングにおける `usePathname` の不一致な動作","本文:
### この問題を再現するコードへのリンク

https://github.com/amannn/nextjs-bug-repro-usepathnamessg/commit/c6b084df43e08a9b043548fb577be8db5f059bde

### 再現手順

ミドルウェアでリライトを使用しているルート `/test` にアクセスした際の、開発環境と静的プリレンダリング中の `usePathname` の出力を比較します。

### 現在の動作と期待される動作

`usePathname` はミドルウェアのリライトからリクエスト時のパス名を取得するようですが、この情報は静的ビルド中には利用できないため、この場合 `usePathname` は異なる値を返します。さらに、アプリを本番環境で実行すると、`usePathname` はブラウザに表示されるパス名（つまり、リライト後のもの）を返しますが、これはクライアントサイドのみです。

再現においては、これがテキストコンテンツの不一致を引き起こしますが、一般的にはこれは開発/本番の保証を破ることになります。静的プリレンダリングはパフォーマンスの最適化に過ぎず、アプリケーションのロジックを変更するべきではないと考えています。

ここでの統一が必要だと思われます。

これは静的プリレンダリングにのみ適用される点に注意してください。本番環境でSSRを使用する場合、動作は開発環境と同じです。

この動作が発生したより現実的なユースケース: https://github.com/amannn/next-intl/issues/1568

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.14.2
関連パッケージ:
  next: 15.0.4-canary.23 // 検出された最新のバージョン (15.0.4-canary.23)。
  eslint-config-next: 15.0.4-canary.23
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

`useInternalPathname()` のようなフック（名称は未定）があれば、リライトに関係なく、Next.js でレンダリングされるパス名を常に信頼性高く返すことができるかもしれません。これは、`src/app` のディレクトリ構造に一致するものです。"
S1,P1,notfound() uses fallback instead of app/not-found.tsx with route group (turbopack),"### Link to the code that reproduces this issue

https://github.com/twillhorn/next_not_found_bug

### To Reproduce

1. next dev --turbopack
2. go to localhost:3000 and notice that the fallback 404 page is shown instead of not-found.tsx

### Current vs. Expected behavior

Expected: not-found.tsx to be used
Actual: fallback not found page is used

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:00:32 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6030
  Available memory (MB): 18432
  Available CPU cores: 11
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.12.3
Relevant Packages:
  next: 15.0.4-canary.23 // Latest available version is detected (15.0.4-canary.23).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation, Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
notfound()は、ルートグループでapp/not-found.tsxの代わりにフォールバックを使用します（turbopack）","本文:
### この問題を再現するコードへのリンク

https://github.com/twillhorn/next_not_found_bug

### 再現手順

1. next dev --turbopack
2. localhost:3000にアクセスし、not-found.tsxの代わりにフォールバックの404ページが表示されることに気づく

### 現在の動作と期待される動作

期待される動作: not-found.tsxが使用されること
実際の動作: フォールバックの見つからないページが使用されること

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:00:32 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6030
  利用可能メモリ (MB): 18432
  利用可能CPUコア: 11
バイナリ:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.12.3
関連パッケージ:
  next: 15.0.4-canary.23 // 検出された最新のバージョンは (15.0.4-canary.23) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション、Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,"Renaming the distDir and using ""output: export"" seems to render ""npm run start"" unusable","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/npm-run-start-broken-t9z2fd

### To Reproduce

1. I start clean by deleting both the `.next` and `build` folders if present.
2. Run the ""build"" task; this runs `npm run build` which runs `next build`
3. `.next` and `build` folders are created successfully. Run the ""prod"" task; this runs `npm run start` which runs `next start`
4. Error propagates

### Current vs. Expected behavior

I am trying to test my production build locally. We are using static exports for our application and we have renamed the typical ""out"" folder to ""build"" in `next.config.mjs`. Everything builds successfully (and I have deployed it on production just fine), but running `npm run start` (which is really `next start`) cannot seem to find the production build. 

I get this error:
```
Error: Could not find a production build in the 'build' directory. 
Try building your app with 'next build' before starting the production server.
https://nextjs.org/docs/messages/production-start-no-build-id
```

This is my `next.config.mjs` file:
```
/** @type {import('next').NextConfig} */
const nextConfig = {
    output: 'export',
    distDir: 'build',
    reactStrictMode: false,
    images: {
        unoptimized: true,
    },
}

export default nextConfig
```

The `.next` folder seems to contain the `BUILD_ID` but the `build` folder, which contains all the static exports, does not have a `BUILD_ID` and I think that is what `npm run start` is looking for based on the URL the error message points to. Any suggestions on how to run the production build with `npm run start`?

I understand my environment info below dictates things are out of date, but my codesandbox above should be using the latest NextJS and it still doesn't work there.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Thu Nov 7 15:41:49 EST 2024
  Available memory (MB): 15736
  Available CPU cores: 4
Binaries:
  Node: 20.5.1
  npm: 9.8.1
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.16 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.16
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.3
Next.js Config:
  output: export
 ⚠ An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next start (local)

### Additional context

_No response_","タイトル:
distDirの名前変更と「output: export」の使用が「npm run start」を使用不能にするようです","本文:
### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/npm-run-start-broken-t9z2fd

### 再現手順

1. `.next`と`build`フォルダーが存在する場合は削除してクリーンな状態から始めます。
2. 「build」タスクを実行します。これにより`npm run build`が実行され、`next build`が実行されます。
3. `.next`と`build`フォルダーが正常に作成されます。「prod」タスクを実行します。これにより`npm run start`が実行され、`next start`が実行されます。
4. エラーが発生します。

### 現在の動作と期待される動作

私はローカルでプロダクションビルドをテストしようとしています。私たちはアプリケーションのために静的エクスポートを使用しており、`next.config.mjs`で通常の「out」フォルダーの名前を「build」に変更しました。すべてが正常にビルドされ（本番環境にも問題なくデプロイしました）、しかし`npm run start`（実際には`next start`）を実行すると、プロダクションビルドを見つけられないようです。

以下のエラーが表示されます：
```
エラー: 'build'ディレクトリにプロダクションビルドが見つかりませんでした。
プロダクションサーバーを起動する前に'appを'next build'でビルドしてみてください。
https://nextjs.org/docs/messages/production-start-no-build-id
```

これが私の`next.config.mjs`ファイルです：
```
/** @type {import('next').NextConfig} */
const nextConfig = {
    output: 'export',
    distDir: 'build',
    reactStrictMode: false,
    images: {
        unoptimized: true,
    },
}

export default nextConfig
```

`.next`フォルダーには`BUILD_ID`が含まれているようですが、すべての静的エクスポートを含む`build`フォルダーには`BUILD_ID`がなく、エラーメッセージが指し示すURLに基づいて`npm run start`が探しているのはそれだと思います。`npm run start`でプロダクションビルドを実行する方法について何か提案はありますか？

以下の環境情報は古いことを示していますが、上記のコードサンドボックスは最新のNextJSを使用しているはずで、そこでもまだ動作しません。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Thu Nov 7 15:41:49 EST 2024
  利用可能なメモリ (MB): 15736
  利用可能なCPUコア: 4
バイナリ:
  Node: 20.5.1
  npm: 9.8.1
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.16 // 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します！
  eslint-config-next: 14.2.16
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.3
Next.js設定:
  output: export
 ⚠ 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します！
```

### 影響を受ける領域はどれですか？ (該当するすべてを選択)

開発者体験

### 影響を受ける段階はどれですか？ (該当するすべてを選択)

next start (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Backport request: Server action that fails in middleware fails silently,"### Link to the code that reproduces this issue

https://github.com/nphmuller/next-server-action-middleware-error

### To Reproduce

1. `npm run dev`
2. Click button

Code from repro:

middleware.ts:
```
export default async function Middleware(request: NextRequest) {
  if (request.method === ""POST"") {
    return NextResponse.json(""Example: token invalid"", { status: 401 });
  }
}
```

page.tsx:
```
export default function Home() {
  return (
    <button
      onClick={async () => {
        try {
          await actionThatThrowsViaMiddleware();
        } catch {
          console.log(""Caught error"");
        }
      }}
    >
      Click for action that throws
    </button>
  );
}

```

actions.ts:
```
""use server"";

export const actionThatThrowsViaMiddleware = async () => {};
```

### Current vs. Expected behavior

Expected: Console logs `Caught error`

Actual Next 14: No console log
Actual Next 15: Console logs `Caught error`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.13.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.6.0
Relevant Packages:
  next: 14.2.18 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
 ⚠ An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Middleware, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

This has been fixed sometime during Next 15 development. Some of my apps are currently stuck on Next 14 (due to dependencies that are still incompatible with React 19), so it would be really nice to have this fix in Next 14.",バックポートリクエスト: ミドルウェアで失敗するサーバーアクションが静かに失敗する,"### この問題を再現するコードへのリンク

https://github.com/nphmuller/next-server-action-middleware-error

### 再現手順

1. `npm run dev`
2. ボタンをクリック

再現用コード:

middleware.ts:
```
export default async function Middleware(request: NextRequest) {
  if (request.method === ""POST"") {
    return NextResponse.json(""例: トークン無効"", { status: 401 });
  }
}
```

page.tsx:
```
export default function Home() {
  return (
    <button
      onClick={async () => {
        try {
          await actionThatThrowsViaMiddleware();
        } catch {
          console.log(""エラーをキャッチしました"");
        }
      }}
    >
      例外を投げるアクションのためにクリック
    </button>
  );
}
```

actions.ts:
```
""use server"";

export const actionThatThrowsViaMiddleware = async () => {};
```

### 現在の動作と期待される動作

期待される: コンソールに「エラーをキャッチしました」と表示される

実際の Next 14: コンソールにログなし
実際の Next 15: コンソールに「エラーをキャッチしました」と表示される

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能な CPU コア: 10
バイナリ:
  Node: 20.13.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.6.0
関連パッケージ:
  next: 14.2.18 // 古いバージョンが検出されました (最新は 15.0.3)、アップグレードを強く推奨します!
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js 設定:
  出力: N/A
 ⚠ 古いバージョンが検出されました (最新は 15.0.3)、アップグレードを強く推奨します!
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？ (該当するすべてを選択)

ミドルウェア、ランタイム

### 影響を受けるステージはどれですか？ (該当するすべてを選択)

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

この問題は Next 15 の開発中に修正されました。私のアプリのいくつかは現在 Next 14 に留まっています (React 19 と互換性のない依存関係のため)、この修正が Next 14 にあると非常に助かります。"
S1,P1,"Server action - Internal error not handled if middleware is used Server action does not finish request on file size exceeded error  ","### Link to the code that reproduces this issue

https://github.com/liri2006/next-file-upload-issue

### To Reproduce

1. Ensure app uses middleware.ts file
2. Start the app
3. Upload file > 1mb
4. Submit form
5. Check Network tab in browser

### Current vs. Expected behavior

Expected:
Error is returned to the client.

Actual:
Request is in permanent ""pending"" state, so form submit never ends. Error is printed in server logs though .

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 32536
  Available CPU cores: 16
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.3
Relevant Packages:
  next: 15.0.4-canary.21 // Latest available version is detected (15.0.4-canary.21).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed)

### Additional context

Works as expected if middleware file is deleted.",サーバーアクション - ミドルウェアを使用した場合に処理されない内部エラー サーバーアクションがファイルサイズ超過エラーでリクエストを終了しない,"### この問題を再現するコードへのリンク

https://github.com/liri2006/next-file-upload-issue

### 再現手順

1. アプリがmiddleware.tsファイルを使用していることを確認する
2. アプリを起動する
3. 1MBを超えるファイルをアップロードする
4. フォームを送信する
5. ブラウザのネットワークタブを確認する

### 現在の動作と期待される動作

期待される動作:
エラーがクライアントに返される。

実際の動作:
リクエストが永続的な「保留中」状態になり、フォームの送信が終了しない。ただし、エラーはサーバーログに記録される。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 32536
  利用可能なCPUコア: 16
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.12.3
関連パッケージ:
  next: 15.0.4-canary.21 // 検出された最新のバージョン (15.0.4-canary.21)。
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

ミドルウェアファイルを削除すると、期待通りに動作します。"
S1,P1,Catch-all route also intercepts and catches static assets and js chunks,"### Link to the code that reproduces this issue

https://github.com/r6203/next-catch-all-bug

### To Reproduce

1. Create a catch-all route
2. run `next dev`
3. go to any static route or js chunk or view server logs to see chunks intercepted


### Current vs. Expected behavior

Having a catch all route at the root of the app shouldn't intercept next generated assets or static assets.

Expect a working app where each non asset request resolves to the catch-all route but requests to next generated assets (_next/**/*) to resolve to the corresponding files.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024
  Available memory (MB): 60075
  Available CPU cores: 16
Binaries:
  Node: 22.2.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.9.0
Relevant Packages:
  next: 14.2.12 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.4.5
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

For an in-production example of this issue with a workaround see https://github.com/session-foundation/websites/tree/main/apps/foundation

Note this is reopening this issue https://github.com/vercel/next.js/issues/67806",キャッチオールルートは静的アセットとJSチャンクをも intercept し、キャッチします,"### この問題を再現するコードへのリンク

https://github.com/r6203/next-catch-all-bug

### 再現手順

1. キャッチオールルートを作成する
2. `next dev`を実行する
3. 任意の静的ルートまたはJSチャンクにアクセスするか、サーバーログを確認してチャンクがインターセプトされているのを見る

### 現在の動作と期待される動作

アプリのルートにキャッチオールルートがある場合、Next.jsが生成したアセットや静的アセットをインターセプトすべきではありません。

非アセットリクエストがキャッチオールルートに解決される動作を期待しますが、Next.jsが生成したアセット（_next/**/*）へのリクエストは対応するファイルに解決されるべきです。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024
  利用可能なメモリ (MB): 60075
  利用可能なCPUコア: 16
バイナリ:
  Node: 22.2.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.9.0
関連パッケージ:
  next: 14.2.12 // 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します!
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.4.5
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

この問題の実稼働例とワークアラウンドについては、https://github.com/session-foundation/websites/tree/main/apps/foundation を参照してください。

これはこの問題を再開することに注意してください https://github.com/vercel/next.js/issues/67806"
S1,P1,URL's search params get encoded on page load.,"### Link to the code that reproduces this issue

https://github.com/wkd-kapsule/next-router-demo

### To Reproduce

1. Go to the [production site.](https://next-router-demo-eight.vercel.app/)
2. Use a special character in the URL's search params, such as `/`. Whether by directly typing it or clicking the button on the page.
3. Watch the URL being encoded before your eyes as the page loads.


### Current vs. Expected behavior

### **_Current behavior:_** 
Directly typing a url or using `useRouter` will encode the URL's search params after page loading.

### **_Expected behavior:_** 
I'd like to be able to use characters such as `/` or `$` in a URL's search params.

### **_Context:_**
 I use URL seach params to store some state in my app. The thing is that it's a path, thus containing `/`. In dev mode, everything is fine but somehow in production, `/` gets encoded into `%2F` once the page has loaded. It does it whether I directly type the url and press Enter or click on button with `useRouter().push`.

I've reproduced this in a minimal repo but for some reason it works fine when using `useRouter().push`. The URL gets encoded only when you manually type it and press Enter. There is basically no difference in the way I use `useRouter().push()` in this repo and in my app, I can't grasp why both behaves differently.

**NOTE: I know that I can just decode it to get the original character but my issue is more visual than technical. Having encoded characters could discourage the users of my app to use the URL to navigate. Whereas this is exactly why I put that path in the URL, so the user can directly go where they need, without having to use the interface.**

Here's the [demo](https://next-router-demo-eight.vercel.app/)

https://github.com/user-attachments/assets/4d63d9d5-f00f-4c84-b6ef-19600627b2b3

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
  Available memory (MB): 16272
  Available CPU cores: 8
Binaries:
  Node: 20.13.1
  npm: 10.8.1
  Yarn: N/A
  pnpm: 8.15.5
Relevant Packages:
  next: 15.0.4-canary.19 // There is a newer canary version (15.0.4-canary.20) available, please upgrade!
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

I couldn't pin which Next.js versions first caused the issue because it actually occured a while ago. I didn't report it at the time as being constantly on the latest canary version, I just imagined it would eventually get solved. Now that's been several months already so I thought I better report it.

Nonetheless, I can tell you that I'm using Google Chrome and that everything works as expected in Microsoft Edge.","タイトル:  
URLの検索パラメータがページ読み込み時にエンコードされる。","本文:  
### この問題を再現するコードへのリンク

https://github.com/wkd-kapsule/next-router-demo

### 再現手順

1. [本番サイト](https://next-router-demo-eight.vercel.app/)にアクセスします。
2. URLの検索パラメータに特殊文字（例：`/`）を使用します。直接入力するか、ページ上のボタンをクリックします。
3. ページが読み込まれると同時に、URLが目の前でエンコードされるのを見ます。

### 現在の動作と期待される動作

### **_現在の動作:_**  
URLを直接入力するか、`useRouter`を使用すると、ページが読み込まれた後にURLの検索パラメータがエンコードされます。

### **_期待される動作:_**  
URLの検索パラメータに`/`や`$`などの文字を使用できるようにしたいです。

### **_背景:_**  
私はアプリの状態を保存するためにURLの検索パラメータを使用しています。問題は、それがパスであり、`/`を含んでいることです。開発モードではすべて問題ありませんが、本番環境ではページが読み込まれた後に`/`が`%2F`にエンコードされます。これは、URLを直接入力してEnterを押す場合でも、`useRouter().push`のボタンをクリックする場合でも同様です。

私はこれを最小限のリポジトリで再現しましたが、なぜか`useRouter().push`を使用すると正常に動作します。URLは手動で入力してEnterを押したときだけエンコードされます。このリポジトリでの`useRouter().push()`の使用方法と私のアプリでの使用方法には基本的に違いがないため、なぜ両者が異なる動作をするのか理解できません。

**注：元の文字を取得するためにデコードすることはできますが、私の問題は技術的なものよりも視覚的なものです。エンコードされた文字があると、アプリのユーザーがURLを使ってナビゲートすることをためらうかもしれません。実際、私はそのパスをURLに入れた理由は、ユーザーがインターフェースを使わずに直接必要な場所に行けるようにするためです。**

こちらが[デモ](https://next-router-demo-eight.vercel.app/)です。

https://github.com/user-attachments/assets/4d63d9d5-f00f-4c84-b6ef-19600627b2b3

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home
  利用可能なメモリ (MB): 16272
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.13.1
  npm: 10.8.1
  Yarn: N/A
  pnpm: 8.15.5
関連パッケージ:
  next: 15.0.4-canary.19 // 新しいカナリアバージョン (15.0.4-canary.20) が利用可能です。アップグレードしてください！
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.2
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（すべて選択）

Vercel（デプロイ済み）

### 追加の背景

この問題を引き起こした最初のNext.jsのバージョンを特定できませんでした。なぜなら、実際にはかなり前に発生したからです。その時点では、常に最新のカナリアバージョンを使用していたため、最終的に解決されるだろうと考えていました。今では数ヶ月が経過したので、報告することにしました。

それでも、私はGoogle Chromeを使用しており、Microsoft Edgeではすべてが期待通りに動作することをお伝えできます。"
S1,P1,Inconsistent behaviour of revalidatePath between local and Vercel,"### Link to the code that reproduces this issue

https://github.com/damianfrizzi/next-revalidate-bug

### To Reproduce

- Go to [https://next-revalidate-bug.vercel.app](https://t.co/BBukGxf9iY) and note the number at the top
- Navigate to ""Go to some page"" and note the number at the top
- Go back to homepage and click ""Invalidate German"" and refresh page
- Number correctly changes on the homepage
- BUT number also changes on the ""/somePage"" route. This shouldn't happen

### Current vs. Expected behavior

`revalidatePath` behaves correctly when using `bun build && bun start` on my local machine. I.e., invalidating the homepage doesn't invalidate any other (sub) pages. 

When deployed to Vercel, invalidating the homepage also invalidates other (sub) pages.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Internationalization (i18n), Middleware, Runtime

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

I'm using `trailingSlash: true` in my next.config. I suspect that there is an error in connection with this configuration.","タイトル:
ローカルとVercel間のrevalidatePathの不一致な動作","本文:
### この問題を再現するためのコードへのリンク

https://github.com/damianfrizzi/next-revalidate-bug

### 再現手順

- [https://next-revalidate-bug.vercel.app](https://t.co/BBukGxf9iY)にアクセスし、上部の番号を確認
- 「いくつかのページに移動」を選択し、上部の番号を確認
- ホームページに戻り、「ドイツ語を無効にする」をクリックし、ページを更新
- ホームページの番号が正しく変更される
- しかし、""/somePage""ルートの番号も変更される。これは起こるべきではない

### 現在の動作と期待される動作

`revalidatePath`は、ローカルマシンで`bun build && bun start`を使用しているときは正しく動作します。つまり、ホームページを無効にしても他の（サブ）ページは無効になりません。

Vercelにデプロイすると、ホームページを無効にすると他の（サブ）ページも無効になります。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 利用可能な最新バージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

国際化 (i18n)、ミドルウェア、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel (デプロイ済み)

### 追加のコンテキスト

次の設定で`trailingSlash: true`を使用しています。この設定に関連するエラーがあると疑っています。"
S1,P1,All imports must resolve in `next.config` when running `next lint`.  This prevents monorepos from linting before building dependent packages.,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/damp-sea-q85m6v

### To Reproduce

`npm run lint`


### Current vs. Expected behavior

`Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: No ""exports"" main defined in /project/sandbox/node_modules/some-package/package.json imported from /project/sandbox/next.config.mjs`

It should be possible to lint a project _without_ a package being used as a plugin in the next config being built.  In monorepo pipelines it's common to lint prior to building all dependent packages.

Running `eslint` independently in a monorepo does not complain when a package referenced by a `file:` resolution in `package.json` points to non-existent files; this is a run-time not a lint-time concern.


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.20 // Latest available version is detected (15.0.4-canary.20).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Linting

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",すべてのインポートは、`next lint`を実行する際に`next.config`で解決される必要があります。これにより、モノレポが依存パッケージをビルドする前にリントできなくなります。,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/damp-sea-q85m6v

### 再現手順

`npm run lint`

### 現在の動作と期待される動作

`Error [ERR_PACKAGE_PATH_NOT_EXPORTED]: /project/sandbox/node_modules/some-package/package.jsonからインポートされた「exports」メインが定義されていません。/project/sandbox/next.config.mjs` 

次の設定でプラグインとして使用されているパッケージがビルドされていない状態で、プロジェクトをリントできる必要があります。モノレポのパイプラインでは、すべての依存パッケージをビルドする前にリントすることが一般的です。

モノレポ内で独立して`eslint`を実行すると、`package.json`内の`file:`解決によって参照されるパッケージが存在しないファイルを指していても問題になりません。これは実行時の問題であり、リント時の問題ではありません。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.4-canary.20 // 検出された最新の利用可能バージョンは (15.0.4-canary.20) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、リント

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,"When generateMetadata performs an asynchronous action, Suspense is not being rendered until generateMetadata finish","### Link to the code that reproduces this issue

https://github.com/ebidrey/suspense-generate-metadata

### To Reproduce

### To Reproduce

You can run this simple snippet

```javascript
import { Suspense } from ""react""

export async function generateMetadata() {
    const results = await fetch('https://postman-echo.com/delay/2');
    await results.json();
    return {
        title: 'Test',
        description: 'Test',
    }
}

async function PageContent() {
    const results = await fetch('https://postman-echo.com/delay/2');
    await results.json();
    return  <h1>Test</h1>
}

export default async function Page() {
    return (
        <Suspense fallback={<div>loading running 2 seconds later</div>} key={Math.random()}>
            <PageContent />
        </Suspense>
    )
}
```

It is also available in [github repo](https://github.com/ebidrey/suspense-generate-metadata)

### Current vs. Expected behavior

I expect suspense fallback to be activated immediately when the page request is made and then, the page and the metadata get streamed. Instead, page stucks for the amount of time the request to the api takes, showing nothing up to the request finished, degradating the user experience and not improving SEO in any way. 

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.10
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.14 // Latest available version is detected (15.0.4-canary.14).
  eslint-config-next: 15.0.4-canary.14
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Metadata, Performance

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

Tested in latest canary and stable.","タイトル:
generateMetadataが非同期アクションを実行する際、generateMetadataが完了するまでSuspenseがレンダリングされない","本文:
### この問題を再現するコードへのリンク

https://github.com/ebidrey/suspense-generate-metadata

### 再現手順

このシンプルなスニペットを実行できます

```javascript
import { Suspense } from ""react""

export async function generateMetadata() {
    const results = await fetch('https://postman-echo.com/delay/2');
    await results.json();
    return {
        title: 'Test',
        description: 'Test',
    }
}

async function PageContent() {
    const results = await fetch('https://postman-echo.com/delay/2');
    await results.json();
    return  <h1>Test</h1>
}

export default async function Page() {
    return (
        <Suspense fallback={<div>loading running 2 seconds later</div>} key={Math.random()}>
            <PageContent />
        </Suspense>
    )
}
```

これは[githubリポジトリ](https://github.com/ebidrey/suspense-generate-metadata)でも利用可能です。

### 現在の動作と期待される動作

ページリクエストが行われたときにサスペンスのフォールバックが即座にアクティブになり、その後ページとメタデータがストリーミングされることを期待しています。しかし、ページはAPIへのリクエストにかかる時間だけ固まってしまい、リクエストが完了するまで何も表示されず、ユーザーエクスペリエンスが低下し、SEOの改善にもつながりません。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.10
  pnpm: N/A
関連パッケージ:
  next: 15.0.4-canary.14 // 最新の利用可能バージョンが検出されました (15.0.4-canary.14)。
  eslint-config-next: 15.0.4-canary.14
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

メタデータ、パフォーマンス

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

最新のカナリア版と安定版でテストしました。"
S1,P1,Statically generated dynamic route pages return 404 after manual revalidation,"### Link to the code that reproduces this issue

https://github.com/mstruckus/next-dynamic-path-revalidation-issue

### To Reproduce

1. Build and start the application.
    - `npm run build`
    - `npm run start`
2. Open in browser `http://localhost:3000/item/3`. See that page is loaded as expected.
3. Manually revalidate the page by opening in browser `http://localhost:3000/api/revalidate?path=/item/3`.
4. Open again in browser `http://localhost:3000/item/3`. The page does not exist anymore, 404 response is returned, which is not expected.

### Current vs. Expected behavior

Current behavior - manually revalidated page returns 404.
Expected behavior - page loads successfully after manual revalidation.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 20.17.0
  npm: 10.9.0
  Yarn: 1.22.21
  pnpm: 9.6.0
Relevant Packages:
  next: 15.0.4-canary.17 // Latest available version is detected (15.0.4-canary.17).
  eslint-config-next: 14.2.17
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local), next start (local), Other (Deployed)

### Additional context

I tested my reproduction on other Next.js versions including v15.0.3 and v14.2.18, the issue is reproducible there too.",静的生成された動的ルートページが手動再検証後に404を返す,"### この問題を再現するコードへのリンク

https://github.com/mstruckus/next-dynamic-path-revalidation-issue

### 再現手順

1. アプリケーションをビルドして起動します。
    - `npm run build`
    - `npm run start`
2. ブラウザで `http://localhost:3000/item/3` を開きます。ページが期待通りに読み込まれることを確認します。
3. ブラウザで `http://localhost:3000/api/revalidate?path=/item/3` を開いて手動でページを再検証します。
4. 再度ブラウザで `http://localhost:3000/item/3` を開きます。ページはもう存在せず、404レスポンスが返されます。これは予期しない動作です。

### 現在の動作と期待される動作

現在の動作 - 手動再検証されたページが404を返します。  
期待される動作 - 手動再検証後にページが正常に読み込まれます。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.17.0
  npm: 10.9.0
  Yarn: 1.22.21
  pnpm: 9.6.0
関連パッケージ:
  next: 15.0.4-canary.17 // 検出された最新のバージョンは (15.0.4-canary.17) です。
  eslint-config-next: 14.2.17
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)、next start (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

他のNext.jsのバージョン（v15.0.3やv14.2.18を含む）で再現テストを行いましたが、そこでも問題が再現されました。"
S1,P1,bug: swc external helper breaking webpack's dependency resolution in next 15,"### Link to the code that reproduces this issue

https://github.com/rishabh3112/next-15-swc-external-helpers-bug

### To Reproduce

1. Clone reproduction repo
2. `npm install`
3. `npm run dev`

### Current vs. Expected behavior

It should work as it was working in next 14.

#### Current: After webpack parsing with external helper (Next 15):

```
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _swc_helpers_type_of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_type_of */ ""./node_modules/@swc/helpers/esm/_type_of.js"");

(function(root, factory) {
    if (typeof define === ""function"" && __webpack_require__.amdO) {
        define([
            ""exports""
        ], function(exports1) {
            root.Backbone = factory(root, exports1);
        });
    } else if (typeof exports !== ""undefined"") {
        factory(root, exports);
    } else {
        root.Backbone = factory(root, {});
    }
})(window, function(root, Backbone) {
    // Removed actual backbone code for minimal reproduction
    Backbone.Modal = function() {
        var something = root.something;
        // So that _type_of swc helper import gets added to the code
        if ((typeof something === ""undefined"" ? ""undefined"" : (0,_swc_helpers_type_of__WEBPACK_IMPORTED_MODULE_0__._)(something)) === ""object"") {
            return ""object"";
        }
        return ""don't know"";
    };
    return Backbone;
});
```
SWC playground link: [link](https://play.swc.rs/?version=1.9.2&code=H4sIAAAAAAAAA31RMW7DMBDb8wrWQ%2BoARfKAwEv3LulYFIEjnRM1ts6Q5bpB4L9XsqRAS7vYwJFH8qiyGbWwijVKw2xf0NTCsrltcF8BqkFpbz1xA0mN0oSqqlCknQLrdQS2dSfDDuKk%2FCjop2djh%2BLTyT5s4jCRAe%2B7fa3F9cTeICWIeRJ9v7Dn5T%2BD2oHydJGFJx9v1CGBLJLJ35JRKtD%2BT3KP5qt5U05KS57yswInLQfj3Q4H6vibJJzSWLc4JXHBktCwQae06hxiqDcsx0XNrSah7RtLh1aZUzpKsB4sBu7IXpQ%2BO86S%2FzEIjbkM7wx7qS2Ovqyja2uYBC7U9mSgOt8FzuTKq6V0Sa1nh4CLQNZy5uV75tMXCVtkL0l2NPoBxCdb5ZBk%2FWxx1Twt8Ow%2FEUsn713B%2B1%2BA%2B%2BJUmAIAAA%3D%3D&config=H4sIAAAAAAAAA22PSw7CMAxE95wi8potLDgBGw4RBbcKyk%2B2K7WqeneSNCkgsYtn3mTs9aQUvNjATa35mYekiZGOOSu8BNFzVkCWhGzIJoFzd4WLNWjHWKVtd0A0jSglhXxpOLgYGTveNG%2BDHZbvQhN9ImT%2BBQuqw%2Bjwbx3OghS0u6NLSCUqNBWkAuDjc6rJdmW5ZN%2FtCh%2Bob3K0guVHT9b%2FtjeNDDPTMQEAAA%3D%3D)

#### Expected: After webpack parsing without external helper (Next 14):
```
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
            exports
        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(exports1) {
            root.Backbone = factory(root, exports1);
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})(window, function(root, Backbone) {
    // Removed actual backbone code for minimal reproduction
    Backbone.Modal = function() {
        var something = root.something;
        // So that _type_of swc helper import gets added to the code
        if (typeof something === ""object"") {
            return ""object"";
        }
        return ""don't know"";
    };
    return Backbone;
});
```

SWC playground link: [link](https://play.swc.rs/?version=1.5.7&code=H4sIAAAAAAAAA31RMW7DMBDb8wrWQ%2BoARfKAwEv3LulYFIEjnRM1ts6Q5bpB4L9XsqRAS7vYwJFH8qiyGbWwijVKw2xf0NTCsrltcF8BqkFpbz1xA0mN0oSqqlCknQLrdQS2dSfDDuKk%2FCjop2djh%2BLTyT5s4jCRAe%2B7fa3F9cTeICWIeRJ9v7Dn5T%2BD2oHydJGFJx9v1CGBLJLJ35JRKtD%2BT3KP5qt5U05KS57yswInLQfj3Q4H6vibJJzSWLc4JXHBktCwQae06hxiqDcsx0XNrSah7RtLh1aZUzpKsB4sBu7IXpQ%2BO86S%2FzEIjbkM7wx7qS2Ovqyja2uYBC7U9mSgOt8FzuTKq6V0Sa1nh4CLQNZy5uV75tMXCVtkL0l2NPoBxCdb5ZBk%2FWxx1Twt8Ow%2FEUsn713B%2B1%2BA%2B%2BJUmAIAAA%3D%3D&config=H4sIAAAAAAAAA22PSw7CMAxE95yi8potLDgBGw5hBRelyk%2B2K7WqeneStCkgsYtn3mTs5dR1MIiBW7fkZx4SshAfc1ZkDopTVoCMRzFsk8K5uYMUq0cnVKV1c0CRX6Q1JZcdBxejUMN3zdtg%2B%2Fm70ESfmER%2BwYJieDn6W0eTEgd0d3KJuESVx4JUAHx8jjW5X6lzom23K3ygtsnRClYeLVn%2FW98mTB8tMQEAAA%3D%3D)


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 21.6.0: Wed Apr 24 06:05:14 PDT 2024; root:xnu-8020.240.18.708.4~1/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 18.18.2
  npm: 9.8.1
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

SWC, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Other (Deployed)

### Additional context

It should work like it was working in next 14.
Willing to contribute.",バグ: SWC外部ヘルパーがNext 15のWebpackの依存関係解決を破壊する,"### この問題を再現するコードへのリンク

https://github.com/rishabh3112/next-15-swc-external-helpers-bug

### 再現手順

1. 再現リポジトリをクローンする
2. `npm install`を実行
3. `npm run dev`を実行

### 現在の動作と期待される動作

Next 14で動作していたように動作するべきです。

#### 現在: 外部ヘルパーを使用したWebpackの解析後（Next 15）:

```
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _swc_helpers_type_of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_type_of */ ""./node_modules/@swc/helpers/esm/_type_of.js"");

(function(root, factory) {
    if (typeof define === ""function"" && __webpack_require__.amdO) {
        define([
            ""exports""
        ], function(exports1) {
            root.Backbone = factory(root, exports1);
        });
    } else if (typeof exports !== ""undefined"") {
        factory(root, exports);
    } else {
        root.Backbone = factory(root, {});
    }
})(window, function(root, Backbone) {
    // 最小限の再現のために実際のバックボーンコードを削除
    Backbone.Modal = function() {
        var something = root.something;
        // _type_of SWCヘルパーインポートがコードに追加されるように
        if ((typeof something === ""undefined"" ? ""undefined"" : (0,_swc_helpers_type_of__WEBPACK_IMPORTED_MODULE_0__._)(something)) === ""object"") {
            return ""object"";
        }
        return ""わからない"";
    };
    return Backbone;
});
```
SWCプレイグラウンドリンク: [リンク](https://play.swc.rs/?version=1.9.2&code=H4sIAAAAAAAAA31RMW7DMBDb8wrWQ%2BoARfKAwEv3LulYFIEjnRM1ts6Q5bpB4L9XsqRAS7vYwJFH8qiyGbWwijVKw2xf0NTCsrltcF8BqkFpbz1xA0mN0oSqqlCknQLrdQS2dSfDDuKk%2FCjop2djh%2BLTyT5s4jCRAe%2B7fa3F9cTeICWIeRJ9v7Dn5T%2BD2oHydJGFJx9v1CGBLJLJ35JRKtD%2BT3KP5qt5U05KS57yswInLQfj3Q4H6vibJJzSWLc4JXHBktCwQae06hxiqDcsx0XNrSah7RtLh1aZUzpKsB4sBu7IXpQ%2BO86S%2FzEIjbkM7wx7qS2Ovqyja2uYBC7U9mSgOt8FzuTKq6V0Sa1nh4CLQNZy5uV75tMXCVtkL0l2NPoBxCdb5ZBk%2FWxx1Twt8Ow%2FEUsn713B%2B1%2BA%2B%2BJUmAIAAA%3D%3D&config=H4sIAAAAAAAAA22PSw7CMAxE95wi8potLDgBGw4RBbcKyk%2B2K7WqeneSNCkgsYtn3mTs9aQUvNjATa35mYekiZGOOSu8BNFzVkCWhGzIJoFzd4WLNWjHWKVtd0A0jSglhXxpOLgYGTveNG%2BDHZbvQhN9ImT%2BBQuqw%2Bjwbx3OghS0u6NLSCUqNBWkAuDjc6rJdmW5ZN%2FtCh%2Bob3K0guVHT9b%2FtjeNDDPTMQEAAA%3D%3D)

#### 期待される: 外部ヘルパーなしのWebpackの解析後（Next 14）:
```
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
            exports
        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(exports1) {
            root.Backbone = factory(root, exports1);
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})(window, function(root, Backbone) {
    // 最小限の再現のために実際のバックボーンコードを削除
    Backbone.Modal = function() {
        var something = root.something;
        // _type_of SWCヘルパーインポートがコードに追加されるように
        if (typeof something === ""object"") {
            return ""object"";
        }
        return ""わからない"";
    };
    return Backbone;
});
```

SWCプレイグラウンドリンク: [リンク](https://play.swc.rs/?version=1.5.7&code=H4sIAAAAAAAAA31RMW7DMBDb8wrWQ%2BoARfKAwEv3LulYFIEjnRM1ts6Q5bpB4L9XsqRAS7vYwJFH8qiyGbWwijVKw2xf0NTCsrltcF8BqkFpbz1xA0mN0oSqqlCknQLrdQS2dSfDDuKk%2FCjop2djh%2BLTyT5s4jCRAe%2B7fa3F9cTeICWIeRJ9v7Dn5T%2BD2oHydJGFJx9v1CGBLJLJ35JRKtD%2BT3KP5qt5U05KS57yswInLQfj3Q4H6vibJJzSWLc4JXHBktCwQae06hxiqDcsx0XNrSah7RtLh1aZUzpKsB4sBu7IXpQ%2BO86S%2FzEIjbkM7wx7qS2Ovqyja2uYBC7U9mSgOt8FzuTKq6V0Sa1nh4CLQNZy5uV75tMXCVtkL0l2NPoBxCdb5ZBk%2FWxx1Twt8Ow%2FEUsn713B%2B1%2BA%2B%2BJUmAIAAA%3D%3D&config=H4sIAAAAAAAAA22PSw7CMAxE95yi8potLDgBGw5hBRelyk%2B2K7WqeneStCkgsYtn3mTs5dR1MIiBW7fkZx4SshAfc1ZkDopTVoCMRzFsk8K5uYMUq0cnVKV1c0CRX6Q1JZcdBxejUMN3zdtg%2B%2Fm70ESfmER%2BwYJieDn6W0eTEgd0d3KJuESVx4JUAHx8jjW5X6lzom23K3ygtsnRClYeLVn%2FW98mTB8tMQEAAA%3D%3D)

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 21.6.0: Wed Apr 24 06:05:14 PDT 2024; root:xnu-8020.240.18.708.4~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 18.18.2
  npm: 9.8.1
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.3 // 最新の利用可能なバージョンが検出されています (15.0.3)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

SWC、Webpack

### 影響を受けるステージはどれ"
S1,P1,`<Link />` and `redirect` navigation causes route handler being called twice,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/t66xm6

### To Reproduce

1. Start the application in development (`next dev`)
2. Navigate to `/`
3. Click “Link to /route”, “Link to /route without prefetch” or “redirect to /route” to see the current behavior of `route.js` handler
3. Click “Link to /page” or “redirect to /page” to see the behavior of `page.js` **for comparison**


### Current vs. Expected behavior

#### Current behavior

`GET` handler being called twice after one click (`route` is logged twice)

- click on `<Link />`
  first has `_rsc` query string and the second does not
- server action `redirect`
  first has `rsc: 1` in HTTP header and the second does not

#### Expected behavior

`GET` route handler should be called only once (similar to current behavior of `page.js`) since it's not a React component and there's no need to prefetch


### Provide environment information

```bash
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.15 // Latest available version is detected (15.0.4-canary.15).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

Might relate to #57257 but that one is about `page.js` instead of `route.js` handler
I've tested with [v14.2.0-canary.48](https://github.com/vercel/next.js/releases/tag/v14.2.0-canary.48) where that issue is resolved, and the behavior makes no difference to the latest canary version
",`<Link />` と `redirect` ナビゲーションがルートハンドラーを二度呼び出す原因,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/t66xm6

### 再現手順

1. 開発環境でアプリケーションを起動する (`next dev`)
2. `/` に移動する
3. “Link to /route”、 “Link to /route without prefetch” または “redirect to /route” をクリックして `route.js` ハンドラーの現在の動作を確認する
4. “Link to /page” または “redirect to /page” をクリックして `page.js` の動作を **比較のために** 確認する

### 現在の動作と期待される動作

#### 現在の動作

`GET` ハンドラーが一度のクリックで二度呼び出される（`route` が二度ログに記録される）

- `<Link />` をクリックすると
  最初は `_rsc` クエリ文字列があり、二度目はない
- サーバーアクション `redirect`
  最初は HTTP ヘッダーに `rsc: 1` があり、二度目はない

#### 期待される動作

`GET` ルートハンドラーは一度だけ呼び出されるべきである（`page.js` の現在の動作に似ている）なぜなら、それは React コンポーネントではなく、プリフェッチの必要がないからである

### 環境情報を提供する

```bash
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.15 // 最新の利用可能なバージョンが検出されました (15.0.4-canary.15).
  eslint-config-next: N/A
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.3.3
Next.js Config:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

#57257 に関連している可能性がありますが、その問題は `route.js` ハンドラーではなく `page.js` に関するものです
その問題が解決された [v14.2.0-canary.48](https://github.com/vercel/next.js/releases/tag/v14.2.0-canary.48) でテストしましたが、最新のカナリアバージョンに対して動作に違いはありません"
S1,P1,"Route ""/"" used `crypto.randomUUID()` outside of `""use cache""` and without explicitly calling `await connection()` beforehand.","### Link to the code that reproduces this issue

https://github.com/TheCukitoDev/blog

### To Reproduce

1. Fill the env variables
2. Run pnpm run dev:turbo
3. Open localhost:3000

### Current vs. Expected behavior

I think this shouldn't happen because i don't use any crypto.randomUUID() in my project or at least in my code i don't know if it happens in the node_modules but i think yes.

It should work well. I only get some Cosmos DB data...

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 16088
  Available CPU cores: 16
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.3
Relevant Packages:
  next: 15.0.4-canary.14 // There is a newer canary version (15.0.4-canary.15) available, please upgrade!
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I tested it in Next.js 15.0.4-canary.14 (Turbopack) ,Next.js 15.0.4-canary.14 (Webpack) ,Next.js 15.0.4-canary.15 (Turbopack) and Next.js 15.0.4-canary.15 (Webpack) and it is the same error in the turbopack ones and the same one in the webpack ones but different between the turbopack ones and the webpack ones. I think the error comes from sentry because i don't receive the errors in sentry but it worked before so I don't know what happened","タイトル:
ルート ""/"" で `crypto.randomUUID()` が `""use cache""` の外で、事前に `await connection()` を明示的に呼び出さずに使用されています。","本文:
### この問題を再現するコードへのリンク

https://github.com/TheCukitoDev/blog

### 再現手順

1. 環境変数を設定する
2. `pnpm run dev:turbo` を実行する
3. localhost:3000 を開く

### 現在の動作と期待される動作

プロジェクト内で `crypto.randomUUID()` を使用していないため、これは発生しないはずだと思います。少なくとも私のコードでは使用していませんが、node_modules で発生しているかもしれません。

正常に動作するはずです。私は Cosmos DB のデータをいくつか取得するだけです...

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能メモリ (MB): 16088
  利用可能 CPU コア: 16
バイナリ:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.3
関連パッケージ:
  next: 15.0.4-canary.14 // 新しいカナリアバージョン (15.0.4-canary.15) が利用可能です。アップグレードしてください！
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-380f5d67-20241113
  react-dom: 19.0.0-rc-380f5d67-20241113
  typescript: 5.6.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

Turbopack, Webpack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

Next.js 15.0.4-canary.14 (Turbopack)、Next.js 15.0.4-canary.14 (Webpack)、Next.js 15.0.4-canary.15 (Turbopack)、Next.js 15.0.4-canary.15 (Webpack) でテストしましたが、Turbopack と Webpack の両方で同じエラーが発生し、Turbopack と Webpack の間で異なるエラーが発生しています。このエラーは Sentry から来ていると思いますが、Sentry ではエラーを受け取っていません。しかし、以前は動作していたので、何が起こったのかわかりません。"
S1,P1,Error: Could not find the module ... in the React Client Manifest. This is probably a bug in the React Server Components bundler.,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/keen-swartz-k22cmx?file=%2Fapp%2Fpage.js%3A9%2C34

### To Reproduce

# Dublicate of https://github.com/vercel/next.js/issues/61046

### This issue still open!

### Current vs. Expected behavior

![image](https://github.com/user-attachments/assets/3685066b-a9f4-4d79-8eb9-a11dde924532)

So if I put `not-found.tsx` in `app` folder then I see

```
Error: Could not find the module ""/home/kali/Documents/GitHub/outreach-tool/app/not-found.tsx#"" in the React Client Manifest. This is probably a bug in the React Server Components bundler.
```

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Kali 6.6.15-2kali1 (2024-05-17)
Binaries:
  Node: 20.0.0
  npm: 9.6.4
  Yarn: 1.22.22
  pnpm: 9.5.0
Relevant Packages:
  next: 14.0.3
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",エラー: Reactクライアントマニフェスト内でモジュール...が見つかりませんでした。これはおそらくReactサーバーコンポーネントバンドラーのバグです。,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/keen-swartz-k22cmx?file=%2Fapp%2Fpage.js%3A9%2C34

### 再現手順

# https://github.com/vercel/next.js/issues/61046の重複

### この問題はまだ解決されていません！

### 現在の動作と期待される動作

![image](https://github.com/user-attachments/assets/3685066b-a9f4-4d79-8eb9-a11dde924532)

`not-found.tsx`を`app`フォルダーに置くと、次のようになります。

```
エラー: Reactクライアントマニフェスト内でモジュール""/home/kali/Documents/GitHub/outreach-tool/app/not-found.tsx#""が見つかりませんでした。これはおそらくReactサーバーコンポーネントバンドラーのバグです。
```

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Kali 6.6.15-2kali1 (2024-05-17)
バイナリ:
  Node: 20.0.0
  npm: 9.6.4
  Yarn: 1.22.22
  pnpm: 9.5.0
関連パッケージ:
  next: 14.0.3
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_応答なし_"
S1,P1,Build error with Next.js 15 in monorepo,"### Link to the code that reproduces this issue

https://github.com/omarshehab221/DoomUI

### To Reproduce

Just clone the repo and try to build the apps/template or the apps/playground (I made sure not change anything in this one from what `bun create next-app@latest` created to test the error)

### Current vs. Expected behavior

I was trying to build the apps/template without that much change from what `bun create next-app@latest` created. I expected it to build fine specially that it passed the optimized build and the linting phases. It throws this error in the Collecting pages data phase: ""Error: Minified React error #31; visit https://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%7D for the full message or use the non-minified dev environment for full errors and additional helpful warnings.""

I created apps/playground and made sure not to change any of its code just to be sure the issue exists and had the same problem.

**This usually doesn't happen when I'm not working in a monorepo**

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 16272
  Available CPU cores: 4
Binaries:
  Node: 18.18.0
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.9.0
  bun: 1.1.33
Relevant Packages:
  next: 15.0.3
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Output (export/standalone), Turbopack

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

I created apps/playground and didn't change it's code just to test this","タイトル:
モノレポにおけるNext.js 15のビルドエラー","本文:
### この問題を再現するコードへのリンク

https://github.com/omarshehab221/DoomUI

### 再現手順

リポジトリをクローンして、apps/templateまたはapps/playgroundをビルドしてみてください（`bun create next-app@latest`が作成したものから何も変更していないことを確認しました）。

### 現在の動作と期待される動作

私は、`bun create next-app@latest`が作成したものからあまり変更せずにapps/templateをビルドしようとしていました。最適化されたビルドとリントフェーズを通過したので、問題なくビルドできると期待していました。ページデータ収集フェーズで次のエラーが発生します：「エラー：最小化されたReactエラー#31; 完全なメッセージについてはhttps://reactjs.org/docs/error-decoder.html?invariant=31&args[]=object%20with%20keys%20%7B%24%24typeof%2C%20type%2C%20key%2C%20ref%2C%20props%7Dを訪問するか、完全なエラーと追加の役立つ警告のために非最小化の開発環境を使用してください。」

私はapps/playgroundを作成し、そのコードを変更せずに問題が存在することを確認しましたが、同じ問題が発生しました。

**モノレポで作業していないときは、通常このようなことは起こりません。**

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Pro
  利用可能メモリ (MB): 16272
  利用可能CPUコア: 4
バイナリ：
  Node: 18.18.0
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.9.0
  bun: 1.1.33
関連パッケージ：
  next: 15.0.3
  eslint-config-next: 15.0.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app、出力（エクスポート/スタンドアロン）、Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build（ローカル）

### 追加のコンテキスト

私はapps/playgroundを作成し、そのコードを変更せずにこの問題をテストしました。"
S1,P1,PNPM and output standalone issue running pnpm run dev after pnpm rub build,"### Link to the code that reproduces this issue

https://github.com/Mr-Vipi/test-pnpm

### To Reproduce

1. clone the project I provided, is created from pnpm create next-app@14.2.18
there i changed only `output: standalone` in the next config.
2. run `pnpm run build`. It should terminate succesfully
3. run `pnpm run dev` once the build is finished and youl'll get the error

### Current vs. Expected behavior

I get this error: `Error: Cannot find module 'next/dist/pages/_app'` instead of being able to run the local server.

I have to delete the node modules and install them again to run the local server but once I have to make a build should repeat the process of deleting the node modules.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Home
  Available memory (MB): 16280
  Available CPU cores: 8
Binaries:
  Node: 22.11.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.12.3
Relevant Packages:
  next: 14.2.18 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.18
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

I tested as well with ▲ Next.js 15.0.4-canary.13, and the error persists
I tested with npm and got no error so it seams related to pnpm",PNPMとスタンドアロン出力の問題：pnpm run devをpnpm run buildの後に実行すると,"### コードのリンク

https://github.com/Mr-Vipi/test-pnpm

### 再現手順

1. 提供されたプロジェクトをクローンします。これはpnpm create next-app@14.2.18から作成されました。次の設定で`output: standalone`のみを変更しました。
2. `pnpm run build`を実行します。正常に終了するはずです。
3. ビルドが完了したら`pnpm run dev`を実行するとエラーが発生します。

### 現在の動作と期待される動作

`next/dist/pages/_app`モジュールが見つからないというエラーが発生し、ローカルサーバーを実行できません。

ローカルサーバーを実行するためにはノードモジュールを削除して再インストールする必要がありますが、ビルドを行うたびにノードモジュールを削除するプロセスを繰り返す必要があります。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Home
  利用可能なメモリ (MB): 16280
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.11.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.12.3
関連パッケージ:
  next: 14.2.18 // 古いバージョンが検出されました (最新は15.0.3)、アップグレードを強く推奨します！
  eslint-config-next: 14.2.18
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、出力（エクスポート/スタンドアロン）

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

▲ Next.js 15.0.4-canary.13でもテストしましたが、エラーは持続します。
npmでテストしたところ、エラーは発生しなかったため、pnpmに関連しているようです。"
S1,P1,Query parameters incorrect when navigating from App Router to Pages Router,"### Link to the code that reproduces this issue

https://github.com/ledbetterljoshua/link-bug-reproduction

### To Reproduce

### Live Demo
https://link-bug-reproduction.vercel.app/

### Repository
https://github.com/ledbetterljoshua/link-bug-reproduction

### Steps to reproduce
1. Start on the home page (App Router)
2. Click any of the ""pages route"" links
3. Observe that regardless of which link you click, you always get the query parameter from the first link (`link=1`)

### Current vs. Expected behavior

### Current behavior
Each Link component should navigate to the Pages Router page with its specified query parameter intact:
- Clicking ""pages route link 1"" should navigate to `/pages-route?link=1`
- Clicking ""pages route link 2"" should navigate to `/pages-route?link=2`
- Clicking ""pages route link 3"" should navigate to `/pages-route?link=3`

### Actual behavior
- First click works correctly (navigates to `/pages-route?link=1`)
- All subsequent clicks also navigate to `/pages-route?link=1`, ignoring their specified query parameters

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Thu Jun 20 20:38:33 PDT 2024; root:xnu-11215.0.115.501.3~1/RELEASE_ARM64_T8112
  Available memory (MB): 24576
  Available CPU cores: 8
Binaries:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.17
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation, Pages Router

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

## Description
When navigating from a page in the App Router to a page in the Pages Router using Next.js Link components, query parameters are not being properly maintained. The first query parameter encountered becomes ""sticky"" and is used for all subsequent navigations to the Pages Router page, regardless of the actual query parameters specified in the Links and in the DOM.

### Additional observations
- I tested the v15.0.4-canary.13 version and got the same result.
- This issue does not occur in local development. It only occurs on vercel.
- This only occurs when navigating from App Router to Pages Router
- Links to App Router pages work correctly (query parameters are maintained)
- Opening links in new tabs works correctly (query parameters are maintained)
- This issue is blocking migration from Pages Router to App Router in our production application

## Environment
- Next.js version: 15.0.3
- React version: 19.0.0-rc-66855b96-20241106
- Node.js version: v20.10.0

## Notes
This appears to be a client-side navigation issue, as:
1. Server-side navigation (new tabs) works correctly
2. The DOM shows the correct href attributes on the links, but the navigation results are incorrect

Would appreciate guidance on whether this is a known issue or if there's a recommended workaround while we gradually migrate from Pages Router to App Router.","タイトル:
アプリルーターからページルーターに移動する際のクエリパラメータが不正確","本文:
### この問題を再現するコードへのリンク

https://github.com/ledbetterljoshua/link-bug-reproduction

### 再現手順

### ライブデモ
https://link-bug-reproduction.vercel.app/

### リポジトリ
https://github.com/ledbetterljoshua/link-bug-reproduction

### 再現手順
1. ホームページ（アプリルーター）から始める
2. 任意の「ページルート」リンクをクリックする
3. どのリンクをクリックしても、常に最初のリンクのクエリパラメータ（`link=1`）が取得されることを確認する

### 現在の動作と期待される動作

### 現在の動作
各リンクコンポーネントは、指定されたクエリパラメータを保持したままページルーターのページに移動する必要があります：
- 「ページルートリンク1」をクリックすると、`/pages-route?link=1`に移動するべきです
- 「ページルートリンク2」をクリックすると、`/pages-route?link=2`に移動するべきです
- 「ページルートリンク3」をクリックすると、`/pages-route?link=3`に移動するべきです

### 実際の動作
- 最初のクリックは正しく動作します（`/pages-route?link=1`に移動）
- その後のすべてのクリックも`/pages-route?link=1`に移動し、指定されたクエリパラメータを無視します

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Thu Jun 20 20:38:33 PDT 2024; root:xnu-11215.0.115.501.3~1/RELEASE_ARM64_T8112
  利用可能メモリ (MB): 24576
  利用可能CPUコア: 8
バイナリ：
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.17
  pnpm: N/A
関連パッケージ：
  next: 15.0.3 // 最新の利用可能バージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション、ページルーター

### 影響を受けるステージはどれですか？（該当するすべてを選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

## 説明
アプリルーターのページからページルーターのページにNext.jsのリンクコンポーネントを使用して移動する際、クエリパラメータが正しく保持されていません。最初に遭遇したクエリパラメータが「スティッキー」になり、リンクやDOMで指定された実際のクエリパラメータに関係なく、すべての後続のページルーターへのナビゲーションに使用されます。

### 追加の観察
- v15.0.4-canary.13バージョンをテストしましたが、同じ結果が得られました。
- この問題はローカル開発では発生しません。Vercelでのみ発生します。
- アプリルーターからページルーターに移動する際にのみ発生します。
- アプリルーターのページへのリンクは正しく動作します（クエリパラメータが保持されます）。
- 新しいタブでリンクを開くと正しく動作します（クエリパラメータが保持されます）。
- この問題は、私たちの本番アプリケーションでのページルーターからアプリルーターへの移行を妨げています。

## 環境
- Next.jsバージョン: 15.0.3
- Reactバージョン: 19.0.0-rc-66855b96-20241106
- Node.jsバージョン: v20.10.0

## ノート
これはクライアントサイドのナビゲーションの問題のようです。なぜなら：
1. サーバーサイドのナビゲーション（新しいタブ）は正しく動作します。
2. DOMはリンクの正しいhref属性を示していますが、ナビゲーション結果は不正確です。

これは既知の問題か、ページルーターからアプリルーターへの移行を徐々に進める間に推奨される回避策があるかについてのガイダンスをいただけるとありがたいです。"
S1,P1,Loading with parallel routes only works on root,"### Link to the code that reproduces this issue

https://github.com/bananashell/nextjs-parallel-route-loading-issue

### To Reproduce

1. next dev
2. hard reload localhost:3000 (loading of header is done as expected)
3. hard reload localhost:3000/a
4. loading of header is skipped and entier page results in being sync

### Current vs. Expected behavior

If a loading.tsx is added to the root of a parallel route it only uses that suspense boundary on the root level.

Give this tree

```
/ (root)
    @header
        page.tsx
        default.tsx
        loading.tsx
    /a
        page.tsx
        loading.tsx
    /b
        page.tsx
        loading.tsx
```

-   navigating to `/` will use the loading.tsx if `@header/page.tsx` is async
-   navigating to `/a`directly would not use the loading.tsx for `@header` and prevent streaming from happening

The only solution I've found for this is to manually add a Suspense boundary to `default.tsx`

```tsx
// @header/default.tsx
import HeaderSlot from ""./page"";
import { Suspense } from ""react"";
import Loading from ""./loading"";

export default function DefaultSlot() {
    return (
        <Suspense fallback={<Loading />}>
            <HeaderSlot />
        </Suspense>
    );
}
```


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: unknown
  Available memory (MB): 36864
  Available CPU cores: 14
Binaries:
  Node: 22.6.0
  npm: N/A
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
ルートでのみ並列ルートによるローディングが機能する","本文:
### この問題を再現するコードへのリンク

https://github.com/bananashell/nextjs-parallel-route-loading-issue

### 再現手順

1. next dev
2. localhost:3000をハードリロード（ヘッダーのローディングは期待通りに完了）
3. localhost:3000/aをハードリロード
4. ヘッダーのローディングがスキップされ、ページ全体が同期的になる

### 現在の動作と期待される動作

並列ルートのルートにloading.tsxを追加すると、そのサスペンス境界はルートレベルでのみ使用されます。

このツリーを考えてみてください

```
/ (ルート)
    @header
        page.tsx
        default.tsx
        loading.tsx
    /a
        page.tsx
        loading.tsx
    /b
        page.tsx
        loading.tsx
```

-   `/`にナビゲートすると、`@header/page.tsx`が非同期の場合、loading.tsxが使用されます
-   `/a`に直接ナビゲートすると、`@header`のloading.tsxは使用されず、ストリーミングが発生しない

私が見つけた唯一の解決策は、default.tsxに手動でサスペンス境界を追加することです。

```tsx
// @header/default.tsx
import HeaderSlot from ""./page"";
import { Suspense } from ""react"";
import Loading from ""./loading"";

export default function DefaultSlot() {
    return (
        <Suspense fallback={<Loading />}>
            <HeaderSlot />
        </Suspense>
    );
}
```

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: 不明
  利用可能なメモリ (MB): 36864
  利用可能なCPUコア: 14
バイナリ:
  Node: 22.6.0
  npm: N/A
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 検出された最新の利用可能バージョンは15.0.3です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

並列およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,querystring is not working to alternates canonical and languages in generateMetadata,"### Link to the code that reproduces this issue

https://github.com/richg0ld/generate-metadata-bug

### To Reproduce

In Next.js 15, I am trying to use the query string in generateMetadata's alternates.canonical and alternates.languages, but it is not being applied.

How can I ensure that querystring is not removed?

The sample code is as follows.

```
export async function generateMetadata(): Promise<Metadata> {
  return {
    metadataBase: new URL('http://localhost:3000'),
    title: t('title'),
    alternates: {
      canonical: '/',
      languages: {
        'x-default': '/',
        en: '/?hl=en_US',
        ko: '/?hl=ko_KR',
      },
    },
  };
}
```

### Current vs. Expected behavior

The expected behavior is as follows,
```
<link rel=""alternate"" hreflang=""x-default"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""en"" href=""http://localhost:3000/?hl=en_US"">
<link rel=""alternate"" hreflang=""ko"" href=""http://localhost:3000/?hl=ko_KR"">
```

However, the result is as follows,
```
<link rel=""alternate"" hreflang=""x-default"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""en"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""ko"" href=""http://localhost:3000"">
```

### Provide environment information

```bash
nextjs:15.0.3
reactjs:19.0.0-rc
react-dom:19.0.0-rc
```


### Which area(s) are affected? (Select all that apply)

Metadata

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Other (Deployed)

### Additional context

It would be helpful to have an 'other' option for link tags, similar to the 'other' option for handling meta tags. For example, having a method like this would be useful.
```
...,
other: [
  {
    hreflang: ""en"",
    rel: ""alternate"",
    href=""/?hl=en_US""
  },
  ...
]
```
having a method like this would be useful.",クエリ文字列がgenerateMetadataのalternates.canonicalおよびalternates.languagesに適用されない問題,"### コードのリンク

https://github.com/richg0ld/generate-metadata-bug

### 再現手順

Next.js 15で、generateMetadataのalternates.canonicalとalternates.languagesでクエリ文字列を使用しようとしていますが、適用されていません。

クエリ文字列が削除されないようにするにはどうすればよいですか？

サンプルコードは以下の通りです。

```
export async function generateMetadata(): Promise<Metadata> {
  return {
    metadataBase: new URL('http://localhost:3000'),
    title: t('title'),
    alternates: {
      canonical: '/',
      languages: {
        'x-default': '/',
        en: '/?hl=en_US',
        ko: '/?hl=ko_KR',
      },
    },
  };
}
```

### 現在の動作と期待される動作

期待される動作は以下の通りです。
```
<link rel=""alternate"" hreflang=""x-default"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""en"" href=""http://localhost:3000/?hl=en_US"">
<link rel=""alternate"" hreflang=""ko"" href=""http://localhost:3000/?hl=ko_KR"">
```

しかし、結果は以下の通りです。
```
<link rel=""alternate"" hreflang=""x-default"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""en"" href=""http://localhost:3000"">
<link rel=""alternate"" hreflang=""ko"" href=""http://localhost:3000"">
```

### 環境情報の提供

```bash
nextjs:15.0.3
reactjs:19.0.0-rc
react-dom:19.0.0-rc
```

### 影響を受ける領域はどれですか？（すべて選択）

メタデータ

### 影響を受けるステージはどれですか？（すべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

メタタグの処理に関する「その他」オプションのように、リンクタグにも「その他」オプションがあると便利です。例えば、以下のようなメソッドが役立ちます。
```
...,
other: [
  {
    hreflang: ""en"",
    rel: ""alternate"",
    href=""/?hl=en_US""
  },
  ...
]
```
このようなメソッドが役立ちます。"
S1,P1,Dynamic Sitemap throwing 404 error on Nextjs 15,"### Link to the code that reproduces this issue

https://github.com/umair-mirza/pakcrunch-new/blob/main/src/app/sitemap.ts

### To Reproduce

I have created a dynamic sitemap for my Nextjs 15 app in the following path:

src > app > sitemap.ts

I have created the sitemap according to the example quoted in the Nextjs documentation:
https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap

Here's the code:

```
import prisma from ""@/lib/prisma"";
import type { MetadataRoute } from ""next"";

export const revalidate = 86400;

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const data = await prisma.post.findMany({
    select: {
      slug: true,
    },
  });

  const posts = data.map((item) => ({
    url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/posts/${item.slug}`,
    lastModified: new Date(),
    changeFrequency: ""monthly"" as ""monthly"",
    priority: 0.5,
  }));

  return [
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/posts`,
      lastModified: new Date(),
      changeFrequency: ""daily"",
      priority: 1,
    },
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/terms-of-use`,
      priority: 0.1,
    },
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/contact-us`,
      priority: 0.2,
    },
    ...posts,
  ];
}
```

### Current vs. Expected behavior

I have created a dynamic sitemap for my Nextjs 15 app in the following path:

src > app > sitemap.ts

I have created the sitemap according to the example quoted in the Nextjs documentation:
https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap

However, when I visit the url: localhost:3000/sitemap.xml
Same result on production URL.

it returns 404.

![image](https://github.com/user-attachments/assets/82b9429b-2a7b-49fe-90f6-b94e9545ca0a)


### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
  Available memory (MB): 16226
  Available CPU cores: 8
Binaries:
  Node: 20.16.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-rc.0 // Latest available version is detected (15.0.0-rc.0).
  eslint-config-next: 15.0.0-rc.0
  react: 19.0.0-rc-f994737d14-20240522
  react-dom: 19.0.0-rc-f994737d14-20240522
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",動的サイトマップがNextjs 15で404エラーを返す,"### この問題を再現するコードへのリンク

https://github.com/umair-mirza/pakcrunch-new/blob/main/src/app/sitemap.ts

### 再現手順

私は次のパスにNextjs 15アプリの動的サイトマップを作成しました：

src > app > sitemap.ts

私はNextjsのドキュメントに引用されている例に従ってサイトマップを作成しました：
https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap

こちらがコードです：

```
import prisma from ""@/lib/prisma"";
import type { MetadataRoute } from ""next"";

export const revalidate = 86400;

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const data = await prisma.post.findMany({
    select: {
      slug: true,
    },
  });

  const posts = data.map((item) => ({
    url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/posts/${item.slug}`,
    lastModified: new Date(),
    changeFrequency: ""monthly"" as ""monthly"",
    priority: 0.5,
  }));

  return [
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/posts`,
      lastModified: new Date(),
      changeFrequency: ""daily"",
      priority: 1,
    },
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/terms-of-use`,
      priority: 0.1,
    },
    {
      url: `${process.env.NEXT_PUBLIC_PRODUCTION_URL}/contact-us`,
      priority: 0.2,
    },
    ...posts,
  ];
}
```

### 現在の動作と期待される動作

私は次のパスにNextjs 15アプリの動的サイトマップを作成しました：

src > app > sitemap.ts

私はNextjsのドキュメントに引用されている例に従ってサイトマップを作成しました：
https://nextjs.org/docs/app/api-reference/file-conventions/metadata/sitemap

しかし、URLにアクセスすると：localhost:3000/sitemap.xml
本番URLでも同じ結果です。

404が返されます。

![image](https://github.com/user-attachments/assets/82b9429b-2a7b-49fe-90f6-b94e9545ca0a)

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 11 Home
  利用可能なメモリ (MB): 16226
  利用可能なCPUコア: 8
バイナリ：
  Node: 20.16.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.0-rc.0 // 最新の利用可能なバージョンが検出されました (15.0.0-rc.0)。
  eslint-config-next: 15.0.0-rc.0
  react: 19.0.0-rc-f994737d14-20240522
  react-dom: 19.0.0-rc-f994737d14-20240522
  typescript: 5.5.4
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

不明

### 影響を受けるステージはどれですか？（すべて選択）

next dev（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,"Pages router with middleware (on vercel) - 404 results returning 200 when prefetched ","### Link to the code that reproduces this issue

https://github.com/magicspon/next-link-test

### To Reproduce

Build and deploy the app to vercel.
Go to the URL
Click on the ""Broken link"" button.
Observe, the 404 page is not shown.

This only happens when running on vercel, it's fine on localhost.

It also only happens when there is middleware on the site, even though these urls aren't matched by the middleware

### Current vs. Expected behavior

When clicking on a link that 404's, I would expect to see the 404 page.



### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 8.14.0
Relevant Packages:
  next: 15.0.4-canary.11 // Latest available version is detected (15.0.4-canary.11).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-7ac8e612-20241113
  react-dom: 19.0.0-rc-7ac8e612-20241113
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Middleware, Pages Router

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

I've tested against the latest v14 release, the latest 15 release and the latest 15 canary release.

https://github.com/vercel/next.js/issues/57207
https://github.com/vercel/next.js/issues/56222
","タイトル:
ミドルウェアを使用したページルーター（Vercel上） - プリフェッチされた404結果が200を返す","本文:
### この問題を再現するコードへのリンク

https://github.com/magicspon/next-link-test

### 再現手順

アプリをビルドしてVercelにデプロイします。  
URLにアクセスします。  
「壊れたリンク」ボタンをクリックします。  
404ページが表示されないことに注意してください。

これはVercelで実行しているときのみ発生し、localhostでは問題ありません。

また、これらのURLがミドルウェアによって一致しない場合でも、サイトにミドルウェアがあるときのみ発生します。

### 現在の動作と期待される動作

404エラーのリンクをクリックしたときに、404ページが表示されることを期待しています。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 8.14.0
関連パッケージ:
  next: 15.0.4-canary.11 // 最新の利用可能なバージョンが検出されました (15.0.4-canary.11)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-7ac8e612-20241113
  react-dom: 19.0.0-rc-7ac8e612-20241113
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app、ミドルウェア、ページルーター

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

最新のv14リリース、最新の15リリース、最新の15カナリアリリースに対してテストしました。

https://github.com/vercel/next.js/issues/57207  
https://github.com/vercel/next.js/issues/56222"
S1,P1,"Middleware does not add nonce when deployed to AWS amplify, but works well on local development","### Link to the code that reproduces this issue

https://github.com/peterochieng/csp-test

### To Reproduce

1. Add middleware for Adding CSP directives. 
`import { NextRequest, NextResponse } from 'next/server'

export const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
 
export function middleware(request: NextRequest) {
  
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'unsafe-eval';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
    connect-src 'self' https://example.com https://ipapi.co/json/;
`
  // Replace newline characters and spaces
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()
 
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)
 
  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )
 
  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )
 
  return response
}

export const config = {
  matcher: [
    '/(.*)',
    '/', // explicit matcher for root route
  ],
}
`
2. Run the application on local dev using npm run dev. Test and you'll see it works fine. Open network tab in dev tools and check the response. All scripts, have the nonce added on local dev. 

3. Deploy your sample application to AWS amplify. You will get a white screen or screen with no content with errors in console in devTools.  I have attached screenshot of error.
![aws amplify middlewawre error](https://github.com/user-attachments/assets/b8c11c4a-06f3-4a3d-a077-60ecea2507ba)


### Current vs. Expected behavior

I expect the web app to load well without issues since CSP addition is done by middleware. But, what I get is a blank screen with an error. This error.
![aws amplify middlewawre error](https://github.com/user-attachments/assets/526b9a5c-fe4a-4c35-a3a6-b1946077dead)


### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro N
Binaries:
  Node: 20.9.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.0.4
  eslint-config-next: 14.0.4
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

_No response_",ミドルウェアはAWS Amplifyにデプロイするとノンスを追加しませんが、ローカル開発では正常に動作します,"### この問題を再現するためのコードへのリンク

https://github.com/peterochieng/csp-test

### 再現手順

1. CSPディレクティブを追加するためのミドルウェアを追加します。 
`import { NextRequest, NextResponse } from 'next/server'

export const nonce = Buffer.from(crypto.randomUUID()).toString('base64')
 
export function middleware(request: NextRequest) {
  
  const cspHeader = `
    default-src 'self';
    script-src 'self' 'nonce-${nonce}' 'unsafe-eval';
    style-src 'self' 'unsafe-inline';
    img-src 'self' blob: data:;
    font-src 'self';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    frame-ancestors 'none';
    upgrade-insecure-requests;
    connect-src 'self' https://example.com https://ipapi.co/json/;
`
  // 改行文字とスペースを置き換えます
  const contentSecurityPolicyHeaderValue = cspHeader
    .replace(/\s{2,}/g, ' ')
    .trim()
 
  const requestHeaders = new Headers(request.headers)
  requestHeaders.set('x-nonce', nonce)
 
  requestHeaders.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )
 
  const response = NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  })
  response.headers.set(
    'Content-Security-Policy',
    contentSecurityPolicyHeaderValue
  )
 
  return response
}

export const config = {
  matcher: [
    '/(.*)',
    '/', // ルートルートのための明示的なマッチャー
  ],
}
`
2. npm run devを使用してローカル開発でアプリケーションを実行します。テストすると、正常に動作することがわかります。開発ツールのネットワークタブを開いて、レスポンスを確認します。すべてのスクリプトにノンスが追加されていることがわかります。

3. サンプルアプリケーションをAWS Amplifyにデプロイします。白い画面またはコンソールにエラーが表示されたコンテンツのない画面が表示されます。エラーのスクリーンショットを添付しました。
![aws amplify middlewawre error](https://github.com/user-attachments/assets/b8c11c4a-06f3-4a3d-a077-60ecea2507ba) 

### 現在の動作と期待される動作

CSPの追加がミドルウェアによって行われているため、ウェブアプリが問題なく読み込まれることを期待しています。しかし、得られるのはエラーのある空白の画面です。このエラーです。
![aws amplify middlewawre error](https://github.com/user-attachments/assets/526b9a5c-fe4a-4c35-a3a6-b1946077dead) 

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro N
バイナリ:
  Node: 20.9.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.0.4
  eslint-config-next: 14.0.4
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するすべてを選択）

その他（デプロイ済み）

### 追加のコンテキスト

_なし_"
S1,P1,@import on CSS file not working when i use Turbopack,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/elegant-hodgkin-jrwltm?workspaceId=90948d01-dfc4-44b7-a979-f689d697bccf

### To Reproduce

I'm trying to import radix colors on my css file in a new Next 15 Project, but is not working (when i disable turbopack works fine): 

When there's just the colors: 
![image](https://github.com/user-attachments/assets/6bb5610e-1412-4eba-a198-48443975d54f)
The error on compile is: ""./src/app/globals.css:42:2
Module not found: Can't resolve '@radix-ui/colors/violet-dark-alpha'""

When i have Tailwind at the top:
![image](https://github.com/user-attachments/assets/7be51fab-af23-4ad1-b7e6-82414973fe2f)

The error changes to:
![image](https://github.com/user-attachments/assets/8dc32dbf-7a0f-4bac-b53a-c68d18b429de)



### Current vs. Expected behavior

Without turbopack works fine:
![image](https://github.com/user-attachments/assets/4c82ff7d-323f-4183-9623-94bc5be214e8)


### Provide environment information

```bash
Operating System:
  Platform: Ubuntu 24.04
Binaries:
  Node: 20.14.0
  bun: 1.1.34 (using only the package manager)
Relevant Packages:
  ""next"": ""15.0.3"",
  ""react"": ""19.0.0-rc-66855b96-20241106"",
  ""react-dom"": ""19.0.0-rc-66855b96-20241106""
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
Turbopackを使用しているとCSSファイルの@importが機能しない","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/elegant-hodgkin-jrwltm?workspaceId=90948d01-dfc4-44b7-a979-f689d697bccf

### 再現手順

新しいNext 15プロジェクトでCSSファイルにradixカラーをインポートしようとしていますが、機能しません（turbopackを無効にすると正常に動作します）：

色だけの時:
![image](https://github.com/user-attachments/assets/6bb5610e-1412-4eba-a198-48443975d54f)
コンパイル時のエラーは: ""./src/app/globals.css:42:2
モジュールが見つかりません: '@radix-ui/colors/violet-dark-alpha'を解決できません""

Tailwindが上部にある時:
![image](https://github.com/user-attachments/assets/7be51fab-af23-4ad1-b7e6-82414973fe2f)

エラーが次のように変わります:
![image](https://github.com/user-attachments/assets/8dc32dbf-7a0f-4bac-b53a-c68d18b429de)

### 現在の動作と期待される動作

turbopackなしでは正常に動作します:
![image](https://github.com/user-attachments/assets/4c82ff7d-323f-4183-9623-94bc5be214e8)

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: Ubuntu 24.04
バイナリ:
  Node: 20.14.0
  bun: 1.1.34 (パッケージマネージャのみ使用)
関連パッケージ:
  ""next"": ""15.0.3"",
  ""react"": ""19.0.0-rc-66855b96-20241106"",
  ""react-dom"": ""19.0.0-rc-66855b96-20241106""
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,Bug/inconsistency with `dynamicIO` and client-side hooks in dynamic segment,"### Link to the code that reproduces this issue

https://github.com/amannn/nextjs-bug-repro-dynamicio-client-hooks/commit/6f8f90deff9f2661d1dc6357db870405f983dbbb

### To Reproduce

1. Clone https://github.com/amannn/nextjs-bug-repro-dynamicio-client-hooks/
2. Run `pnpm dev` and open e.g. http://localhost:300/en – works as expected
3. Run `pnpm build` – fails

### Current vs. Expected behavior

I'm not sure what the expected behavior is, but at least aligning dev and prod seems like it should be the case.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.12.3
Relevant Packages:
  next: 15.0.4-canary.8 // Latest available version is detected (15.0.4-canary.8).
  eslint-config-next: 15.0.4-canary.8
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

dynamicIO

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_","タイトル:
`dynamicIO` と動的セグメントにおけるクライアントサイドフックのバグ/不整合","本文:
### この問題を再現するコードへのリンク

https://github.com/amannn/nextjs-bug-repro-dynamicio-client-hooks/commit/6f8f90deff9f2661d1dc6357db870405f983dbbb

### 再現手順

1. https://github.com/amannn/nextjs-bug-repro-dynamicio-client-hooks/ をクローンします。
2. `pnpm dev` を実行し、例えば http://localhost:300/en を開きます - 期待通りに動作します。
3. `pnpm build` を実行します - 失敗します。

### 現在の動作と期待される動作

期待される動作が何であるかはわかりませんが、少なくとも開発環境と本番環境が一致することは必要だと思います。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:00 PDT 2024; root:xnu-10063.141.2~1/RELEASE_X86_64
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 12
バイナリ:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.12.3
関連パッケージ:
  next: 15.0.4-canary.8 // 検出された最新の利用可能バージョン (15.0.4-canary.8)。
  eslint-config-next: 15.0.4-canary.8
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

dynamicIO

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

_返答なし_"
S1,P1,VSCode debugging error when using Yarn PnP with NextJS 15,"### Link to the code that reproduces this issue

https://github.com/IsaacAndela/nextjs-yarn-vscode-debug-error

### To Reproduce

1. Create a new NextJS app with Yarn `yarn dlx create-next-app@canary` and answer the default to all questions.
2. This should result in `.pnp.cjs`, `.pnp.loader.mjs` and `.yarn` in the root of the new project. If not, run `yarn install`.
3. Open the new project in Visual Studio Code.
4. Create a `.vscode/launch.json` file with the following content:
```jsonc
{
	""version"": ""0.2.0"",
	""configurations"": [
		{
			// Basicly the same server side debugging configuration as the official documentation:
			// https://nextjs.org/docs/app/building-your-application/configuring/debugging#debugging-with-vs-code
			""name"": ""Type: Node Terminal"",
			""type"": ""node-terminal"",
			""request"": ""launch"",
			""command"": ""yarn run dev""
		},
		{
			// An alternative way to configure the debugging.
			// This doesn't work either with NextJS 15.
			""name"": ""Type: Node"",
			""request"": ""launch"",
			""runtimeExecutable"": ""yarn"",
			""runtimeArgs"": [""run"", ""dev""],
			""type"": ""node"",
			// This is only here to make debugging easier
			// The error can also be reproduced without the
			// integratedTerminal
			""console"": ""integratedTerminal""
		}
	]
}
```
5. Run `yarn run dev` in the terminal. This should work fine.
6. In VSCode run `Debug: Select and Start Debugging` from the Command Palette (`cmd+shift+p` or `ctrl-shift-p`) and choose either launch configuration.
7. This should result in the following error:
```
node:internal/modules/cjs/loader:1252
  throw err;

Error: Cannot find module '/Users/me/nextjs-yarn-vscode-debug-error/.pnp.cjs /Users/me/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js'
Require stack:
- internal/preload
    at Function._resolveFilename (node:internal/modules/cjs/loader:1249:15)
    at Function._load (node:internal/modules/cjs/loader:1075:27)
    at TracingChannel.traceSync (node:diagnostics_channel:315:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)
    at Module.require (node:internal/modules/cjs/loader:1340:12)
    at node:internal/modules/cjs/loader:1824:12
    at loadPreloadModules (node:internal/process/pre_execution:729:5)
    at setupUserModules (node:internal/process/pre_execution:207:5)
    at prepareExecution (node:internal/process/pre_execution:160:5)
    at prepareMainThreadExecution (node:internal/process/pre_execution:55:10) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ 'internal/preload' ]
}
```

### Current vs. Expected behavior

I expect to be able to debug my NextJS 15 application  in VSCode using Yarn PnP.

However this results in the following error on startup:

```
node:internal/modules/cjs/loader:1252
  throw err;

Error: Cannot find module '/Users/me/nextjs-yarn-vscode-debug-error/.pnp.cjs /Users/me/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js'
Require stack:
- internal/preload
    at Function._resolveFilename (node:internal/modules/cjs/loader:1249:15)
    at Function._load (node:internal/modules/cjs/loader:1075:27)
    at TracingChannel.traceSync (node:diagnostics_channel:315:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)
    at Module.require (node:internal/modules/cjs/loader:1340:12)
    at node:internal/modules/cjs/loader:1824:12
    at loadPreloadModules (node:internal/process/pre_execution:729:5)
    at setupUserModules (node:internal/process/pre_execution:207:5)
    at prepareExecution (node:internal/process/pre_execution:160:5)
    at prepareMainThreadExecution (node:internal/process/pre_execution:55:10) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ 'internal/preload' ]
}
```

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:02:27 PDT 2024; root:xnu-11215.41.3~2/RELEASE_X86_64
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: 4.5.1
  pnpm: N/A
Relevant Packages:
  next: 15.0.4-canary.6
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

The error first occurs in release [v14.3.0-canary.23](https://github.com/vercel/next.js/releases/tag/v14.3.0-canary.23).

Presumably the merge request [NODE_OPTIONS updates](https://github.com/vercel/next.js/pull/65006) caused the error.

The error was changed after release [v14.3.0-canary.26](https://github.com/vercel/next.js/releases/tag/v14.3.0-canary.26).

Presumably the merge request [Ensure escaped string are parsed in NODE_OPTIONS](https://github.com/vercel/next.js/pull/65046) changed the error.",VSCodeでYarn PnPを使用したNextJS 15のデバッグエラー,"### この問題を再現するためのコードへのリンク

https://github.com/IsaacAndela/nextjs-yarn-vscode-debug-error

### 再現手順

1. Yarnを使用して新しいNextJSアプリを作成します `yarn dlx create-next-app@canary` すべての質問にデフォルトで回答します。
2. これにより、新しいプロジェクトのルートに`.pnp.cjs`、`.pnp.loader.mjs`、および`.yarn`が生成されるはずです。そうでない場合は、`yarn install`を実行します。
3. Visual Studio Codeで新しいプロジェクトを開きます。
4. 次の内容で`.vscode/launch.json`ファイルを作成します：
```jsonc
{
	""version"": ""0.2.0"",
	""configurations"": [
		{
			// 基本的には公式ドキュメントと同じサーバーサイドデバッグ設定：
			// https://nextjs.org/docs/app/building-your-application/configuring/debugging#debugging-with-vs-code
			""name"": ""Type: Node Terminal"",
			""type"": ""node-terminal"",
			""request"": ""launch"",
			""command"": ""yarn run dev""
		},
		{
			// デバッグを設定するための別の方法。
			// これもNextJS 15では動作しません。
			""name"": ""Type: Node"",
			""request"": ""launch"",
			""runtimeExecutable"": ""yarn"",
			""runtimeArgs"": [""run"", ""dev""],
			""type"": ""node"",
			// これはデバッグを容易にするためだけにここにあります
			// 統合ターミナルなしでもエラーは再現可能です
			""console"": ""integratedTerminal""
		}
	]
}
```
5. ターミナルで`yarn run dev`を実行します。これが正常に動作するはずです。
6. VSCodeでコマンドパレットから`Debug: Select and Start Debugging`を実行し（`cmd+shift+p`または`ctrl-shift-p`）、いずれかの起動構成を選択します。
7. これにより、次のエラーが発生します：
```
node:internal/modules/cjs/loader:1252
  throw err;

Error: Cannot find module '/Users/me/nextjs-yarn-vscode-debug-error/.pnp.cjs /Users/me/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js'
Require stack:
- internal/preload
    at Function._resolveFilename (node:internal/modules/cjs/loader:1249:15)
    at Function._load (node:internal/modules/cjs/loader:1075:27)
    at TracingChannel.traceSync (node:diagnostics_channel:315:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)
    at Module.require (node:internal/modules/cjs/loader:1340:12)
    at node:internal/modules/cjs/loader:1824:12
    at loadPreloadModules (node:internal/process/pre_execution:729:5)
    at setupUserModules (node:internal/process/pre_execution:207:5)
    at prepareExecution (node:internal/process/pre_execution:160:5)
    at prepareMainThreadExecution (node:internal/process/pre_execution:55:10) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ 'internal/preload' ]
}
```

### 現在の動作と期待される動作

私はYarn PnPを使用してVSCodeでNextJS 15アプリケーションをデバッグできることを期待しています。

しかし、これにより、起動時に次のエラーが発生します：

```
node:internal/modules/cjs/loader:1252
  throw err;

Error: Cannot find module '/Users/me/nextjs-yarn-vscode-debug-error/.pnp.cjs /Users/me/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/ms-vscode.js-debug/src/bootloader.js'
Require stack:
- internal/preload
    at Function._resolveFilename (node:internal/modules/cjs/loader:1249:15)
    at Function._load (node:internal/modules/cjs/loader:1075:27)
    at TracingChannel.traceSync (node:diagnostics_channel:315:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)
    at Module.require (node:internal/modules/cjs/loader:1340:12)
    at node:internal/modules/cjs/loader:1824:12
    at loadPreloadModules (node:internal/process/pre_execution:729:5)
    at setupUserModules (node:internal/process/pre_execution:207:5)
    at prepareExecution (node:internal/process/pre_execution:160:5)
    at prepareMainThreadExecution (node:internal/process/pre_execution:55:10) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [ 'internal/preload' ]
}
```

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: x64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:02:27 PDT 2024; root:xnu-11215.41.3~2/RELEASE_X86_64
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 12
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: 4.5.1
  pnpm: N/A
関連パッケージ:
  next: 15.0.4-canary.6
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: N/A
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）

### 追加のコンテキスト

このエラーはリリース[v14.3.0-canary.23](https://github.com/vercel/next.js/releases/tag/v14.3.0-canary.23)で初めて発生します。

おそらく、マージリクエスト[NODE_OPTIONSの更新](https://github.com/vercel/next.js/pull/65006)がエラーを引き起こしました。

エラーはリリース[v14.3.0-canary.26](https://github.com/vercel/next.js/releases/tag/v14.3.0-canary.26)の後に変更されました。

おそらく、マージリクエスト[エスケープされた文字列がNODE_OPTIONSで解析されることを保証する](https://github.com/vercel/next.js/pull/65046)がエラーを変更しました。"
S1,P1,Conditionally Rendering Form Component Causes Server Action Error,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/elastic-raman-mdp554

### To Reproduce

I attached the CodeSandbox for a minimal reproduction. I am purposely calling the action from onSubmit so that I can do both client-side and server-side validation. I removed explicit validation parts as it reproduces without it.
```
    <form
      ref={formRef}
      action={formAction}
      onSubmit={() => {
        formRef.current?.submit();
      }}
    >
      <div>
        <label htmlFor=""email"">Your email</label>
        <input id=""email"" name=""email"" type=""email"" required />
      </div>
      <button type=""submit"">Reset password</button>
    </form>
```

In my reproduction, I have 2 forms. If I use the `useState()` toggle to turn on/off the other form, I will get the following error:

<img width=""1233"" alt=""image"" src=""https://github.com/user-attachments/assets/fd0d39eb-2493-4165-9e11-785aa806a8b4"">

If I don't have the toggle, I won't get the error and I will see the server action complete:
<img width=""258"" alt=""image"" src=""https://github.com/user-attachments/assets/00481aad-e208-4e62-aa22-e300db0dd6d5"">

### Current vs. Expected behavior

I expect server actions to work regardless of whether there is conditional rendering of the component or not.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.4-canary.6 // Latest available version is detected (15.0.4-canary.6).
  eslint-config-next: N/A
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Someone else encountered the same scenario here: https://github.com/vercel/next.js/discussions/56234#discussioncomment-9554752",条件付きレンダリングのフォームコンポーネントがサーバーアクションエラーを引き起こす,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/elastic-raman-mdp554

### 再現手順

最小限の再現のためにCodeSandboxを添付しました。クライアントサイドとサーバーサイドの両方のバリデーションを行うために、意図的にonSubmitからアクションを呼び出しています。明示的なバリデーション部分は削除しましたが、それなしでも再現します。
```
    <form
      ref={formRef}
      action={formAction}
      onSubmit={() => {
        formRef.current?.submit();
      }}
    >
      <div>
        <label htmlFor=""email"">あなたのメールアドレス</label>
        <input id=""email"" name=""email"" type=""email"" required />
      </div>
      <button type=""submit"">パスワードをリセット</button>
    </form>
```

私の再現では、2つのフォームがあります。`useState()`トグルを使用して他のフォームをオン/オフにすると、次のエラーが発生します：

<img width=""1233"" alt=""image"" src=""https://github.com/user-attachments/assets/fd0d39eb-2493-4165-9e11-785aa806a8b4"">

トグルがない場合はエラーが発生せず、サーバーアクションが完了するのが見えます：
<img width=""258"" alt=""image"" src=""https://github.com/user-attachments/assets/00481aad-e208-4e62-aa22-e300db0dd6d5"">

### 現在の動作と期待される動作

条件付きレンダリングのコンポーネントがあるかどうかに関わらず、サーバーアクションが機能することを期待しています。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ：
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ：
  next: 15.0.4-canary.6 // 検出された最新の利用可能バージョン (15.0.4-canary.6)。
  eslint-config-next: N/A
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.3.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

他の誰かが同じシナリオに遭遇しました： https://github.com/vercel/next.js/discussions/56234#discussioncomment-9554752"
S1,P1,Failed to parse source map: TypeError: Cannot read properties of undefined (reading 'bold') for deno,"### Link to the code that reproduces this issue

https://github.com/howdoicomputer/issue-reproduction

### To Reproduce

1. Create a new project and add

```
import OpenAI from 'openai';

const client = new OpenAI();
```

To the top of `app/page.tsx`

2. `deno run dev`

3. Watch app crash when the index page is loaded

### Current vs. Expected behavior

You can create an openai client without the entire thing falling apart.

### Provide environment information

```bash
Platform: darwin
  Arch: arm64
  Version: 24.1.0
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.11.1
  npm: 10.8.2
  Yarn: N/A


❯ deno --version
deno 2.0.6 (stable, release, aarch64-apple-darwin)
v8 12.9.202.13-rusty
typescript 5.6.2
```

```
❯ cat package.json
{
  ""name"": ""polarstomps"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""openai"": ""^4.71.1"",
    ""react"": ""19.0.0-rc-66855b96-20241106"",
    ""react-dom"": ""19.0.0-rc-66855b96-20241106"",
    ""next"": ""^15.0.3"",
    ""sharp"": ""^0.33.5"",
    ""zod"": ""^3.23.8"",
    ""chalk"": ""^5.3.0""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""15.0.3""
  },
  ""overrides"": {
    ""chalk"": ""^5.3.0""
  }
}
```
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I've been having this error pop up quite a bit that has been hard for me to track down.

Full stack trace:

```
Failed to parse source map: TypeError: Cannot read properties of undefined (reading 'bold')
    at getDefs (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:5496)
    at highlight (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:6631)
    at codeFrameColumns (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1:77498)
    at getOriginalCodeFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/shared.js:70:44)
    at createOriginalStackFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:146:61)
    at eventLoopTick (ext:core/01_core.js:175:7)
    at async (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:286:52)
    at async HotReloaderWebpack.run (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/dev/hot-reloader-webpack.js:317:13)
    at async handleRequest (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:214:43)
    at async requestHandlerImpl (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:384:13)
    at async ServerImpl.requestListener (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/start-server.js:142:13)
Failed to parse source map: TypeError: Cannot read properties of undefined (reading 'bold')
    at getDefs (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:5496)
    at highlight (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:6631)
    at codeFrameColumns (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1:77498)
    at getOriginalCodeFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/shared.js:70:44)
    at createOriginalStackFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:146:61)
    at eventLoopTick (ext:core/01_core.js:175:7)
    at async (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:286:52)
    at async HotReloaderWebpack.run (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/dev/hot-reloader-webpack.js:317:13)
    at async handleRequest (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:214:43)
    at async requestHandlerImpl (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:384:13)
    at async ServerImpl.requestListener (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/start-server.js:142:13)
```

I initially had this problem when I was trying to create an API route that wrapped some openai calls. Whenever I would instantiate a new openai client I would get a stacktrace that led with `Failed to parse source map: TypeError: Cannot read properties of undefined (reading 'bold')`. I ended up moving that functionality to a dedicated FastAPI backend but now I'm getting that error again and I'm not sure what the origin is now.

The only Google reference I have for that error points to chalk. Really confusing and hard to debug.","タイトル:
ソースマップの解析に失敗しました: TypeError: 未定義のプロパティを読み取れません ('bold') for deno","本文:
### この問題を再現するコードへのリンク

https://github.com/howdoicomputer/issue-reproduction

### 再現手順

1. 新しいプロジェクトを作成し、次のコードを追加します。

```
import OpenAI from 'openai';

const client = new OpenAI();
```

`app/page.tsx`の先頭に追加します。

2. `deno run dev`を実行します。

3. インデックスページが読み込まれるときにアプリがクラッシュするのを確認します。

### 現在の動作と期待される動作

アプリ全体が崩れることなく、openaiクライアントを作成できるはずです。

### 環境情報を提供してください

```bash
プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: 24.1.0
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.11.1
  npm: 10.8.2
  Yarn: N/A

❯ deno --version
deno 2.0.6 (stable, release, aarch64-apple-darwin)
v8 12.9.202.13-rusty
typescript 5.6.2
```

```
❯ cat package.json
{
  ""name"": ""polarstomps"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""openai"": ""^4.71.1"",
    ""react"": ""19.0.0-rc-66855b96-20241106"",
    ""react-dom"": ""19.0.0-rc-66855b96-20241106"",
    ""next"": ""^15.0.3"",
    ""sharp"": ""^0.33.5"",
    ""zod"": ""^3.23.8"",
    ""chalk"": ""^5.3.0""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""15.0.3""
  },
  ""overrides"": {
    ""chalk"": ""^5.3.0""
  }
}
```
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 利用可能な最新バージョンが検出されました (15.0.3)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？ (すべて選択)

不明

### 影響を受けるステージはどれですか？ (すべて選択)

next dev (ローカル)

### 追加のコンテキスト

このエラーが頻繁に発生しており、追跡が難しいです。

完全なスタックトレース:

```
ソースマップの解析に失敗しました: TypeError: 未定義のプロパティを読み取れません ('bold')
    at getDefs (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:5496)
    at highlight (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:6631)
    at codeFrameColumns (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1:77498)
    at getOriginalCodeFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/shared.js:70:44)
    at createOriginalStackFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:146:61)
    at eventLoopTick (ext:core/01_core.js:175:7)
    at async (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:286:52)
    at async HotReloaderWebpack.run (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/dev/hot-reloader-webpack.js:317:13)
    at async handleRequest (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:214:43)
    at async requestHandlerImpl (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:384:13)
    at async ServerImpl.requestListener (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/start-server.js:142:13)
ソースマップの解析に失敗しました: TypeError: 未定義のプロパティを読み取れません ('bold')
    at getDefs (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:5496)
    at highlight (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1848:6631)
    at codeFrameColumns (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/compiled/babel/bundle.js:1:77498)
    at getOriginalCodeFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/shared.js:70:44)
    at createOriginalStackFrame (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:146:61)
    at eventLoopTick (ext:core/01_core.js:175:7)
    at async (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/client/components/react-dev-overlay/server/middleware.js:286:52)
    at async HotReloaderWebpack.run (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/dev/hot-reloader-webpack.js:317:13)
    at async handleRequest (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:214:43)
    at async requestHandlerImpl (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/router-server.js:384:13)
    at async ServerImpl.requestListener (/Users/tylerhampton/workspace/polarstomps/node_modules/.deno/next@15.0.3/node_modules/next/dist/server/lib/start-server.js:142:13)
```

最初は、openaiの呼び出しをラップするAPIルートを作成しようとしたときにこの問題が発生しました。新しいopenaiクライアントをインスタンス化するたびに、`Failed to parse source map: TypeError: Cannot read properties of undefined (reading 'bold')`というスタックトレースが表示されました。その機能を専用のFastAPIバックエンドに移動しましたが、今またそのエラーが発生しており、現在の原因がわかりません。

そのエラーに関する唯一のGoogleの参照はchalkに関連しています。非常に混"
S1,P1,revalidatePath or revalidateTag does not execute internal revalidation logic if called inside a setTimeout nor does it throw an exception,"### Link to the code that reproduces this issue

https://github.com/trieb-work/nextjs-bug-revalidatetag-inside-settimeout

### To Reproduce

1. start the app with nodejs in production mode: `NODE_ENV=production VERCEL_ENV=production pnpm build && NODE_ENV=production VERCEL_ENV=production pnpm start`
2. open the index page http://localhost:3000 --> a random number will appear which will get cached
3. reload the index page: the same number is still present because it is cached
4. open http://localhost:3000/normal --> revalidatePath will get called for the index page 
5. open the index page --> a new number will be displayed because of the working revalidatePath
6. open http://localhost:3000/timeout --> revalidatePath will get called inside a setTimeout
7. open the index page --> the same old number is still present because revalidateTag/revalidatePath does not work inside of a setTimeout

### Current vs. Expected behavior

if revalidateTag/revalidatePath is used inside a setTimeout it does not have any effect (tested in nodejs), but still the remaining code inside the setTimeout is executed. I implemented my own cache handler (like here: https://nextjs.org/docs/app/api-reference/next-config-js/incrementalCacheHandlerPath) and could see that the revalidateTag function from the cache handler is never called if the nextjs revalidateTag function is called inside a setTimeout.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 22.6.0: Wed Jul  5 22:22:05 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.21
  pnpm: 8.15.8
Relevant Packages:
  next: 15.0.4-canary.5 // Latest available version is detected (15.0.4-canary.5).
  eslint-config-next: N/A
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Performance, Runtime

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

I have not tested it in deployed vercel env as we are self hosting using docker and nodejs.

I have also tested to wrap the setTimeout in an `unstable_after` function but this has not helped as well.

As a workaround the code can be rewritten to use a sleep/delay function (`const sleep = (ms: number) => new Promise((res) => setTimeout(res, ms));`) instead of a setTimout directly. Calling revalidateTag after the sleep function works as expected (`await sleep(100); revalidatePath(""/"")`)",再検証パスまたは再検証タグは、setTimeout内で呼び出された場合に内部再検証ロジックを実行せず、例外もスローしません,"### この問題を再現するコードへのリンク

https://github.com/trieb-work/nextjs-bug-revalidatetag-inside-settimeout

### 再現手順

1. プロダクションモードでnodejsを使用してアプリを起動します: `NODE_ENV=production VERCEL_ENV=production pnpm build && NODE_ENV=production VERCEL_ENV=production pnpm start`
2. インデックスページを開く http://localhost:3000 --> キャッシュされるランダムな数字が表示されます
3. インデックスページをリロードします: 同じ数字がまだ表示されます（キャッシュされているため）
4. http://localhost:3000/normal を開く --> インデックスページのためにrevalidatePathが呼び出されます 
5. インデックスページを開く --> 動作するrevalidatePathのおかげで新しい数字が表示されます
6. http://localhost:3000/timeout を開く --> setTimeout内でrevalidatePathが呼び出されます
7. インデックスページを開く --> setTimeout内ではrevalidateTag/revalidatePathが機能しないため、同じ古い数字がまだ表示されます

### 現在の動作と期待される動作

setTimeout内でrevalidateTag/revalidatePathが使用されると、効果がありません（nodejsでテスト済み）が、setTimeout内の残りのコードは実行されます。私は独自のキャッシュハンドラーを実装しました（ここを参照: https://nextjs.org/docs/app/api-reference/next-config-js/incrementalCacheHandlerPath）が、setTimeout内でnextjsのrevalidateTag関数が呼び出されると、キャッシュハンドラーのrevalidateTag関数は決して呼び出されないことがわかりました。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 22.6.0: Wed Jul  5 22:22:05 PDT 2023; root:xnu-8796.141.3~6/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.21
  pnpm: 8.15.8
関連パッケージ:
  next: 15.0.4-canary.5 // 検出された最新の利用可能バージョンは (15.0.4-canary.5) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.3.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（すべて該当するものを選択）

パフォーマンス、ランタイム

### 影響を受けるステージはどれですか？（すべて該当するものを選択）

その他（デプロイ済み）

### 追加のコンテキスト

デプロイされたvercel環境ではテストしていませんが、私たちはdockerとnodejsを使用して自己ホスティングしています。

setTimeoutを`unstable_after`関数でラップすることも試しましたが、効果はありませんでした。

回避策として、setTimeoutを直接使用する代わりにスリープ/遅延関数（`const sleep = (ms: number) => new Promise((res) => setTimeout(res, ms));`）を使用するようにコードを書き換えることができます。スリープ関数の後にrevalidateTagを呼び出すと、期待通りに動作します（`await sleep(100); revalidatePath(""/"")`）。"
S1,P1,[Turbopack] : GraphQL with turbopack,"### Link to the code that reproduces this issue

https://github.com/MersadHabibi/template-fullstack-nextjs-graphql

### To Reproduce

1. run ``` npm run dev ```
2. open ``` /api/graphql ``` route
3. see error

### Current vs. Expected behavior

I was creating a template and ran into trouble with turbopack.

Apollo Studio loads correctly when I don't use turbopack, but when use turbopack i get this error

```
{
  ""errors"": [
    {
      ""message"": ""module.require is not a function"",
      ""extensions"": {
        ""code"": ""INTERNAL_SERVER_ERROR"",
        ""stacktrace"": [
          ""TypeError: module.require is not a function"",
          ""    at createHash (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_9a9996._.js:4182:23)"",
          ""    at Object.html (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_@apollo_server_dist_4d2543._.js:2381:247)"",
          ""    at ApolloServer.executeHTTPGraphQLRequest (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_@apollo_server_dist_4d2543._.js:1948:77)""
        ]
      }
    }
  ]
}
```
![Screenshot 2024-11-11 122731](https://github.com/user-attachments/assets/6e0f6dc7-b77d-46f6-90e7-8d7d80a10ec9)

```
Landing page `html` function threw: TypeError: module.require is not a function
```
![Screenshot 2024-11-11 122810](https://github.com/user-attachments/assets/7bac9d42-288a-4ec9-b4e2-a1e940f0343e)

this is my repo link
[link](https://github.com/MersadHabibi/template-fullstack-nextjs-graphql)


### Provide environment information

```bash
Node.js v20.15.0

Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 12072
  Available CPU cores: 8
Binaries:
  Node: 20.15.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

its only happen on development mode with turbopack

route.ts
```typescript
import { ApolloServer } from ""@apollo/server"";
import {
  ApolloServerPluginLandingPageLocalDefault,
  ApolloServerPluginLandingPageProductionDefault,
} from ""@apollo/server/plugin/landingPage/default"";
import { startServerAndCreateNextHandler } from ""@as-integrations/next"";
import { PrismaClient } from ""@prisma/client"";
import fs from ""fs"";
import {
  DateTimeTypeDefinition,
  PositiveFloatTypeDefinition,
  PositiveIntTypeDefinition,
  URLTypeDefinition,
} from ""graphql-scalars"";
import { NextRequest } from ""next/server"";
import path from ""path"";
import resolvers from ""./resolvers"";

let typeDefs = """";

let plugins = [];
if (process.env.NODE_ENV === ""production"") {
  typeDefs = fs.readFileSync(
    path.join(path.resolve(), ""./src/app/api/graphql/schema.graphql""),
    ""utf-8"",
  );

  plugins = [
    ApolloServerPluginLandingPageProductionDefault({
      embed: true,
      graphRef: ""mersad.up@gmail.com"",
    }),
  ];
} else {
  typeDefs = fs.readFileSync(""./src/app/api/graphql/schema.graphql"", ""utf8"");

  plugins = [ApolloServerPluginLandingPageLocalDefault({ embed: true })];
}

const server = new ApolloServer({
  typeDefs: [
    typeDefs,
    DateTimeTypeDefinition,
    PositiveIntTypeDefinition,
    PositiveFloatTypeDefinition,
    URLTypeDefinition,
  ],
  resolvers: {
    ...resolvers,
    // DateTimeResolver,
    // PositiveFloatResolver,
    // PositiveIntResolver,
    // URLResolver,
  },
  plugins,
});

const handler = startServerAndCreateNextHandler<NextRequest>(server, {
  context: async (req) => {
    const prisma = new PrismaClient();

    prisma.$connect();

    return {
      req,
      prisma,
    };
  },
});

export async function GET(request: NextRequest) {
  return handler(request);
}

export async function POST(request: NextRequest) {
  return handler(request);
}

```",[Turbopack] : Turbopackを使用したGraphQL,"### この問題を再現するためのコードへのリンク

https://github.com/MersadHabibi/template-fullstack-nextjs-graphql

### 再現手順

1. ``` npm run dev ``` を実行
2. ``` /api/graphql ``` ルートを開く
3. エラーを確認する

### 現在の動作と期待される動作

テンプレートを作成しているときに、turbopackで問題が発生しました。

turbopackを使用しない場合、Apollo Studioは正しく読み込まれますが、turbopackを使用するとこのエラーが発生します。

```
{
  ""errors"": [
    {
      ""message"": ""module.require is not a function"",
      ""extensions"": {
        ""code"": ""INTERNAL_SERVER_ERROR"",
        ""stacktrace"": [
          ""TypeError: module.require is not a function"",
          ""    at createHash (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_9a9996._.js:4182:23)"",
          ""    at Object.html (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_@apollo_server_dist_4d2543._.js:2381:247)"",
          ""    at ApolloServer.executeHTTPGraphQLRequest (C:\\Users\\kimya\\Desktop\\templates\\test\\.next\\server\\chunks\\node_modules_@apollo_server_dist_4d2543._.js:1948:77)""
        ]
      }
    }
  ]
}
```
![Screenshot 2024-11-11 122731](https://github.com/user-attachments/assets/6e0f6dc7-b77d-46f6-90e7-8d7d80a10ec9)

```
ランディングページの `html` 関数がスローしました: TypeError: module.require is not a function
```
![Screenshot 2024-11-11 122810](https://github.com/user-attachments/assets/7bac9d42-288a-4ec9-b4e2-a1e940f0343e)

こちらが私のリポジトリのリンクです
[link](https://github.com/MersadHabibi/template-fullstack-nextjs-graphql)

### 環境情報を提供する

```bash
Node.js v20.15.0

オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 12072
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.15.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.3 // 検出された最新バージョンは (15.0.3) です。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

これはturbopackを使用した開発モードでのみ発生します。

route.ts
```typescript
import { ApolloServer } from ""@apollo/server"";
import {
  ApolloServerPluginLandingPageLocalDefault,
  ApolloServerPluginLandingPageProductionDefault,
} from ""@apollo/server/plugin/landingPage/default"";
import { startServerAndCreateNextHandler } from ""@as-integrations/next"";
import { PrismaClient } from ""@prisma/client"";
import fs from ""fs"";
import {
  DateTimeTypeDefinition,
  PositiveFloatTypeDefinition,
  PositiveIntTypeDefinition,
  URLTypeDefinition,
} from ""graphql-scalars"";
import { NextRequest } from ""next/server"";
import path from ""path"";
import resolvers from ""./resolvers"";

let typeDefs = """";

let plugins = [];
if (process.env.NODE_ENV === ""production"") {
  typeDefs = fs.readFileSync(
    path.join(path.resolve(), ""./src/app/api/graphql/schema.graphql""),
    ""utf-8"",
  );

  plugins = [
    ApolloServerPluginLandingPageProductionDefault({
      embed: true,
      graphRef: ""mersad.up@gmail.com"",
    }),
  ];
} else {
  typeDefs = fs.readFileSync(""./src/app/api/graphql/schema.graphql"", ""utf8"");

  plugins = [ApolloServerPluginLandingPageLocalDefault({ embed: true })];
}

const server = new ApolloServer({
  typeDefs: [
    typeDefs,
    DateTimeTypeDefinition,
    PositiveIntTypeDefinition,
    PositiveFloatTypeDefinition,
    URLTypeDefinition,
  ],
  resolvers: {
    ...resolvers,
    // DateTimeResolver,
    // PositiveFloatResolver,
    // PositiveIntResolver,
    // URLResolver,
  },
  plugins,
});

const handler = startServerAndCreateNextHandler<NextRequest>(server, {
  context: async (req) => {
    const prisma = new PrismaClient();

    prisma.$connect();

    return {
      req,
      prisma,
    };
  },
});

export async function GET(request: NextRequest) {
  return handler(request);
}

export async function POST(request: NextRequest) {
  return handler(request);
}
```"
S1,P1,[Turbopack] No Media Queries breakpoints in Chrome Device Emulation mode,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/turbopack-forked-plfd58

### To Reproduce

1. Add media quires with CSS Modules
2. Start the dev server via turbopack (next dev --turbo)
3. Open the Chrome and go to the device emulation section in the DevTools
4. Toggle media queries in options

![image](https://github.com/user-attachments/assets/cf75fc63-924e-472c-88ac-8031a68acc66)

5. Created media queries breakpoints will not shown. But all media queries still work

### Current vs. Expected behavior

Current (With Turbopack):

![image](https://github.com/user-attachments/assets/906be968-1584-47b7-b8cb-ffe7ceb1fb78)

Expected (If using without Turbopack): 

![image](https://github.com/user-attachments/assets/1c4a11f7-0424-4dee-a952-295bd645182e)

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 32601
  Available CPU cores: 12
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.5.0
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

The problem is that Turbopack, for example, when using `@media screen and (max-width: 768px)` converts this to `@media screen and (width <= 768px)`. Because of this, Chrome doesn't show media breakpoints",[Turbopack] Chromeデバイスエミュレーションモードでメディアクエリのブレークポイントが表示されない,"### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/turbopack-forked-plfd58

### 再現手順

1. CSSモジュールでメディアクエリを追加する
2. turbopackを介して開発サーバーを起動する（next dev --turbo）
3. Chromeを開き、DevToolsのデバイスエミュレーションセクションに移動する
4. オプションでメディアクエリをトグルする

![image](https://github.com/user-attachments/assets/cf75fc63-924e-472c-88ac-8031a68acc66)

5. 作成したメディアクエリのブレークポイントが表示されない。しかし、すべてのメディアクエリは正常に機能している。

### 現在の動作と期待される動作

現在の動作（Turbopack使用時）:

![image](https://github.com/user-attachments/assets/906be968-1584-47b7-b8cb-ffe7ceb1fb78)

期待される動作（Turbopackを使用しない場合）:

![image](https://github.com/user-attachments/assets/1c4a11f7-0424-4dee-a952-295bd645182e)

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能メモリ (MB): 32601
  利用可能CPUコア: 12
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.5.0
関連パッケージ:
  next: 15.0.3 // 最新の利用可能バージョンが検出されました (15.0.3)。
  eslint-config-next: 15.0.3
  react: 19.0.0-rc-5c56b873-20241107
  react-dom: 19.0.0-rc-5c56b873-20241107
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

問題は、Turbopackが例えば`@media screen and (max-width: 768px)`を`@media screen and (width <= 768px)`に変換することです。このため、Chromeはメディアブレークポイントを表示しません。"
S1,P1,Type error: Namespace 'React' has no exported member 'PromiseLikeOfReactNode'.,"### Link to the code that reproduces this issue

https://github.com/cryfs/cryfs-web-next/tree/feature/failing

### To Reproduce

1. Clone repository from above link, in the specified branch
2. Run ""npm run build"" (which will run next build)

### Current vs. Expected behavior

With next.js 13.5.4, everything works fine. But when upgrading to next.js 13.5.5, ([this commit](https://github.com/cryfs/cryfs-web-next/commit/55785a15b962f9acae70a3502e8d226943b65897)), it breaks and shows:

```
./node_modules/next/dist/client/components/error-boundary.d.ts:26:71
Type error: Namespace 'React' has no exported member 'PromiseLikeOfReactNode'.

  24 |     static getDerivedStateFromProps(props: ErrorBoundaryHandlerProps, state: ErrorBoundaryHandlerState): ErrorBoundaryHandlerState | null;
  25 |     reset: () => void;
> 26 |     render(): string | number | boolean | React.ReactFragment | React.PromiseLikeOfReactNode | React.JSX.Element | null | undefined;
     |                                                                       ^
  27 | }
  28 | export declare function GlobalError({ error }: {
  29 |     error: any;

```

The update of the next.js version is the only change in that commit, so this seems to be a breaking change in a minor version.

How can I fix this? Ideally without upgrading next.js since we're not ready to go to Next.js 14 yet. The latest minor version on next.js 13 (13.5.7) still has the issue.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #47-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 21:40:26 UTC 2024
Binaries:
  Node: 18.19.1
  npm: 10.9.0
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 13.5.5
  eslint-config-next: 13.5.5
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.0.4
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

works in 13.5.5-canary.2
broken in 13.5.5-canary.3",型エラー: 名前空間 'React' にエクスポートされたメンバー 'PromiseLikeOfReactNode' がありません。,"### この問題を再現するコードへのリンク

https://github.com/cryfs/cryfs-web-next/tree/feature/failing

### 再現手順

1. 上記リンクから指定されたブランチのリポジトリをクローンします。
2. ""npm run build"" を実行します（これにより next build が実行されます）。

### 現在の動作と期待される動作

next.js 13.5.4 ではすべて正常に動作します。しかし、next.js 13.5.5 にアップグレードすると、（[このコミット](https://github.com/cryfs/cryfs-web-next/commit/55785a15b962f9acae70a3502e8d226943b65897)）、壊れて次のエラーが表示されます：

```
./node_modules/next/dist/client/components/error-boundary.d.ts:26:71
型エラー: 名前空間 'React' にエクスポートされたメンバー 'PromiseLikeOfReactNode' がありません。

  24 |     static getDerivedStateFromProps(props: ErrorBoundaryHandlerProps, state: ErrorBoundaryHandlerState): ErrorBoundaryHandlerState | null;
  25 |     reset: () => void;
> 26 |     render(): string | number | boolean | React.ReactFragment | React.PromiseLikeOfReactNode | React.JSX.Element | null | undefined;
     |                                                                       ^
  27 | }
  28 | export declare function GlobalError({ error }: {
  29 |     error: any;

```

next.js バージョンの更新がそのコミットでの唯一の変更であるため、これはマイナーバージョンでの破壊的変更のようです。

これを修正するにはどうすればよいでしょうか？理想的には next.js をアップグレードせずに、まだ Next.js 14 に移行する準備ができていないためです。next.js 13 の最新のマイナーバージョン（13.5.7）でもこの問題は解決されていません。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #47-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 21:40:26 UTC 2024
バイナリ:
  Node: 18.19.1
  npm: 10.9.0
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ:
  next: 13.5.5
  eslint-config-next: 13.5.5
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.0.4
Next.js 設定:
  output: export
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build（ローカル）

### 追加のコンテキスト

13.5.5-canary.2 では動作し、13.5.5-canary.3 では壊れています。"
S1,P1,Parallel Intercepted routes not working when accessed from 404 error pages,"### Link to the code that reproduces this issue

https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404

### To Reproduce


1. Add a parallel intercepted route [like in this example](https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404/src/app)
3. Add the following to your app:
   - error.tsx page
   - support for the `@modal` slot in your layout.tsx props, and put it inside the body.
   - a Link in your layout.tsx, linking to the intercepted route
7. Navigate to any non-existing route to trigger a 404 error page
8. Click to the link of the layout that would trigger the intercepted route

### Current vs. Expected behavior

### Current behavior

#### On `next dev`
When accessing Parallel Intercepted routes from a 404 page, it triggers the following client-side error:

```
UI:

Application error: a client-side exception has occurred (see the browser console for more information).

Console:

app-router.ts:52 TypeError: initialTree is not iterable
    at applyPatch (apply-router-state-patch-to-tree.ts:17:51)
    at applyRouterStatePatchToTree (apply-router-state-patch-to-tree.ts:107:26)
    at navigate-reducer.ts:208:50

The above error occurred in the <Router> component. It was handled by the <ErrorBoundaryHandler> error boundary.
```

#### On `next start`

On `next start`, after build, navigating to the intercepted route from a 404 page works, but calling router.back() will trigger the same error again.

### Expected behavior

- The intercepted route content is shown on 404 pages, when navigating to that route.
- router.back() works as expected in all the above scenarios.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.3 // Latest available version is detected (15.0.3).
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

- The Parallel Intercepted routes work fine from error.tsx pages.
- Repository to reproduce the issue: https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404
- PR with the problematic changes: https://github.com/itsjavi/nextjs-demos/pull/1/files

CC @feedthejim
Related issue: https://github.com/vercel/next.js/issues/48289","タイトル:
404エラーページからアクセスした際にパラレルインターセプトルートが機能しない","本文:
### この問題を再現するためのコードへのリンク

https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404

### 再現手順

1. [この例のように](https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404/src/app)パラレルインターセプトルートを追加します。
3. アプリに以下を追加します：
   - error.tsxページ
   - layout.tsxのpropsに`@modal`スロットのサポートを追加し、ボディ内に配置します。
   - layout.tsxにインターセプトルートへのリンクを追加します。
7. 存在しないルートに移動して404エラーページをトリガーします。
8. インターセプトルートをトリガーするlayoutのリンクをクリックします。

### 現在の動作と期待される動作

### 現在の動作

#### `next dev`の場合
404ページからパラレルインターセプトルートにアクセスすると、次のクライアントサイドエラーが発生します：

```
UI:

アプリケーションエラー: クライアントサイドの例外が発生しました（詳細はブラウザのコンソールを参照してください）。

コンソール:

app-router.ts:52 TypeError: initialTreeは反復可能ではありません
    at applyPatch (apply-router-state-patch-to-tree.ts:17:51)
    at applyRouterStatePatchToTree (apply-router-state-patch-to-tree.ts:107:26)
    at navigate-reducer.ts:208:50

上記のエラーは<Router>コンポーネント内で発生しました。<ErrorBoundaryHandler>エラーバウンダリによって処理されました。
```

#### `next start`の場合

`next start`では、ビルド後に404ページからインターセプトルートに移動することは可能ですが、router.back()を呼び出すと再び同じエラーが発生します。

### 期待される動作

- 404ページでそのルートに移動した際にインターセプトルートのコンテンツが表示されること。
- 上記のすべてのシナリオでrouter.back()が期待通りに機能すること。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.3 // 検出された最新の利用可能バージョンは15.0.3です。
  eslint-config-next: N/A
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

パラレルおよびインターセプティングルート

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

- パラレルインターセプトルートはerror.tsxページからは正常に機能します。
- 問題を再現するためのリポジトリ: https://github.com/itsjavi/nextjs-demos/tree/issue/parallel-intercepted-404
- 問題のある変更を含むPR: https://github.com/itsjavi/nextjs-demos/pull/1/files

CC @feedthejim
関連する問題: https://github.com/vercel/next.js/issues/48289"
S1,P1,use cache doesn't work properly with dynamic routes,"### Link to the code that reproduces this issue

https://github.com/cantemizyurek/next-js-dynamic-io-bug-report

### To Reproduce

Create a dynamic route [id] and put this code inside and try to build application. Throws error I think it should not be throwing.
And works as expected in dev mode.

```tsx
'use cache'

import { DisplayId } from './components'
import { Suspense } from 'react'
export default async function Page({
  ...props
}: {
  params: Promise<{ id: string }>
}) {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <DisplayId params={props.params} />
    </Suspense>
  )
}

```

### Current vs. Expected behavior

Not to throw errors when building

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 22:05:53 PDT 2024; root:xnu-11215.41.3~5/RELEASE_ARM64_T6030
  Available memory (MB): 36864
  Available CPU cores: 12
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.6.0
Relevant Packages:
  next: 15.0.4-canary.3 // Latest available version is detected (15.0.4-canary.3).
  eslint-config-next: 15.0.4-canary.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

dynamicIO

### Which stage(s) are affected? (Select all that apply)

next build (local), Vercel (Deployed)

### Additional context

_No response_",キャッシュの使用が動的ルートで正しく機能しない,"### この問題を再現するコードへのリンク

https://github.com/cantemizyurek/next-js-dynamic-io-bug-report

### 再現手順

動的ルート [id] を作成し、その中にこのコードを入れてアプリケーションをビルドしようとすると、エラーが発生します。これは発生しないはずだと思います。
開発モードでは期待通りに動作します。

```tsx
'use cache'

import { DisplayId } from './components'
import { Suspense } from 'react'
export default async function Page({
  ...props
}: {
  params: Promise<{ id: string }>
}) {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <DisplayId params={props.params} />
    </Suspense>
  )
}

```

### 現在の動作と期待される動作

ビルド時にエラーを出さないこと

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 22:05:53 PDT 2024; root:xnu-11215.41.3~5/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 36864
  利用可能な CPU コア: 12
バイナリ：
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 9.6.0
関連パッケージ：
  next: 15.0.4-canary.3 // 検出された最新のバージョン (15.0.4-canary.3)。
  eslint-config-next: 15.0.4-canary.3
  react: 19.0.0-rc-66855b96-20241106
  react-dom: 19.0.0-rc-66855b96-20241106
  typescript: 5.6.3
Next.js 設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

dynamicIO

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル), Vercel (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,CSS chunk loaded in a script tag (CSS modules),"### Link to the code that reproduces this issue

https://github.com/maphe/css-module-reprex

### To Reproduce

The issue is visible on the prod build:
1. visit https://css-module-reprex.vercel.app/test 
2. the console will show the error: `Uncaught SyntaxError: Unexpected token '.'`
3. the dom will have css loaded as script: `<script src=""/_next/static/css/f2515c4387c9bb9d.css"" async=""""></script>`

To ""reproduce"" locally:
1. `npx nx build css-module-reprex --prod --skip-nx-cache`
2. look into `.next/static/css`
3. there should be one stylesheet instead of 2

### Current vs. Expected behavior

The CSS being chunked into 2 makes the app loads the second chunk as a script for some reason, hence the client component style is broken. There should only be one stylesheet loaded (or at least the second one shouldn't be inserted as a script)

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.7.0
  npm: 10.1.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.7 // An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
  eslint-config-next: 14.2.16
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
 ⚠ An outdated version detected (latest is 15.0.3), upgrade is highly recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Module Resolution, Webpack

### Which stage(s) are affected? (Select all that apply)

next build (local), Vercel (Deployed)

### Additional context

After investigation, I noticed that the cause of the issue is having the `opengraph-image.tsx` file import from the library that contains the components.

```ts
import { getLauncherColor } from '@css-module-reprex/ui';
```
getting rid of this line in `opengraph-image.tsx` fixes the build.",CSSチャンクがスクリプトタグに読み込まれる（CSSモジュール）,"### この問題を再現するコードへのリンク

https://github.com/maphe/css-module-reprex

### 再現手順

問題はプロダクションビルドで確認できます：
1. https://css-module-reprex.vercel.app/test にアクセス
2. コンソールにエラーが表示されます：`Uncaught SyntaxError: Unexpected token '.'`
3. DOMには次のようにCSSがスクリプトとして読み込まれます：`<script src=""/_next/static/css/f2515c4387c9bb9d.css"" async=""""></script>`

ローカルで「再現」するには：
1. `npx nx build css-module-reprex --prod --skip-nx-cache` を実行
2. `.next/static/css` を確認
3. 2つのスタイルシートの代わりに1つのスタイルシートがあるはずです

### 現在の動作と期待される動作

CSSが2つに分割されることで、アプリが何らかの理由で2つ目のチャンクをスクリプトとして読み込むため、クライアントコンポーネントのスタイルが壊れています。読み込まれるスタイルシートは1つだけであるべきです（または少なくとも2つ目はスクリプトとして挿入されるべきではありません）

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:11 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 12
バイナリ：
  Node: 20.7.0
  npm: 10.1.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 14.2.7 // 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
  eslint-config-next: 14.2.16
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定：
  output: N/A
 ⚠ 古いバージョンが検出されました（最新は15.0.3）、アップグレードを強く推奨します！
   新しい問題を作成する前に、最新のカナリアバージョン（`npm install next@canary`）を試して、問題がまだ存在するか確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

モジュール解決、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

調査の結果、問題の原因は、コンポーネントを含むライブラリからインポートしている`opengraph-image.tsx`ファイルにあることがわかりました。

```ts
import { getLauncherColor } from '@css-module-reprex/ui';
```
この行を`opengraph-image.tsx`から削除すると、ビルドが修正されます。"
S1,P1,Incremental Static Regeneration (ISR) Not Functioning as Expected in Next.js 15,"### Link to the code that reproduces this issue

https://github.com/samstr/isr-demo-nextjs15

### To Reproduce

NextJS 14 Demo: https://github.com/samstr/isr-demo-nextjs14
NextJS 15 Demo: https://github.com/samstr/isr-demo-nextjs15

1. Clone demo repo (isr-demo-nextjs14)
2. npm install
3. npm run build
4. Go to http://localhost:3000/ and click the example links

### Current vs. Expected behavior

The expected behavior is for pages that implement ISR should be cached for the time specified using the revalidate const.

In NextJS14 this works, but in NextJS 15 I can't seem to get the same behavior.

The `npm run build` output treats the route differently.

**NextJS 14**
![Screenshot 2024-11-07 at 10 51 33](https://github.com/user-attachments/assets/23d01ffc-b6b6-4461-aab1-6a969a1da5ed)

**NextJS 15**
![Screenshot 2024-11-07 at 10 59 05](https://github.com/user-attachments/assets/7da07629-a0f9-4783-a141-2b6709f9af2c)

I understand that NextJS 15 introduced a new 'uncached by default' concept for route handlers and fetch requests etc, but I didn't think that was related to server rendered pages that are using `revalidate`.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 98304
  Available CPU cores: 12
Binaries:
  Node: 18.18.0
  npm: 9.8.1
  Yarn: N/A
  pnpm: 7.22.0
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed)

### Additional context

_No response_","タイトル:
Next.js 15でのインクリメンタル静的再生成（ISR）が期待通りに機能しない","本文:
### この問題を再現するコードへのリンク

https://github.com/samstr/isr-demo-nextjs15

### 再現手順

NextJS 14デモ: https://github.com/samstr/isr-demo-nextjs14  
NextJS 15デモ: https://github.com/samstr/isr-demo-nextjs15

1. デモリポジトリをクローンする（isr-demo-nextjs14）
2. npm install
3. npm run build
4. http://localhost:3000/ にアクセスし、例のリンクをクリックする

### 現在の動作と期待される動作

期待される動作は、ISRを実装したページが、revalidate定数で指定された時間だけキャッシュされることです。

NextJS 14ではこれが機能しますが、NextJS 15では同じ動作を得ることができません。

`npm run build`の出力は、ルートを異なる扱いにしています。

**NextJS 14**
![Screenshot 2024-11-07 at 10 51 33](https://github.com/user-attachments/assets/23d01ffc-b6b6-4461-aab1-6a969a1da5ed)

**NextJS 15**
![Screenshot 2024-11-07 at 10 59 05](https://github.com/user-attachments/assets/7da07629-a0f9-4783-a141-2b6709f9af2c)

NextJS 15では、ルートハンドラーやフェッチリクエストなどに対して「デフォルトでキャッシュされない」という新しい概念が導入されたことは理解していますが、`revalidate`を使用しているサーバーレンダリングページには関連していないと思っていました。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 98304
  利用可能なCPUコア: 12
バイナリ:
  Node: 18.18.0
  npm: 9.8.1
  Yarn: N/A
  pnpm: 7.22.0
関連パッケージ:
  next: 15.0.2 // 最新の利用可能なバージョンが検出されています (15.0.2)。
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

不明

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,FFMpeg Wasm lib not loading with turbopack dev enabled.,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/7mqmx8

### To Reproduce

1. Run the application using next dev with --turbopack flag enabled.
2. Check the browser preview. If library loaded, that will print ""ffmpeg Loaded"" else will print ""ffmpeg not loaded"" (for debug purpose only).


### Current vs. Expected behavior

**Current Behaviour**
- FFMpeg lib not loading with --turbopack flag enabled

**Expected Behaviour**
- Should work with that flag also. Happening with other wasm lib too - imagemagick wasm etc.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 14.2.1
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.4.5
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I've tested this with next 15.0.2 release with --turbopack flag enabled and it's not working with that. Without that flag library loading perfectly fine, even with earlier next.js versions.","タイトル:
Turbopack開発が有効な状態でFFMpeg Wasmライブラリが読み込まれない","本文:
### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/7mqmx8

### 再現手順

1. --turbopackフラグを有効にしてnext devを使用してアプリケーションを実行します。
2. ブラウザのプレビューを確認します。ライブラリが読み込まれていれば「ffmpeg Loaded」と表示され、そうでなければ「ffmpeg not loaded」と表示されます（デバッグ目的のみ）。

### 現在の動作と期待される動作

**現在の動作**
- --turbopackフラグが有効な状態でFFMpegライブラリが読み込まれない

**期待される動作**
- そのフラグでも動作するべきです。他のwasmライブラリ（imagemagick wasmなど）でも同様の問題が発生しています。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能メモリ (MB): 4102
  利用可能CPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.2 // 利用可能な最新バージョンが検出されました (15.0.2)。
  eslint-config-next: 14.2.1
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.4.5
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

--turbopackフラグを有効にした状態でnext 15.0.2リリースでテストしましたが、動作しませんでした。そのフラグなしではライブラリは正常に読み込まれ、以前のnext.jsバージョンでも問題ありませんでした。"
S1,P1,`response.body?.cancel()` of `fetch` causes unexpected behaviors in App Router,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/lucid-cohen-8r5tyq?workspaceId=cf95a29a-9e60-48fa-8cf5-0d217db0d3c6

### To Reproduce

1. Build and start server (`npm run build && npm run start`)
2. Access `/`

### Current vs. Expected behavior

### Expected:
- The `ReadableStream` (`response.body`) is successfully cancelled.

### Current:
- `response.body?.cancel()` does not resolve, causing the page to not return.
- Once `response.body?.cancel()` is called, the Next.js server does not terminate when `Ctrl + C` is pressed in the terminal.


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  Available memory (MB): 39993
  Available CPU cores: 20
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: 1.22.15
  pnpm: 9.10.0
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next start (local), Other (Deployed)

### Additional context

Reproduced with not only Next.js v15.0.2 but also v14.2.17 at least.
I know the way to get only header or consume body in other way. This issue focuses on the bug with `response.body.cancel`.","タイトル:
`fetch`の`response.body?.cancel()`がApp Routerで予期しない動作を引き起こす","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/lucid-cohen-8r5tyq?workspaceId=cf95a29a-9e60-48fa-8cf5-0d217db0d3c6

### 再現手順

1. サーバーをビルドして起動する（`npm run build && npm run start`）
2. `/`にアクセスする

### 現在の動作と期待される動作

### 期待される動作:
- `ReadableStream`（`response.body`）が正常にキャンセルされる。

### 現在の動作:
- `response.body?.cancel()`が解決せず、ページが戻らない。
- `response.body?.cancel()`が呼び出されると、ターミナルで`Ctrl + C`を押してもNext.jsサーバーが終了しない。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  利用可能メモリ (MB): 39993
  利用可能CPUコア: 20
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: 1.22.15
  pnpm: 9.10.0
関連パッケージ:
  next: 15.0.2 // 利用可能な最新バージョンが検出されました (15.0.2)。
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next start（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

Next.js v15.0.2だけでなく、少なくともv14.2.17でも再現されました。
ヘッダーのみを取得する方法や、他の方法でボディを消費する方法は知っています。この問題は`response.body.cancel`のバグに焦点を当てています。"
S1,P1,Hard Navigation On Client side Navigation (using Link component) in Nextjs 15,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/musing-lalande-js9nmq?file=%2Fapp%2Fpage.tsx%3A5%2C1

### To Reproduce

	1.	Create a new page in the starter project.
	2.	Add a link to that page on the home page.
	3.	Run the app locally.
	4.	Click on the link.
	5.	A hard navigation occurs, causing the window to reload and the page document to be downloaded.

In Next.js v14, this behavior wouldn’t occur. Navigations were handled as soft navigations, resulting in the document not being downloaded on every navigation and requested only once.

### Current vs. Expected behavior

In Next.js v15, clicking on internal links leads to full page reloads (hard navigations), resulting in the entire page document being downloaded each time. This behavior differs from Next.js v14, where navigations were handled as soft navigations (client-side transitions), allowing for faster and more efficient page changes without reloading the entire document.

### Provide environment information

```bash
Operating System:
  Platform: macos
  Arch: x64
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: 9.9.0
Relevant Packages:
  next: 15.0.2
  react: 18.3.0,
  react-dom"": 18.3.0,
  typescript: 5.1.6
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

![image](https://github.com/user-attachments/assets/6da5f752-d406-4c54-993d-4628ad575049)

https://github.com/user-attachments/assets/5fd95c4d-3f0d-4bd5-9849-4c35575b3872

",クライアントサイドナビゲーションにおけるハードナビゲーション（Linkコンポーネントを使用） in Next.js 15,"### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/musing-lalande-js9nmq?file=%2Fapp%2Fpage.tsx%3A5%2C1

### 再現手順

	1.	スタータープロジェクトに新しいページを作成します。
	2.	ホームページにそのページへのリンクを追加します。
	3.	アプリをローカルで実行します。
	4.	リンクをクリックします。
	5.	ハードナビゲーションが発生し、ウィンドウが再読み込みされ、ページドキュメントがダウンロードされます。

Next.js v14では、この動作は発生しませんでした。ナビゲーションはソフトナビゲーションとして処理され、毎回のナビゲーションでドキュメントがダウンロードされることはなく、一度だけ要求されました。

### 現在の動作と期待される動作

Next.js v15では、内部リンクをクリックするとフルページの再読み込み（ハードナビゲーション）が発生し、毎回全ページドキュメントがダウンロードされます。この動作は、ナビゲーションがソフトナビゲーション（クライアントサイドの遷移）として処理され、全ドキュメントを再読み込みすることなく、より迅速かつ効率的なページ変更を可能にしていたNext.js v14とは異なります。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: macos
  アーキ: x64
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: 9.9.0
関連パッケージ:
  next: 15.0.2
  react: 18.3.0,
  react-dom: 18.3.0,
  typescript: 5.1.6
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next start（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

![image](https://github.com/user-attachments/assets/6da5f752-d406-4c54-993d-4628ad575049)

https://github.com/user-attachments/assets/5fd95c4d-3f0d-4bd5-9849-4c35575b3872"
S1,P1,Issues creating web workers `SecurityError: Failed to construct 'Worker'`,"### Link to the code that reproduces this issue

https://github.com/pantoninho/nextjs-worker-bug

### To Reproduce

(I'm getting errors creating a next-app with `reproduction-template`, so I created a regular next-app instead)

I'm able to create web workers inside a component, but a `SecurityError` is thrown when instantiating them inside a hook.

1. run `npm run dev`
2. open `localhost:3000`
3. assert there's no issues with the created webworker by clicking `send message` button
4. open `localhost:3000/issue` (or click the link in the root page) and a `SecurityError` is thrown (attached below)
5. check the code differences between `app/page.tsx` and `app/issue/page.tsx`:

```js
// this works
function Component() {
  const workerRef = React.useRef();

  React.useEffect(() => {
    workerRef.current = new Worker(new URL(""./worker.ts"", import.meta.url)); // <-- works
    return () => {
      workerRef.current?.terminate();
    };
  }, []);
  
  return <div />
}
```

```js
// this doesn't work
function Component() {
  const worker = useWorker('./worker.ts');
  
  return <div/>  
}

function useWorker(path) {
  const workerRef = React.useRef();

  React.useEffect(() => {
    workerRef.current = new Worker(new URL(path, import.meta.url)); // <-- SecurityError is thrown
    return () => {
      workerRef.current?.terminate();
    };
  }, [path]);
  
  return workerRef;
}


```


<img width=""1019"" alt=""image"" src=""https://github.com/user-attachments/assets/52e6dd5c-7ce1-40f8-b792-5d15efb54dd9"">


### Current vs. Expected behavior

I expected to be able to create web workers inside hooks.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure, Runtime, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

_No response_","タイトル:
Webワーカーの作成に関する問題 `SecurityError: 'Worker' の構築に失敗しました`","本文:
### この問題を再現するコードへのリンク

https://github.com/pantoninho/nextjs-worker-bug

### 再現手順

（`reproduction-template` で next-app を作成する際にエラーが発生したため、通常の next-app を作成しました）

コンポーネント内で Web ワーカーを作成することはできますが、フック内でインスタンス化すると `SecurityError` がスローされます。

1. `npm run dev` を実行
2. `localhost:3000` を開く
3. `send message` ボタンをクリックして作成された Web ワーカーに問題がないことを確認
4. `localhost:3000/issue` を開く（またはルートページのリンクをクリック）と `SecurityError` がスローされる（以下に添付）
5. `app/page.tsx` と `app/issue/page.tsx` のコードの違いを確認：

```js
// これは動作します
function Component() {
  const workerRef = React.useRef();

  React.useEffect(() => {
    workerRef.current = new Worker(new URL(""./worker.ts"", import.meta.url)); // <-- 動作します
    return () => {
      workerRef.current?.terminate();
    };
  }, []);
  
  return <div />
}
```

```js
// これは動作しません
function Component() {
  const worker = useWorker('./worker.ts');
  
  return <div/>  
}

function useWorker(path) {
  const workerRef = React.useRef();

  React.useEffect(() => {
    workerRef.current = new Worker(new URL(path, import.meta.url)); // <-- SecurityError がスローされます
    return () => {
      workerRef.current?.terminate();
    };
  }, [path]);
  
  return workerRef;
}
```

<img width=""1019"" alt=""image"" src=""https://github.com/user-attachments/assets/52e6dd5c-7ce1-40f8-b792-5d15efb54dd9"">

### 現在の動作と期待される動作

フック内で Web ワーカーを作成できることを期待していました。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能な CPU コア: 10
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.2 // 検出された最新の利用可能バージョンは 15.0.2 です。
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明、ランタイム、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,"Enum in types.d.ts used in useState hook crashes turbopack  ","### Link to the code that reproduces this issue

https://github.com/TijanaMazinjanin/nextjs_enum_bug

### To Reproduce

1. Clone the linked repository
2. pnpm install && pnpm run dev-turbo
3. Open localhost:3000

You will see turbopack crashing.


### Current vs. Expected behavior

The code should work the same with or without the --turbo flag. However, it currently crashes when --turbo is enabled, while it runs as expected without it. 

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 15707
  Available CPU cores: 16
Binaries:
  Node: 22.6.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.7.0
Relevant Packages:
  next: 14.2.16 // An outdated version detected (latest is 15.0.2), upgrade is highly recommended!
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

When I define enum in any other file except types.d.ts it's working. Latest nextjs 15.0.2 has the same issue. Linux distributions also have this issue.","タイトル:  
useStateフックで使用されるtypes.d.tsのEnumがturbopackをクラッシュさせる","本文:  
### この問題を再現するためのコードへのリンク

https://github.com/TijanaMazinjanin/nextjs_enum_bug

### 再現手順

1. リンクされたリポジトリをクローンする
2. pnpm install && pnpm run dev-turbo
3. localhost:3000を開く

turbopackがクラッシュするのが見えるでしょう。  

### 現在の動作と期待される動作

コードは--turboフラグの有無にかかわらず同じように動作するべきです。しかし、現在は--turboが有効な場合にクラッシュし、無効な場合は期待通りに動作します。  

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能メモリ (MB): 15707
  利用可能CPUコア: 16
バイナリ:
  Node: 22.6.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.7.0
関連パッケージ:
  next: 14.2.16 // 古いバージョンが検出されました (最新は15.0.2)、アップグレードを強く推奨します！
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```  

### 影響を受ける領域はどれですか？ (該当するものをすべて選択)

Turbopack

### 影響を受けるステージはどれですか？ (該当するものをすべて選択)

next dev (ローカル)

### 追加のコンテキスト

types.d.ts以外のファイルにenumを定義すると動作します。最新のnextjs 15.0.2でも同じ問題があります。Linuxディストリビューションでもこの問題があります。"
S1,P1,"Next.js 15 - Unsupported ""BinaryExpression"" error in ""revalidate"" field for math expressions","### Link to the code that reproduces this issue

https://github.com/GitDevla/next_my_app

### To Reproduce

1. Create a new Next.js 15 project or use an existing one upgraded to Next.js 15.
2. Define a revalidate field with a mathematical expression in one of the route handlers. For example: 
``` javascript
export const revalidate = 60 * 5;
```
3. Attempt to run or build the project.

### Current vs. Expected behavior

**Current**:
```sh
npm run build

> build
> next build

   ▲ Next.js 15.0.3-canary.6

   Creating an optimized production build ...
 ⨯ Next.js can't recognize the exported `config` field in route ""/page"":
Unsupported node type ""BinaryExpression"" at ""revalidate"".
Read More - https://nextjs.org/docs/messages/invalid-page-config
 ✓ Compiled successfully
 ✓ Linting and checking validity of types    
 ⨯ Invalid config value exports detected, these can cause unexpected behavior from the configs not being applied. Please fix them to continue
```

**Expected**: The mathematical expression to be evaluated

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  Available memory (MB): 3921
  Available CPU cores: 4
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3-canary.6 // Latest available version is detected (15.0.3-canary.6).
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

In Next.js 15, the revalidate field in route handlers does not support mathematical expressions (e.g. 60 * 5). This behavior was supported in Next.js 14, which accepted expressions that evaluated to integers.

Instead, Next.js 15 only supports direct integer values for revalidate.
eg.
```js
export const revalidate = 300; // 60*5
```","Next.js 15 - ""revalidate""フィールドにおける数学式の「BinaryExpression」エラーのサポート外","### この問題を再現するコードへのリンク

https://github.com/GitDevla/next_my_app

### 再現手順

1. 新しいNext.js 15プロジェクトを作成するか、Next.js 15にアップグレードされた既存のプロジェクトを使用します。
2. ルートハンドラーの1つに数学式を含むrevalidateフィールドを定義します。例えば：
``` javascript
export const revalidate = 60 * 5;
```
3. プロジェクトを実行またはビルドしようとします。

### 現在の動作と期待される動作

**現在の動作**:
```sh
npm run build

> build
> next build

   ▲ Next.js 15.0.3-canary.6

   最適化されたプロダクションビルドを作成中 ...
 ⨯ Next.jsはルート「/page」のエクスポートされた`config`フィールドを認識できません：
「revalidate」におけるサポートされていないノードタイプ「BinaryExpression」。
詳細を読む - https://nextjs.org/docs/messages/invalid-page-config
 ✓ コンパイルに成功しました
 ✓ リンティングと型の有効性チェック    
 ⨯ 無効な設定値のエクスポートが検出されました。これにより、設定が適用されない予期しない動作が発生する可能性があります。続行するには修正してください
```

**期待される動作**: 数学式が評価されること

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  利用可能なメモリ (MB): 3921
  利用可能なCPUコア: 4
バイナリ：
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.3-canary.6 // 検出された最新の利用可能バージョンは (15.0.3-canary.6) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)

### 追加のコンテキスト

Next.js 15では、ルートハンドラーのrevalidateフィールドは数学式（例：60 * 5）をサポートしていません。この動作はNext.js 14ではサポートされており、整数に評価される式を受け入れていました。

代わりに、Next.js 15はrevalidateに対して直接の整数値のみをサポートしています。
例：
```js
export const revalidate = 300; // 60*5
```"
S1,P1,"redirect does not work when using multiple root layouts ","### Link to the code that reproduces this issue

https://github.com/llipengda/next-redirect-bug

### To Reproduce

1. next dev
2. click `/test-a`
3. click `redirect to /`
4. the page is navigated to /
5. click `/test-b`
6. click `redirect to /`
7. this does not work

### Current vs. Expected behavior

current: when clicking `redirect to /` in `/test-b`, `redirect` does not work.
expected: redirect to /

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home China
  Available memory (MB): 16164
  Available CPU cores: 16
Binaries:
  Node: 20.18.0
  npm: 10.8.3
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.3-canary.6 // Latest available version is detected (15.0.3-canary.6).
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_",リダイレクトは複数のルートレイアウトを使用する際に機能しません,"### この問題を再現するコードへのリンク

https://github.com/llipengda/next-redirect-bug

### 再現手順

1. next dev
2. `/test-a`をクリック
3. `redirect to /`をクリック
4. ページが/に移動します
5. `/test-b`をクリック
6. `redirect to /`をクリック
7. これは機能しません

### 現在の動作と期待される動作

現在: `/test-b`で`redirect to /`をクリックすると、`redirect`は機能しません。  
期待される動作: /にリダイレクトする

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home China
  使用可能なメモリ (MB): 16164
  使用可能なCPUコア: 16
バイナリ:
  Node: 20.18.0
  npm: 10.8.3
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.3-canary.6 // 検出された最新の利用可能バージョン (15.0.3-canary.6)。
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,tsconfigPath is not supported by Turbopack,"### Link to the code that reproduces this issue

https://github.com/seanparmelee/nextjs-tsconfigpath

### To Reproduce

1. Run `npm run dev:turbo`
2. Navigate to http://localhost:3000/
3. You should see the error `Module not found: Can't resolve '@/components/Hello'`
4. Stop the server
5. Run `npm run dev`
6. Navigate to http://localhost:3000/
7. Confirm the page renders successfully

### Current vs. Expected behavior

When using Turbopack (`npm run dev:turbo`), modules referenced via the configured path alias cannot be found; presumably because Turbopack doesn't support the `typescript.tsconfigPath` Next.js config option.

When not using Turbopack (`npm run dev`), the aliased modules are resolved successfully.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Wed Jul 31 20:49:39 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 8.15.2
Relevant Packages:
  next: 15.0.3-canary.6 // Latest available version is detected (15.0.3-canary.6).
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
tsconfigPathはTurbopackでサポートされていません","本文:
### この問題を再現するためのコードへのリンク

https://github.com/seanparmelee/nextjs-tsconfigpath

### 再現手順

1. `npm run dev:turbo`を実行
2. http://localhost:3000/ に移動
3. `Module not found: Can't resolve '@/components/Hello'`というエラーが表示されるはずです
4. サーバーを停止
5. `npm run dev`を実行
6. http://localhost:3000/ に移動
7. ページが正常にレンダリングされることを確認

### 現在の動作と期待される動作

Turbopackを使用している場合（`npm run dev:turbo`）、設定されたパスエイリアスを介して参照されるモジュールが見つからない。おそらく、Turbopackが`typescript.tsconfigPath`のNext.js設定オプションをサポートしていないためです。

Turbopackを使用していない場合（`npm run dev`）、エイリアスされたモジュールは正常に解決されます。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Wed Jul 31 20:49:39 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 22.11.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: 8.15.2
関連パッケージ:
  next: 15.0.3-canary.6 // 検出された最新のバージョンは (15.0.3-canary.6) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,SearchParams Sync Issue During First Effect Execution with window.history.replaceState(),"### Link to the code that reproduces this issue

https://github.com/yongholeeme/reproduction-bug-history-api-in-effect-nextjs/blob/main/Bug.jsx

### To Reproduce

> I created and deployed reproduction: https://reproduction-bug-history-api-in-effect-nextjs.vercel.app
> 1. When query `foo` is over 5, call [`window.history.replaceState()`](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api) in effect
> 2. When `searchParams` is changed, call `console.log()` to watch `searchParams`
> 3. When clicked the button, query `foo` is updated by random number (0 ~ 9)

1. When connect https://reproduction-bug-history-api-in-effect-nextjs.vercel.app?foo=100, `foo`'s value has to be changed `bar` according to `1. When query `foo` is over 5, call window.history.replaceState() in effect`
2. It seems to be changed to `?foo=bar`, but `console.log()` don't be executed in useEffect has `searchParams` dependency.
3. Even after calling `router.refresh()`, `?foo=100` query is back.

https://github.com/user-attachments/assets/593b9697-e790-4cea-a877-1e824671a6a2



### Current vs. Expected behavior

Wherever `window.history.replaceState()` is called, it's be synchronized with Router.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:13 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8112
  Available memory (MB): 24576
  Available CPU cores: 8
Binaries:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: N/A
  pnpm: 9.1.1
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: N/A
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed)

### Additional context

_No response_","タイトル:
window.history.replaceState()を使用した最初のエフェクト実行中のSearchParams同期問題","本文:
### この問題を再現するコードへのリンク

https://github.com/yongholeeme/reproduction-bug-history-api-in-effect-nextjs/blob/main/Bug.jsx

### 再現手順

> 再現を作成し、デプロイしました: https://reproduction-bug-history-api-in-effect-nextjs.vercel.app
> 1. クエリ`foo`が5を超えると、エフェクト内で[`window.history.replaceState()`](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api)を呼び出します
> 2. `searchParams`が変更されたときに、`console.log()`を呼び出して`searchParams`を監視します
> 3. ボタンをクリックすると、クエリ`foo`がランダムな数（0〜9）で更新されます

1. https://reproduction-bug-history-api-in-effect-nextjs.vercel.app?foo=100に接続すると、`foo`の値は`1. クエリ`foo`が5を超えると、エフェクト内でwindow.history.replaceState()を呼び出す`に従って`bar`に変更される必要があります。
2. `?foo=bar`に変更されているようですが、`searchParams`依存のuseEffect内で`console.log()`は実行されません。
3. `router.refresh()`を呼び出した後でも、クエリ`?foo=100`は元に戻ります。

https://github.com/user-attachments/assets/593b9697-e790-4cea-a877-1e824671a6a2

### 現在の動作と期待される動作

`window.history.replaceState()`が呼び出される場所では、Routerと同期される必要があります。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:13 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8112
  利用可能なメモリ (MB): 24576
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: N/A
  pnpm: 9.1.1
関連パッケージ:
  next: 15.0.2 // 検出された最新の利用可能バージョンは15.0.2です。
  eslint-config-next: N/A
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: N/A
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

_回答なし_"
S1,P1,Generated files on disk have different file hash than Webpack-reported assets,"### Link to the code that reproduces this issue

https://github.com/mauron85/nextjs-webpack-assets

### To Reproduce

1. create plain nextjs app or pull example from https://github.com/mauron85/nextjs-webpack-assets
2. add simple asset log plugin

// next.config.js
```
module.exports = {
  webpack: (config, { webpack }) => {
    config.plugins.push({
      apply: (compiler) => {
        compiler.hooks.compilation.tap(""LogFinalFilenamesPlugin"", (compilation) => {
          compilation.hooks.processAssets.tap(
            {
              name: ""LogFinalFilenamesPlugin"",
              stage: webpack.Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
            },
            () => {
              const assetNames = Object.keys(compilation.assets);
              console.log(""Final asset filenames:"", assetNames);
            }
          );
        });
      },
    });
    return config;
  },
};
```
3. run npm run build
4. compare file names in .next\static\chunks\pages\[sessionId] vs what plugin reported

### Current vs. Expected behavior

When building a Next.js application, the assets listed by Webpack (such as those logged by plugins like FileListPlugin or available in Webpack stats) have different hashes in their filenames compared to the files actually written to the .next/static folder on disk. This creates a mismatch between the assets reported by Webpack and those available on disk after the build process completes, impacting other webpack plugins eg. bug like https://github.com/microsoft/azure-devops-symbols/issues/253

The filenames for assets reported by Webpack should match those generated on disk in the .next/static folder, including any appended hash values for cache busting.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Enterprise
  Available memory (MB): 32436
  Available CPU cores: 8
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

""The mismatch between filenames on disk and Webpack asset names is causing issues with other Webpack plugins. For instance, when using AzureDevOpsSymbolsPlugin, this discrepancy results in duplicated sourceMappingURL entries in production builds, rendering them unusable across all browsers.""","タイトル:
ディスク上の生成されたファイルがWebpack報告のアセットと異なるファイルハッシュを持つ","本文:
### この問題を再現するためのコードへのリンク

https://github.com/mauron85/nextjs-webpack-assets

### 再現手順

1. プレーンなNext.jsアプリを作成するか、https://github.com/mauron85/nextjs-webpack-assets から例を取得します。
2. シンプルなアセットログプラグインを追加します。

// next.config.js
```
module.exports = {
  webpack: (config, { webpack }) => {
    config.plugins.push({
      apply: (compiler) => {
        compiler.hooks.compilation.tap(""LogFinalFilenamesPlugin"", (compilation) => {
          compilation.hooks.processAssets.tap(
            {
              name: ""LogFinalFilenamesPlugin"",
              stage: webpack.Compilation.PROCESS_ASSETS_STAGE_SUMMARIZE,
            },
            () => {
              const assetNames = Object.keys(compilation.assets);
              console.log(""最終アセットファイル名:"", assetNames);
            }
          );
        });
      },
    });
    return config;
  },
};
```
3. npm run build を実行します。
4. .next\static\chunks\pages\[sessionId] のファイル名とプラグインが報告した内容を比較します。

### 現在の動作と期待される動作

Next.jsアプリケーションをビルドする際、Webpackによってリストされたアセット（FileListPluginのようなプラグインによってログされたものやWebpackの統計情報にあるもの）は、実際にディスクの.next/staticフォルダに書き込まれたファイルのハッシュと異なるファイル名を持っています。これにより、Webpackが報告するアセットとビルドプロセスが完了した後にディスク上で利用可能なアセットとの間に不一致が生じ、他のWebpackプラグインに影響を与えます。例えば、https://github.com/microsoft/azure-devops-symbols/issues/253 のようなバグです。

Webpackが報告するアセットのファイル名は、ディスク上の.next/staticフォルダに生成されたものと一致する必要があり、キャッシュバスティングのために追加されたハッシュ値も含まれます。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Enterprise
  利用可能メモリ (MB): 32436
  利用可能CPUコア: 8
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.2 // 利用可能な最新バージョンが検出されました (15.0.2)。
  eslint-config-next: 15.0.2
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

create-next-app

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build (ローカル)

### 追加のコンテキスト

「ディスク上のファイル名とWebpackアセット名の不一致が、他のWebpackプラグインに問題を引き起こしています。たとえば、AzureDevOpsSymbolsPluginを使用する際、この不一致により、プロダクションビルドでsourceMappingURLエントリが重複し、すべてのブラウザで使用できなくなります。」"
S1,P1,Turbopack fails to pack css.modules with utf8-bom encoding,"### Link to the code that reproduces this issue

https://github.com/Martinii89/nextjs-turbo-bom-bug

### To Reproduce

1. Start the application in dev mode using the --turbo option
2. The one page uses two identical css classes from two different css module files. One is encoded with utf8. The other with utf8-bom
3. Only the css module with utf8 encoding is applied correctly
![image](https://github.com/user-attachments/assets/23194bed-2b6b-4e7b-8cb0-92bcb5eae193)

Screenshot of the css styles in the devtools of chrome shows a error on one of the styles
![image](https://github.com/user-attachments/assets/be0de444-3b2d-4d20-9bfd-a92e32c5066f)



### Current vs. Expected behavior

Expected behaviour is that the css modules with utf8-bom encoding does not fail to apply. Currently the first selector will become invalid when utf8-bom is used. 

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
  Available memory (MB): 16222
  Available CPU cores: 12
Binaries:
  Node: 20.13.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.3-canary.4 // Latest available version is detected (15.0.3-canary.4).
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
Turbopackがutf8-bomエンコーディングのcss.modulesをパックできない","本文:
### この問題を再現するコードへのリンク

https://github.com/Martinii89/nextjs-turbo-bom-bug

### 再現手順

1. --turboオプションを使用してアプリケーションを開発モードで起動します。
2. 一つのページで、二つの異なるcssモジュールファイルから同一のcssクラスを使用します。一つはutf8でエンコードされており、もう一つはutf8-bomでエンコードされています。
3. utf8エンコーディングのcssモジュールのみが正しく適用されます。
![image](https://github.com/user-attachments/assets/23194bed-2b6b-4e7b-8cb0-92bcb5eae193)

Chromeのデベロッパーツールでのcssスタイルのスクリーンショットには、一つのスタイルにエラーが表示されています。
![image](https://github.com/user-attachments/assets/be0de444-3b2d-4d20-9bfd-a92e32c5066f)

### 現在の動作と期待される動作

期待される動作は、utf8-bomエンコーディングのcssモジュールが適用に失敗しないことです。現在、utf8-bomが使用されると最初のセレクタが無効になります。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home
  利用可能なメモリ (MB): 16222
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.13.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.3-canary.4 // 検出された最新の利用可能バージョンは (15.0.3-canary.4) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-7c8e5e7a-20241101
  react-dom: 19.0.0-rc-7c8e5e7a-20241101
  typescript: 5.3.3
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,"next dev with --turbo flag bug with ""paths"": {""*"": [""types/*.d.ts""]} in tsconfig.json","### Link to the code that reproduces this issue

https://github.com/Yohannfra/turbo-bug-reproduction-repo

### To Reproduce

1. Clone the linked repository
2. pnpm install && pnpm run dev
3. open localhost:3000


You will see this error message

```
 ✓ Ready in 679ms
 ⨯ src/i18n/routing.ts (8:24) @ [project]/src/i18n/routing.ts [middleware] (ecmascript)
 ⨯ Error: defineRouting is not defined
    at <unknown> ([project]/src/i18n/routing.ts [middleware] (ecmascript) (./src/i18n/routing.ts:8:24)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5)
    at getOrInstantiateModuleFromParent (./[turbopack]/browser/runtime/base/dev-base.ts:132:10)
    at esmImport (./[turbopack]/shared/runtime-utils.ts:214:18)
    at <unknown> ([project]/src/middleware.ts [middleware] (ecmascript) (./src/middleware.ts:3:1)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5) {
  digest: undefined
}
   6 | export const locales: LocaleType[] = ['fr', 'en', 'es', 'it', 'nl', 'de']
   7 |
>  8 | export const routing = defineRouting({
     |                        ^
   9 |   // A list of all locales that are supported
  10 |   locales: locales,
  11 |
 ✓ Compiled /_error in 401ms
 GET / 404 in 2ms
 ○ Compiling /_not-found/page ...
 ✓ Compiled /_not-found/page in 701ms
 ⨯ src/i18n/routing.ts (8:24) @ [project]/src/i18n/routing.ts [middleware] (ecmascript)
 ⨯ Error: defineRouting is not defined
    at <unknown> ([project]/src/i18n/routing.ts [middleware] (ecmascript) (./src/i18n/routing.ts:8:24)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5)
    at getOrInstantiateModuleFromParent (./[turbopack]/browser/runtime/base/dev-base.ts:132:10)
    at esmImport (./[turbopack]/shared/runtime-utils.ts:214:18)
    at <unknown> ([project]/src/middleware.ts [middleware] (ecmascript) (./src/middleware.ts:3:1)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5) {
  digest: undefined
}
   6 | export const locales: LocaleType[] = ['fr', 'en', 'es', 'it', 'nl', 'de']
   7 |
>  8 | export const routing = defineRouting({
     |                        ^
   9 |   // A list of all locales that are supported
  10 |   locales: locales,
  11 |
 GET /en 404 in 2ms
```

### Current vs. Expected behavior

This error doesn't exists without **--turbo** and the project run as expected.

Also after a *long* debugging session to find where this came from I found that this line in my tsconfig.json was causing it:

```json
    ""paths"": {""*"": [""types/*.d.ts""]}
```

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.1
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: N/A
  react: 19.0.0-rc.0
  react-dom: 19.0.0-rc.0
  typescript: 5.6.3
Next.js Config:
  output: N/A


-----

I also have the exact same bug on a my laptop running Ubuntu 22 and my intel Mac so I don't think the platform matters
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","次の開発での --turbo フラグのバグと ""paths"": {""*"": [""types/*.d.ts""]} in tsconfig.json","### この問題を再現するコードへのリンク

https://github.com/Yohannfra/turbo-bug-reproduction-repo

### 再現手順

1. リンクされたリポジトリをクローンします
2. pnpm install && pnpm run dev を実行します
3. localhost:3000 を開きます

このエラーメッセージが表示されます

```
 ✓ Ready in 679ms
 ⨯ src/i18n/routing.ts (8:24) @ [project]/src/i18n/routing.ts [middleware] (ecmascript)
 ⨯ Error: defineRouting is not defined
    at <unknown> ([project]/src/i18n/routing.ts [middleware] (ecmascript) (./src/i18n/routing.ts:8:24)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5)
    at getOrInstantiateModuleFromParent (./[turbopack]/browser/runtime/base/dev-base.ts:132:10)
    at esmImport (./[turbopack]/shared/runtime-utils.ts:214:18)
    at <unknown> ([project]/src/middleware.ts [middleware] (ecmascript) (./src/middleware.ts:3:1)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5) {
  digest: undefined
}
   6 | export const locales: LocaleType[] = ['fr', 'en', 'es', 'it', 'nl', 'de']
   7 |
>  8 | export const routing = defineRouting({
     |                        ^
   9 |   // サポートされているすべてのロケールのリスト
  10 |   locales: locales,
  11 |
 ✓ Compiled /_error in 401ms
 GET / 404 in 2ms
 ○ Compiling /_not-found/page ...
 ✓ Compiled /_not-found/page in 701ms
 ⨯ src/i18n/routing.ts (8:24) @ [project]/src/i18n/routing.ts [middleware] (ecmascript)
 ⨯ Error: defineRouting is not defined
    at <unknown> ([project]/src/i18n/routing.ts [middleware] (ecmascript) (./src/i18n/routing.ts:8:24)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5)
    at getOrInstantiateModuleFromParent (./[turbopack]/browser/runtime/base/dev-base.ts:132:10)
    at esmImport (./[turbopack]/shared/runtime-utils.ts:214:18)
    at <unknown> ([project]/src/middleware.ts [middleware] (ecmascript) (./src/middleware.ts:3:1)
    at <unknown> (./[turbopack]/browser/runtime/base/dev-base.ts:205:21)
    at runModuleExecutionHooks (./[turbopack]/browser/runtime/base/dev-base.ts:264:5)
    at instantiateModule (./[turbopack]/browser/runtime/base/dev-base.ts:203:5) {
  digest: undefined
}
   6 | export const locales: LocaleType[] = ['fr', 'en', 'es', 'it', 'nl', 'de']
   7 |
>  8 | export const routing = defineRouting({
     |                        ^
   9 |   // サポートされているすべてのロケールのリスト
  10 |   locales: locales,
  11 |
 GET /en 404 in 2ms
```

### 現在の動作と期待される動作

このエラーは **--turbo** を使用しない場合には存在せず、プロジェクトは期待通りに実行されます。

また、この問題の原因を見つけるために*長い*デバッグセッションを行った結果、私の tsconfig.json のこの行が原因であることがわかりました：

```json
    ""paths"": {""*"": [""types/*.d.ts""]}
```

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能な CPU コア: 10
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.1
関連パッケージ:
  next: 15.0.2 // 利用可能な最新バージョンが検出されました (15.0.2)。
  eslint-config-next: N/A
  react: 19.0.0-rc.0
  react-dom: 19.0.0-rc.0
  typescript: 5.6.3
Next.js 設定:
  output: N/A

-----

私のノートパソコンである Ubuntu 22 とインテル Mac でも同じバグが発生しているため、プラットフォームは関係ないと思います
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Circular Structure Error When passing complex objects with circular reference to another server component or function in Next 15,"### Link to the code that reproduces this issue

https://github.com/webplantmedia/html-react-parser/tree/master/examples/nextjs

### To Reproduce

I can't seem to pass complex objects to other server components or functions without getting a circular structure error. Specifically, I'm using html-react-parser and manipulating certain elements to render custom jsx. It worked fine and without error in nextjs 14.

layout.tsx
```js
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang=""en"">
      <body>{children}</body>
    </html>
  )
}
```

page.tsx
```js
import parse, { Element } from 'html-react-parser';

type Props = {
  params: { slug: string };
};

export default async function Page({ params }: Props) {
  return (
    <main>
      <h1 className=""title"">
        {parse(
          `
            Welcome to <a href=""https://nextjs.org"">Next.js</a>
            and HTMLReactParser!
          `,
          {
            replace(domNode) {
              function test(node: any) {
                console.log(node);
              }
              test(domNode);

              if (domNode instanceof Element && domNode.name === 'a') {
                return (
                  <a href=""https://nextjs.org"" rel=""noopener noreferrer"">
                    Next.js
                  </a>
                );
              }
            },
          }
        )}
      </h1>
    </main>
  );
}
```

Error:
```
Error: Converting circular structure to JSON
    --> starting at object with constructor 'Text'
    |     property 'next' -> object with constructor 'Element'
    --- property 'prev' closes the circle
    at test (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?0:20:33)
    at Object.replace (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?1:22:21)
    at Page (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?2:14:84)
    at resolveErrorDev (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:1792:63)
    at processFullStringRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2071:17)
    at processFullBinaryRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2059:7)
    at progress (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2262:17)
```

<img width=""779"" alt=""image"" src=""https://github.com/user-attachments/assets/6b8e8c1e-c1a0-4667-91d9-8197201ecbef"">


package.json
```json
{
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start""
  },
  ""dependencies"": {
    ""html-react-parser"": ""^5.1.18"",
    ""next"": ""^15.0.2"",
    ""react"": ""^18.3.1"",
    ""react-dom"": ""^18.3.1""
  },
  ""devDependencies"": {
    ""@types/node"": ""22.8.6"",
    ""@types/react"": ""18.3.12"",
    ""typescript"": ""5.6.3""
  }
}
```

I just pushed a commit with the code. Thanks so much for looking into it! I have based a very big next js project in using this react parser. I'm hoping there is an easy fix to this without having to refactor lots of code.

https://github.com/webplantmedia/html-react-parser/tree/master/examples/nextjs

### Current vs. Expected behavior

The bug is not being able to pass a complex object to different server functions or server components. It was not an issue in Next 14.

### Provide environment information

```bash
chrisb@Chriss-MacBook-Pro nextjs % npm run info

> info
> next info

warning package.json: No license field

Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I tested with next 15.0.2",循環構造エラー：Next 15で複雑なオブジェクトを別のサーバーコンポーネントや関数に渡す際の問題,"### この問題を再現するコードへのリンク

https://github.com/webplantmedia/html-react-parser/tree/master/examples/nextjs

### 再現手順

複雑なオブジェクトを他のサーバーコンポーネントや関数に渡そうとすると、循環構造エラーが発生します。具体的には、html-react-parserを使用して特定の要素を操作し、カスタムjsxをレンダリングしています。これはNext.js 14では問題なく動作していました。

layout.tsx
```js
export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang=""en"">
      <body>{children}</body>
    </html>
  )
}
```

page.tsx
```js
import parse, { Element } from 'html-react-parser';

type Props = {
  params: { slug: string };
};

export default async function Page({ params }: Props) {
  return (
    <main>
      <h1 className=""title"">
        {parse(
          `
            Welcome to <a href=""https://nextjs.org"">Next.js</a>
            and HTMLReactParser!
          `,
          {
            replace(domNode) {
              function test(node: any) {
                console.log(node);
              }
              test(domNode);

              if (domNode instanceof Element && domNode.name === 'a') {
                return (
                  <a href=""https://nextjs.org"" rel=""noopener noreferrer"">
                    Next.js
                  </a>
                );
              }
            },
          }
        )}
      </h1>
    </main>
  );
}
```

エラー:
```
Error: Converting circular structure to JSON
    --> starting at object with constructor 'Text'
    |     property 'next' -> object with constructor 'Element'
    --- property 'prev' closes the circle
    at test (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?0:20:33)
    at Object.replace (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?1:22:21)
    at Page (rsc://React/Server/webpack-internal:///(rsc)/./app/page.tsx?2:14:84)
    at resolveErrorDev (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:1792:63)
    at processFullStringRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2071:17)
    at processFullBinaryRow (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2059:7)
    at progress (webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js:2262:17)
```

<img width=""779"" alt=""image"" src=""https://github.com/user-attachments/assets/6b8e8c1e-c1a0-4667-91d9-8197201ecbef"">

package.json
```json
{
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start""
  },
  ""dependencies"": {
    ""html-react-parser"": ""^5.1.18"",
    ""next"": ""^15.0.2"",
    ""react"": ""^18.3.1"",
    ""react-dom"": ""^18.3.1""
  },
  ""devDependencies"": {
    ""@types/node"": ""22.8.6"",
    ""@types/react"": ""18.3.12"",
    ""typescript"": ""5.6.3""
  }
}
```

コードを含むコミットをプッシュしました。これを見ていただきありがとうございます！このReactパーサーを使用して非常に大きなNext.jsプロジェクトを構築しています。多くのコードをリファクタリングせずに簡単に修正できることを願っています。

https://github.com/webplantmedia/html-react-parser/tree/master/examples/nextjs

### 現在の動作と期待される動作

バグは、複雑なオブジェクトを異なるサーバー関数やサーバーコンポーネントに渡せないことです。Next 14では問題ではありませんでした。

### 環境情報を提供してください

```bash
chrisb@Chriss-MacBook-Pro nextjs % npm run info

> info
> next info

warning package.json: No license field

Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

不明

### 影響を受けるステージはどれですか？（すべて選択）

next dev（ローカル）

### 追加のコンテキスト

Next 15.0.2でテストしました。"
S1,P1,Build failing to complete only in CI,"### Link to the code that reproduces this issue

https://github.com/codecov/codecov-javascript-bundler-plugins/tree/main/integration-tests/test-apps/nextjs

### To Reproduce

We have been unable to reproduce the issue locally, both while attempting to build the app standalone, as well as attempting to run the integration tests locally as well. However, it has been failing consistently in our CI pipeline, while attempting to debug this issue: [Pull Request](https://github.com/codecov/codecov-javascript-bundler-plugins/pull/185).

### Current vs. Expected behavior

Our test application was building fine and passing our integration tests on Next 14:

```
  > nextjs@0.1.0 build /home/runner/work/codecov-javascript-bundler-plugins/codecov-javascript-bundler-plugins/integration-tests/test-apps/nextjs
  > next build
  
  ⚠ No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache
  Attention: Next.js now collects completely anonymous telemetry regarding usage.
  This information is used to shape Next.js' roadmap and prioritize features.
  You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
  https://nextjs.org/telemetry
  
    ▲ Next.js 14.2.5
  
     Creating an optimized production build ...
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] Using compareSha: null
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v14-server-cjs
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] Using compareSha: null
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v14-edge-server-array-push
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] Using compareSha: null
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v14-client-array-push
   ✓ Compiled successfully
     Linting and checking validity of types ...
  
   ⚠ The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/basic-features/eslint#migrating-existing-config
     Collecting page data ...
     Generating static pages (0/5) ...
     Generating static pages (1/5) 
     Generating static pages (2/5) 
     Generating static pages (3/5) 
   ✓ Generating static pages (5/5)
     Finalizing page optimization ...
     Collecting build traces ...
  
  Route (app)                              Size     First Load JS
  ┌ ○ /                                    5.44 kB        92.5 kB
  └ ○ /_not-found                          872 B          87.9 kB
  + First Load JS shared by all            87 kB
    ├ chunks/538-5b4d10cffa6c1cf9.js       31.5 kB
    ├ chunks/7820dfc2-ee432587636317c8.js  53.6 kB
    └ other shared chunks (total)          1.86 kB
  
  
  ○  (Static)  prerendered as static content
  
  (pass) Generating nextjs stats > 14 > matches the snapshot [22997.23ms]
```

However, after updating to Next 15, and also updating other dependencies (React, etc.) our builds are no longer successful, in turn our tests are timing out:

```
> nextjs@0.1.0 build /home/runner/work/codecov-javascript-bundler-plugins/codecov-javascript-bundler-plugins/integration-tests/test-apps/nextjs
  > next build
  
  ⚠ No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache
  Attention: Next.js now collects completely anonymous telemetry regarding usage.
  This information is used to shape Next.js' roadmap and prioritize features.
  You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
  https://nextjs.org/telemetry
  
     ▲ Next.js 15.0.2
  
     Creating an optimized production build ...
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 8e34196ab03754139953f22bff547edf44d7621a
  [codecov] Using compareSha: 7e994169ed0ed50d070bb2f9203[42](https://github.com/codecov/codecov-javascript-bundler-plugins/actions/runs/11615654479/job/32346786999#step:10:43)d0968eb04a6
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v15-server-cjs
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 8e34196ab03754139953f22bff547edf[44](https://github.com/codecov/codecov-javascript-bundler-plugins/actions/runs/11615654479/job/32346786999#step:10:45)d7621a
  [codecov] Using compareSha: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v15-edge-server-array-push
  [codecov] Detecting CI provider
  [codecov] Detected CI provider: GitHub Actions
  [codecov] Using commit: 8e34196ab03754139953f22bff5[47](https://github.com/codecov/codecov-javascript-bundler-plugins/actions/runs/11615654479/job/32346786999#step:10:48)edf44d7621a
  [codecov] Using compareSha: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] Attempting to fetch `get-pre-signed-url`, attempt: 1
  [codecov] Successfully pre-signed URL fetched
  [codecov] Attempting to fetch `upload-stats`, attempt: 1
  [codecov] Successfully uploaded stats for bundle: test-nextjs-v15-client-array-push
   ✓ Compiled successfully
     Linting and checking validity of types ...
     Collecting page data ...
     Generating static pages (0/5) ...
     Generating static pages (1/5) 
     Generating static pages (2/5) 
     Generating static pages (3/5) 
   ✓ Generating static pages (5/5)
     Finalizing page optimization ...
     Collecting build traces ...
  
  Error: 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
        at 
  error: Test ""matches the snapshot"" timed out after 2[50](https://github.com/codecov/codecov-javascript-bundler-plugins/actions/runs/11615654479/job/32346786999#step:10:51)00ms
```

And occasionally we saw this error appear, however due to the nature of GHA (I believe), we're not able to get the full picture:

![Screenshot 2024-10-28 at 14 13 57](https://github.com/user-attachments/assets/4b13d074-c7b4-4ca0-a97c-6098d4c0c138)


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024
  Available memory (MB): 15982
  Available CPU cores: 4
Binaries:
  Node: 18.20.4
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: 9.12.3
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: 14.2.3
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.3.3
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

Just to add as well, this build is also failing on Node 20.x.",ビルドがCIでのみ完了しない,"### コードのリンク

https://github.com/codecov/codecov-javascript-bundler-plugins/tree/main/integration-tests/test-apps/nextjs

### 再現手順

私たちは、アプリをスタンドアロンでビルドしようとしたり、ローカルで統合テストを実行しようとしたりしても、問題を再現できませんでした。しかし、CIパイプラインでは一貫して失敗しており、この問題をデバッグしようとしています: [プルリクエスト](https://github.com/codecov/codecov-javascript-bundler-plugins/pull/185)。

### 現在の動作と期待される動作

私たちのテストアプリケーションは、Next 14で正常にビルドされ、統合テストに合格していました：

```
  > nextjs@0.1.0 build /home/runner/work/codecov-javascript-bundler-plugins/codecov-javascript-bundler-plugins/integration-tests/test-apps/nextjs
  > next build
  
  ⚠ ビルドキャッシュが見つかりません。より速い再ビルドのためにビルドキャッシュを設定してください。詳細はこちら: https://nextjs.org/docs/messages/no-cache
  注意: Next.jsは、使用状況に関する完全に匿名のテレメトリを収集します。
  この情報は、Next.jsのロードマップを形成し、機能の優先順位を決定するために使用されます。
  この匿名プログラムに参加したくない場合は、以下のURLを訪れてオプトアウトする方法を学ぶことができます:
  https://nextjs.org/telemetry
  
    ▲ Next.js 14.2.5
  
     最適化されたプロダクションビルドを作成しています ...
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出しました: GitHub Actions
  [codecov] コミットを使用中: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] compareShaを使用中: null
  [codecov] `get-pre-signed-url`を取得しようとしています、試行: 1
  [codecov] 成功裏にプレサイン済みURLを取得しました
  [codecov] `upload-stats`を取得しようとしています、試行: 1
  [codecov] 成功裏にバンドルの統計をアップロードしました: test-nextjs-v14-server-cjs
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出しました: GitHub Actions
  [codecov] コミットを使用中: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] compareShaを使用中: null
  [codecov] `get-pre-signed-url`を取得しようとしています、試行: 1
  [codecov] 成功裏にプレサイン済みURLを取得しました
  [codecov] `upload-stats`を取得しようとしています、試行: 1
  [codecov] 成功裏にバンドルの統計をアップロードしました: test-nextjs-v14-edge-server-array-push
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出しました: GitHub Actions
  [codecov] コミットを使用中: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] compareShaを使用中: null
  [codecov] `get-pre-signed-url`を取得しようとしています、試行: 1
  [codecov] 成功裏にプレサイン済みURLを取得しました
  [codecov] `upload-stats`を取得しようとしています、試行: 1
  [codecov] 成功裏にバンドルの統計をアップロードしました: test-nextjs-v14-client-array-push
   ✓ 成功裏にコンパイルされました
     リンティングと型の有効性をチェック中 ...
  
   ⚠ Next.jsプラグインがESLint設定で検出されませんでした。詳細はこちら: https://nextjs.org/docs/basic-features/eslint#migrating-existing-config
     ページデータを収集中 ...
     静的ページを生成中 (0/5) ...
     静的ページを生成中 (1/5) 
     静的ページを生成中 (2/5) 
     静的ページを生成中 (3/5) 
   ✓ 静的ページを生成中 (5/5)
     ページ最適化を最終化中 ...
     ビルドトレースを収集中 ...
  
  ルート (アプリ)                              サイズ     最初のロードJS
  ┌ ○ /                                    5.44 kB        92.5 kB
  └ ○ /_not-found                          872 B          87.9 kB
  + すべての共有による最初のロードJS            87 kB
    ├ chunks/538-5b4d10cffa6c1cf9.js       31.5 kB
    ├ chunks/7820dfc2-ee432587636317c8.js  53.6 kB
    └ その他の共有チャンク (合計)          1.86 kB
  
  
  ○  (静的)  静的コンテンツとしてプリレンダリングされました
  
  (合格) nextjs統計を生成中 > 14 > スナップショットと一致 [22997.23ms]
```

しかし、Next 15にアップデートし、他の依存関係（Reactなど）もアップデートした後、ビルドが成功しなくなり、テストがタイムアウトしています：

```
> nextjs@0.1.0 build /home/runner/work/codecov-javascript-bundler-plugins/codecov-javascript-bundler-plugins/integration-tests/test-apps/nextjs
  > next build
  
  ⚠ ビルドキャッシュが見つかりません。より速い再ビルドのためにビルドキャッシュを設定してください。詳細はこちら: https://nextjs.org/docs/messages/no-cache
  注意: Next.jsは、使用状況に関する完全に匿名のテレメトリを収集します。
  この情報は、Next.jsのロードマップを形成し、機能の優先順位を決定するために使用されます。
  この匿名プログラムに参加したくない場合は、以下のURLを訪れてオプトアウトする方法を学ぶことができます:
  https://nextjs.org/telemetry
  
     ▲ Next.js 15.0.2
  
     最適化されたプロダクションビルドを作成しています ...
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出しました: GitHub Actions
  [codecov] コミットを使用中: 8e34196ab03754139953f22bff547edf44d7621a
  [codecov] compareShaを使用中: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] `get-pre-signed-url`を取得しようとしています、試行: 1
  [codecov] 成功裏にプレサイン済みURLを取得しました
  [codecov] `upload-stats`を取得しようとしています、試行: 1
  [codecov] 成功裏にバンドルの統計をアップロードしました: test-nextjs-v15-server-cjs
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出しました: GitHub Actions
  [codecov] コミットを使用中: 8e34196ab03754139953f22bff547edf44d7621a
  [codecov] compareShaを使用中: 7e994169ed0ed50d070bb2f920342d0968eb04a6
  [codecov] `get-pre-signed-url`を取得しようとしています、試行: 1
  [codecov] 成功裏にプレサイン済みURLを取得しました
  [codecov] `upload-stats`を取得しようとしています、試行: 1
  [codecov] 成功裏にバンドルの統計をアップロードしました: test-nextjs-v15-edge-server-array-push
  [codecov] CIプロバイダーを検出中
  [codecov] CIプロバイダーを検出"
S1,P1,Static indicator shouldn't be shown when searchParams is being used,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/awesome-shockley-46z7c5

### To Reproduce

1. Start the dev server
2. Create a new page and use `searchParams`
```tsx
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{a: string}>;
}) {
  const sp = await searchParams;

  return (
    <div>
      <p>sp: {sp.a}</p>
    </div>
  );
}
```
3. Visit the page on the browser and the static indicator should not be shown here since `searchParams` is considered a Dynamic API

Build time:
In the build time process, though, the page is correctly rendered as a dynamic page (the `/sp` route):
<img width=""487"" alt=""image"" src=""https://github.com/user-attachments/assets/7d6a956f-e018-43e8-a5f0-a4626a617fe0"">


### Current vs. Expected behavior

The static indicator should not be shown here since `searchParams` is considered a Dynamic API.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.3-canary.2 // Latest available version is detected (15.0.3-canary.2).
  eslint-config-next: N/A
  react: 19.0.0-rc-603e6108-20241029
  react-dom: 19.0.0-rc-603e6108-20241029
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
searchParamsが使用されている場合、静的インジケーターは表示されるべきではない","本文:
### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/awesome-shockley-46z7c5

### 再現手順

1. 開発サーバーを起動する
2. 新しいページを作成し、`searchParams`を使用する
```tsx
export default async function Page({
  searchParams,
}: {
  searchParams: Promise<{a: string}>;
}) {
  const sp = await searchParams;

  return (
    <div>
      <p>sp: {sp.a}</p>
    </div>
  );
}
```
3. ブラウザでページを訪問すると、`searchParams`は動的APIと見なされるため、静的インジケーターはここに表示されるべきではない

ビルド時間:
ビルド時間プロセスでは、ページは正しく動的ページとしてレンダリングされる（`/sp`ルート）:
<img width=""487"" alt=""image"" src=""https://github.com/user-attachments/assets/7d6a956f-e018-43e8-a5f0-a4626a617fe0""> 

### 現在の動作と期待される動作

静的インジケーターはここに表示されるべきではない、なぜなら`searchParams`は動的APIと見なされるからである。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.3-canary.2 // 検出された最新の利用可能バージョンは (15.0.3-canary.2)。
  eslint-config-next: N/A
  react: 19.0.0-rc-603e6108-20241029
  react-dom: 19.0.0-rc-603e6108-20241029
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,Page with ISR (generateStaticParams() and dynamicParams=true) is taking too long for not generated content,"### Link to the code that reproduces this issue

https://github.com/vojtechmares/next-isr-bug

### To Reproduce

1. Deploy Next.js in Docker to Kubernetes
2. Use ISR route with generateStaticParams() to pregenerate paths
3. Use `dynamicParams=true`
4. Try navigating to a page that has not been pregenerated (504 on Ingress-NGINX)

- Next cache (`.next/cache`) is Kubernetes ""emptyDir"" ephemeral volume (not persistent between deployments or different instances)

My `Dockerfile`:

```dockerfile
# syntax=docker/dockerfile:1
FROM node:22-alpine AS base

FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat

WORKDIR /app

RUN corepack enable pnpm

COPY package.json pnpm-lock.yaml* ./
RUN pnpm install


FROM base AS builder

WORKDIR /app

RUN corepack enable pnpm

COPY --from=deps /app/node_modules ./node_modules
COPY . .

ARG CMS_API_URL=""https://cms.mareshq.com/api""
ARG CMS_API_TOKEN

# COPY .env.production.sample .env.production
RUN pnpm run build

FROM base AS runtime

WORKDIR /app

ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/images ./images
COPY --from=builder --chown=nextjs:nodejs /app/content ./content

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME=0.0.0.0

CMD [""node"", ""./server.js""]
```

### Current vs. Expected behavior

I expect the page to generate and save itself into cache for later use, instead the page is taking too long to load forcing ingress-nginx to return 504 - Gateway timeout

This is an issue only on Kubernetes, local development works as expected.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.2 // Latest available version is detected (15.0.2).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 4.9.5
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

_No response_",ISRを使用したページ（generateStaticParams()とdynamicParams=true）が生成されていないコンテンツのために時間がかかりすぎる,"### この問題を再現するコードへのリンク

https://github.com/vojtechmares/next-isr-bug

### 再現手順

1. DockerでNext.jsをKubernetesにデプロイする
2. generateStaticParams()を使用してパスを事前生成するISRルートを使用する
3. `dynamicParams=true`を使用する
4. 事前生成されていないページに移動しようとすると（Ingress-NGINXで504エラー）

- Nextキャッシュ（`.next/cache`）はKubernetesの「emptyDir」エフェメラルボリューム（デプロイ間や異なるインスタンス間で永続的ではない）

私の`Dockerfile`：

```dockerfile
# syntax=docker/dockerfile:1
FROM node:22-alpine AS base

FROM base AS deps
# libc6-compatが必要な理由を理解するには、https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpineを確認してください。
RUN apk add --no-cache libc6-compat

WORKDIR /app

RUN corepack enable pnpm

COPY package.json pnpm-lock.yaml* ./ 
RUN pnpm install

FROM base AS builder

WORKDIR /app

RUN corepack enable pnpm

COPY --from=deps /app/node_modules ./node_modules
COPY . .

ARG CMS_API_URL=""https://cms.mareshq.com/api""
ARG CMS_API_TOKEN

# COPY .env.production.sample .env.production
RUN pnpm run build

FROM base AS runtime

WORKDIR /app

ENV NODE_ENV=production

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

COPY --from=builder /app/public ./public

# 自動的に出力トレースを活用してイメージサイズを削減
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/images ./images
COPY --from=builder --chown=nextjs:nodejs /app/content ./content

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME=0.0.0.0

CMD [""node"", ""./server.js""]
```

### 現在の動作と期待される動作

ページが生成され、後で使用するためにキャッシュに保存されることを期待していますが、代わりにページの読み込みに時間がかかりすぎて、ingress-nginxが504 - Gateway timeoutを返しています。

これはKubernetesでのみ発生する問題で、ローカル開発では期待通りに動作します。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Thu Oct 10 21:03:15 PDT 2024; root:xnu-11215.41.3~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.2 // 利用可能な最新バージョンが検出されました (15.0.2)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 4.9.5
Next.js設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（すべて選択してください）

ランタイム

### 影響を受けるステージはどれですか？（すべて選択してください）

その他（デプロイ済み）

### 追加のコンテキスト

_回答なし_"
S1,P1,"Multiple Google fonts not accessible globally, when imported in the root layout page, in the same format as the init. Geist fonts.","### Link to the code that reproduces this issue

https://github.com/winterdelta/font-investigate

### To Reproduce

Init. a new `repo`, e.g. via `bun create next-app`. Import `next/google/fonts`. Add the `fonts` in the root layout component:


```
import { IBM_Plex_Mono, IBM_Plex_Sans } from ""next/font/google"";

<body className={`${ibm_mono.className} ${ibm_sans.className}`}>
    {children}
</body>
```


Here, if the order of the fonts is:

- mono and sans (in sequence) > mono font will be default, throughout the app.
- sans and mono (in sequence) > sans font will be default, throughout the app.

even if the CSS variable, e.g. `font-family: var(--font-ibm-plex-mono);` declares otherwise.

The second font will not be available, e.g. when declared via CSS variables, possibly, other inconsistent behaviour too.

### Current vs. Expected behavior

On init., 2 Geist fonts are installed via `create next-app` and are declared as a template-literal in the root layout. If the user replaces these local Geist fonts for Google fonts **in the same format**, only the first font will be accessible. Additional / multiple fonts will not be accessible from nested components.

---

Behaviour for Google fonts should match the behaviour of the Geist local fonts. Adding multiple fonts as template literals into the root body tag should allow access through nested components.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Fri Aug 16 19:20:34 PDT 2024; root:xnu-11215.40.42~4/RELEASE_ARM64_T8112
  Available memory (MB): 8192
  Available CPU cores: 8
Binaries:
  Node: 22.2.0
  npm: 10.7.0
  Yarn: 1.22.21
  pnpm: 9.0.6
Relevant Packages:
  next: 15.0.3-canary.1 // Latest available version is detected (15.0.3-canary.1).
  eslint-config-next: 15.0.1
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Font (next/font)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

_No response_","タイトル:
グローバルにアクセスできない複数のGoogleフォント、ルートレイアウトページで初期のGeistフォントと同じ形式でインポートした場合","本文:
### この問題を再現するためのコードへのリンク

https://github.com/winterdelta/font-investigate

### 再現手順

新しい`repo`を初期化します。例えば、`bun create next-app`を使用します。`next/google/fonts`をインポートします。ルートレイアウトコンポーネントに`fonts`を追加します：

```
import { IBM_Plex_Mono, IBM_Plex_Sans } from ""next/font/google"";

<body className={`${ibm_mono.className} ${ibm_sans.className}`}>
    {children}
</body>
```

ここで、フォントの順序が次のようになると：

- モノとサン（順番に） > モノフォントがアプリ全体でデフォルトになります。
- サンとモノ（順番に） > サンフォントがアプリ全体でデフォルトになります。

たとえCSS変数、例えば`font-family: var(--font-ibm-plex-mono);`が他のことを宣言していてもです。

2番目のフォントは、CSS変数を介して宣言された場合、利用できなくなります。おそらく、他の不一致な動作もあります。

### 現在の動作と期待される動作

初期化時に、2つのGeistフォントが`create next-app`を介してインストールされ、ルートレイアウトでテンプレートリテラルとして宣言されます。ユーザーがこれらのローカルGeistフォントをGoogleフォントに**同じ形式で**置き換えると、最初のフォントのみがアクセス可能になります。追加の複数のフォントは、ネストされたコンポーネントからアクセスできなくなります。

---

Googleフォントの動作は、Geistローカルフォントの動作と一致する必要があります。ルートボディタグに複数のフォントをテンプレートリテラルとして追加することで、ネストされたコンポーネントを通じてアクセスできるようにするべきです。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Fri Aug 16 19:20:34 PDT 2024; root:xnu-11215.40.42~4/RELEASE_ARM64_T8112
  利用可能なメモリ (MB): 8192
  利用可能なCPUコア: 8
バイナリ：
  Node: 22.2.0
  npm: 10.7.0
  Yarn: 1.22.21
  pnpm: 9.0.6
関連パッケージ：
  next: 15.0.3-canary.1 // 最新の利用可能なバージョンが検出されました (15.0.3-canary.1)。
  eslint-config-next: 15.0.1
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

フォント (next/font)

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

_なし_"
S1,P1,updating head meta data based on the fetched data in app router,"### Link to the code that reproduces this issue

https://github.com/mehrizi/nextjs-dynamic-title

### To Reproduce

Hello and hardworking,
I have simple pages in _App Router_ like `app/page/[id]/page.tsx` in which the `id` is being used in the page component body to fetch some data:
```ts
export default async function Page({ params }) {
    const data = await getData(params.id)

```
After this fetch I need to set page title based on the fetched data but `<Head>` component is not working in app router (As per documentation and experience).
The alternative seems to export async function `generateMetadata()` and call the fetch again to get the data!
This means for any such a page (that has dynamicly loaded title) I have to call the server function twice and this leads to double fetch calls.
I searched a lot for any alternative solution but couldn't find any!

### Current vs. Expected behavior

If the `<Head>` component could also work in app router this issue could have been solved!

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #47~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Oct  2 16:16:55 UTC 2
  Available memory (MB): 15869
  Available CPU cores: 6
Binaries:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-rc.1 // Latest available version is detected (15.0.0-rc.1).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Metadata, Performance

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

_No response_","タイトル:
アプリルーターで取得したデータに基づいてヘッダーメタデータを更新する","本文:
### この問題を再現するためのコードへのリンク

https://github.com/mehrizi/nextjs-dynamic-title

### 再現手順

こんにちは、そしてお疲れ様です。
私は、`app/page/[id]/page.tsx`のようなシンプルなページを持っており、ここで`id`はページコンポーネントの本体でデータを取得するために使用されています：
```ts
export default async function Page({ params }) {
    const data = await getData(params.id)
```
このデータを取得した後、取得したデータに基づいてページタイトルを設定する必要がありますが、アプリルーターでは`<Head>`コンポーネントが機能しません（ドキュメントと経験に基づく）。
代替手段として、非同期関数`generateMetadata()`をエクスポートし、再度データを取得する必要があるようです！
これは、動的に読み込まれるタイトルを持つページごとにサーバー関数を2回呼び出す必要があり、これが二重の取得呼び出しにつながります。
代替の解決策を探しましたが、見つかりませんでした！

### 現在の動作と期待される動作

もし`<Head>`コンポーネントがアプリルーターでも機能すれば、この問題は解決できたでしょう！

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #47~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Oct  2 16:16:55 UTC 2
  利用可能なメモリ (MB): 15869
  利用可能なCPUコア: 6
バイナリ：
  Node: 20.12.2
  npm: 10.5.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.0-rc.1 // 検出された最新の利用可能バージョンは15.0.0-rc.1です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

開発者体験、メタデータ、パフォーマンス

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）

### 追加のコンテキスト

_応答なし_"
S1,P1,OPTIONS request stuck when using edge runtime,"### Link to the code that reproduces this issue

https://github.com/yuluyi/edge-runtime-stuck-on-options

### To Reproduce

```
pnpm run dev
curl 'http://localhost:3000' -X 'OPTIONS'
```

### Current vs. Expected behavior

It should work.


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:13 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8112
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.2.0
  npm: 9.6.6
  Yarn: N/A
  pnpm: 9.5.0
Relevant Packages:
  next: 15.0.2-canary.9 // There is a newer canary version (15.0.3-canary.1) available, please upgrade!
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
 ⚠ There is a newer canary version (15.0.3-canary.1) available, please upgrade!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Navigation, Pages Router, Parallel & Intercepting Routes, Partial Prerendering (PPR), Performance, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed), Other (Deployed)

### Additional context

OPTIONS request stuck when using edge runtime. I occasionally found some timeout logs of my project deployed on Vercel. All caused by an OPTIONS request to my root page. After some experiment, I found even I run: next dev, I can still reproduce the issue, as long as I add
```
export const runtime = 'edge'
```
to my page.tsx.

If I use node runtime, everything is fine.",OPTIONSリクエストがエッジランタイムを使用しているときにスタックする,"### この問題を再現するコードへのリンク

https://github.com/yuluyi/edge-runtime-stuck-on-options

### 再現手順

```
pnpm run dev
curl 'http://localhost:3000' -X 'OPTIONS'
```

### 現在の動作と期待される動作

動作するはずです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:13 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8112
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.2.0
  npm: 9.6.6
  Yarn: N/A
  pnpm: 9.5.0
関連パッケージ:
  next: 15.0.2-canary.9 // 新しいカナリアバージョン (15.0.3-canary.1) が利用可能です。アップグレードしてください！
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  出力: N/A
 ⚠ 新しいカナリアバージョン (15.0.3-canary.1) が利用可能です。アップグレードしてください！
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、ナビゲーション、ページルーター、並行およびインターセプトルート、部分的なプリレンダリング (PPR)、パフォーマンス、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

エッジランタイムを使用しているときにOPTIONSリクエストがスタックします。Vercelにデプロイされたプロジェクトのタイムアウトログを時折見つけました。すべてはルートページへのOPTIONSリクエストによって引き起こされました。いくつかの実験の結果、次のように実行しても問題を再現できることがわかりました: next devを実行し、ページ.tsxに
```
export const runtime = 'edge'
```
を追加する限り。

ノードランタイムを使用すれば、すべては正常です。"
S1,P1,router.asPath is wrong on vercel,"### Link to the code that reproduces this issue

https://github.com/mrbirddev/fontsensei/commit/5a04164bc78771cad30fee3408ad38f93fd43e2b

### To Reproduce

1. deploy this commit on vercel
https://github.com/mrbirddev/fontsensei/commit/5a04164bc78771cad30fee3408ad38f93fd43e2b

--> vercel URL
https://fontsensei-4tsd0b9mj-mr-birds-projects.vercel.app

2. Visit the path `/ja/tags/groovy`

3. Check the rendering results of these lines 
https://github.com/mrbirddev/fontsensei/blob/5a04164bc78771cad30fee3408ad38f93fd43e2b/src/browser/i18n/ChooseLocaleModal.tsx#L26-L29


### Current vs. Expected behavior

#### Expected
It works fine locally after `yarn build` & `yarn start`. SSR on localhost
```
<a class=""link link-ghost"" href=""/tag/groovy"">English</a>
<a class=""link link-ghost"" href=""/es/tag/groovy"">Español</a>
<a class=""link link-ghost"" href=""/pt-br/tag/groovy"">Português do Brasil</a>
<a class=""link link-ghost"" href=""/de/tag/groovy"">Deutsch</a>
...
```

#### Not expected
SSR on vercel.
```
<a class=""link link-ghost"" href=""/ja/tag/groovy?nxtPslugList=groovy"">English</a>
<a class=""link link-ghost"" href=""/es/ja/tag/groovy?nxtPslugList=groovy"">Español</a>
<a class=""link link-ghost"" href=""/pt-br/ja/tag/groovy?nxtPslugList=groovy"">Português do Brasil</a>
<a class=""link link-ghost"" href=""/de/ja/tag/groovy?nxtPslugList=groovy"">Deutsch</a>
...
```

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.0.0: Fri Sep 15 14:42:42 PDT 2023; root:xnu-10002.1.13~1/RELEASE_X86_64
  Available memory (MB): 65536
  Available CPU cores: 16
Binaries:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.21
  pnpm: N/A
Relevant Packages:
  next: 15.0.3-canary.1
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Internationalization (i18n), Navigation

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

_No response_",ルーターのasPathがvercelで間違っている,"### この問題を再現するコードへのリンク

https://github.com/mrbirddev/fontsensei/commit/5a04164bc78771cad30fee3408ad38f93fd43e2b

### 再現手順

1. このコミットをvercelにデプロイします
https://github.com/mrbirddev/fontsensei/commit/5a04164bc78771cad30fee3408ad38f93fd43e2b

--> vercelのURL
https://fontsensei-4tsd0b9mj-mr-birds-projects.vercel.app

2. パス `/ja/tags/groovy` にアクセスします

3. これらの行のレンダリング結果を確認します 
https://github.com/mrbirddev/fontsensei/blob/5a04164bc78771cad30fee3408ad38f93fd43e2b/src/browser/i18n/ChooseLocaleModal.tsx#L26-L29

### 現在の動作と期待される動作

#### 期待される動作
`yarn build` と `yarn start` の後、ローカルで正常に動作します。ローカルホストでのSSR
```
<a class=""link link-ghost"" href=""/tag/groovy"">English</a>
<a class=""link link-ghost"" href=""/es/tag/groovy"">Español</a>
<a class=""link link-ghost"" href=""/pt-br/tag/groovy"">Português do Brasil</a>
<a class=""link link-ghost"" href=""/de/tag/groovy"">Deutsch</a>
...
```

#### 期待されない動作
vercelでのSSR。
```
<a class=""link link-ghost"" href=""/ja/tag/groovy?nxtPslugList=groovy"">English</a>
<a class=""link link-ghost"" href=""/es/ja/tag/groovy?nxtPslugList=groovy"">Español</a>
<a class=""link link-ghost"" href=""/pt-br/ja/tag/groovy?nxtPslugList=groovy"">Português do Brasil</a>
<a class=""link link-ghost"" href=""/de/ja/tag/groovy?nxtPslugList=groovy"">Deutsch</a>
...
```

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: x64
  バージョン: Darwin Kernel Version 23.0.0: Fri Sep 15 14:42:42 PDT 2023; root:xnu-10002.1.13~1/RELEASE_X86_64
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: 1.22.21
  pnpm: N/A
関連パッケージ:
  next: 15.0.3-canary.1
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.2
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

国際化 (i18n)、ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel (デプロイ済み)

### 追加のコンテキスト

_回答なし_"
S1,P1,`cloneElement` in client component with async server component as children not working,"### Link to the code that reproduces this issue

https://github.com/darthmaim-reproductions/vercel-next.js-72034

### To Reproduce

1. Clone the reproduction
2. `npm i`
3. `npm run dev`
4. Open http://localhost:3000/ and observe error

### Current vs. Expected behavior

#### Current

<details><summary>Expand to see relevant code</summary>
<p>

```tsx
import { FC } from ""react"";
import { ClientComponent } from ""./client-component"";

export default function Home() {
  return (
    <ClientComponent>
      <ServerComponent/>
    </ClientComponent>
  );
}

const ServerComponent: FC = async () => <div>server component</div>
```

```tsx
'use client'

import { cloneElement, FC, ReactElement, use } from ""react""

export const ClientComponent: FC<{ children: ReactElement }> = ({ children }) => { 
  // @ts-ignore uncomment the next line for a workaround
  // if(children.$$typeof === Symbol.for('react.lazy')) { children = use(children._payload); }

  return cloneElement(children, {
    ref: (element) => console.log('ref', element)
  })
}
```

</p>
</details> 

When using `cloneElement` in a client component, and the children is an async server component, this error is thrown:
> Error: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.
> Check the render method of `ClientComponent`.

When the server component is not `async` (or a client component), this just works.

Additionally, adding this line to the client component also makes this work:

```ts
if(children.$$typeof === Symbol.for('react.lazy')) { children = use(children._payload); }
```

#### Expected

Since `cloneElement` works for client components and non-async server components, I expected this to work async server components as well.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 21.6.0: Mon Jun 24 00:56:10 PDT 2024; root:xnu-8020.240.18.709.2~1/RELEASE_X86_64
  Available memory (MB): 16384
  Available CPU cores: 4
Binaries:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.2-canary.11 // Latest available version is detected (15.0.2-canary.11).
  eslint-config-next: N/A
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

This might be a bug in react and not in Next.js.

In earlier versions the children was reported as `<Lazy/>` in react-dev-tools and `cloneElement` was working, now it is shown as `{ $$typeof: Symbol(react.lazy) }` (when not using cloneElement to avoid the error).",`クライアントコンポーネント内の`cloneElement`と非同期サーバーコンポーネントの子要素が機能しない,"### この問題を再現するコードへのリンク

https://github.com/darthmaim-reproductions/vercel-next.js-72034

### 再現手順

1. 再現コードをクローンする
2. `npm i`を実行
3. `npm run dev`を実行
4. http://localhost:3000/ を開き、エラーを観察する

### 現在の動作と期待される動作

#### 現在の動作

<details><summary>関連コードを表示するには展開</summary>
<p>

```tsx
import { FC } from ""react"";
import { ClientComponent } from ""./client-component"";

export default function Home() {
  return (
    <ClientComponent>
      <ServerComponent/>
    </ClientComponent>
  );
}

const ServerComponent: FC = async () => <div>サーバーコンポーネント</div>
```

```tsx
'use client'

import { cloneElement, FC, ReactElement, use } from ""react""

export const ClientComponent: FC<{ children: ReactElement }> = ({ children }) => { 
  // @ts-ignore 次の行をコメント解除するとワークアラウンドになります
  // if(children.$$typeof === Symbol.for('react.lazy')) { children = use(children._payload); }

  return cloneElement(children, {
    ref: (element) => console.log('ref', element)
  })
}
```

</p>
</details> 

クライアントコンポーネント内で`cloneElement`を使用し、子要素が非同期サーバーコンポーネントである場合、次のエラーが発生します：
> エラー：要素の型が無効です：文字列（組み込みコンポーネント用）またはクラス/関数（合成コンポーネント用）が期待されますが、取得したのは：undefinedです。コンポーネントを定義したファイルからエクスポートするのを忘れた可能性があります。または、デフォルトと名前付きのインポートを混同した可能性があります。
> `ClientComponent`のレンダーメソッドを確認してください。

サーバーコンポーネントが非同期でない場合（またはクライアントコンポーネントの場合）、これは正常に動作します。

さらに、クライアントコンポーネントにこの行を追加すると、これも機能します：

```ts
if(children.$$typeof === Symbol.for('react.lazy')) { children = use(children._payload); }
```

#### 期待される動作

`cloneElement`がクライアントコンポーネントおよび非非同期サーバーコンポーネントで機能するため、非同期サーバーコンポーネントでも機能することを期待していました。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 21.6.0: Mon Jun 24 00:56:10 PDT 2024; root:xnu-8020.240.18.709.2~1/RELEASE_X86_64
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 4
バイナリ:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.2-canary.11 // 検出された最新の利用可能なバージョンは15.0.2-canary.11です。
  eslint-config-next: N/A
  react: 19.0.0-rc-02c0e824-20241028
  react-dom: 19.0.0-rc-02c0e824-20241028
  typescript: 5.3.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

これはReactのバグであり、Next.jsのバグではない可能性があります。

以前のバージョンでは、子要素はreact-dev-toolsで`<Lazy/>`として報告され、`cloneElement`は機能していましたが、現在は`{ $$typeof: Symbol(react.lazy) }`として表示されます（エラーを回避するために`cloneElement`を使用しない場合）。"
S1,P1,"Emotion compiler not properly working when using ""paths"" in TypeScript since 13.5.x","### Link to the code that reproduces this issue

https://github.com/Itrulia/material-ui-next-nx

### To Reproduce

1. npm install && npx nx dev emotion-test
2. Open `http://localhost:3000`
3. Inspect the HTML output and see `.mui-fh6enu{color:pink;}.mui-fh6enu .undefined{color:#f00!important;}.mui-bdz642{color:pink;}`

4. Change next to `~13.4.19` and it works. 
5. OR move 

```
${StyledPageWebsite} {
    color: #f00 !important;
  }
```

to the app (for example index.ts) and it works again.

### Current vs. Expected behavior

The emotion plugin does not seem to be applied to a library that is referenced via the tsconfig paths. Component selectors by  emotion thus don't work properly.

Expected (v13.4.x) vs Now (15.0.0)
![image](https://github.com/user-attachments/assets/db1ed3e2-3a25-48dd-a766-b52f263c8e9c)

![image](https://github.com/user-attachments/assets/c05973c4-6ad1-4536-88d1-8bc48b0a8923)



### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 22.5.0: Thu Jun  8 22:22:20 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 14.2.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

SWC

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

When changing next to `~13.4.19` it works again, changing it to `~13.5.0` it stopps working.

At first I thought it was this change: https://github.com/vercel/next.js/commit/311eea4c6ab847548d81421a8edbf86ac77341f9

But this is actually setting it to `@emotion/react`:

```
console.error(isServerLayer, (jsConfig == null ? void 0 : (_jsConfig_compilerOptions4 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions4.jsxImportSource) ?? ((compilerOptions == null ? void 0 : compilerOptions.emotion) && !isServerLayer ? ""@emotion/react"" : ""react""))

> false @emotion/react
```",感情コンパイラがTypeScriptの「paths」を使用する際に正しく動作しない（13.5.x以降）,"### この問題を再現するコードへのリンク

https://github.com/Itrulia/material-ui-next-nx

### 再現手順

1. npm install && npx nx dev emotion-test
2. `http://localhost:3000`を開く
3. HTML出力を検査し、`.mui-fh6enu{color:pink;}.mui-fh6enu .undefined{color:#f00!important;}.mui-bdz642{color:pink;}`を確認する

4. 次を`~13.4.19`に変更すると動作する。
5. または、 

```
${StyledPageWebsite} {
    color: #f00 !important;
  }
```

をアプリ（例えばindex.ts）に移動すると再び動作する。

### 現在の動作と期待される動作

感情プラグインがtsconfigのpathsを介して参照されるライブラリに適用されていないようです。そのため、感情によるコンポーネントセレクタが正しく機能しません。

期待される動作（v13.4.x）と現在の動作（15.0.0）
![image](https://github.com/user-attachments/assets/db1ed3e2-3a25-48dd-a766-b52f263c8e9c)

![image](https://github.com/user-attachments/assets/c05973c4-6ad1-4536-88d1-8bc48b0a8923)

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 22.5.0: Thu Jun  8 22:22:20 PDT 2023; root:xnu-8796.121.3~7/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されました (15.0.1)。
  eslint-config-next: 14.2.3
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

SWC

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

nextを`~13.4.19`に変更すると再び動作しますが、`~13.5.0`に変更すると動作しなくなります。

最初はこの変更が原因だと思いました: https://github.com/vercel/next.js/commit/311eea4c6ab847548d81421a8edbf86ac77341f9

しかし、これは実際には`@emotion/react`に設定しています:

```
console.error(isServerLayer, (jsConfig == null ? void 0 : (_jsConfig_compilerOptions4 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions4.jsxImportSource) ?? ((compilerOptions == null ? void 0 : compilerOptions.emotion) && !isServerLayer ? ""@emotion/react"" : ""react""))

> false @emotion/react
```"
S1,P1,Need support referring same singleton between different page's `getStaticProps` during building time.,"### Link to the code that reproduces this issue

https://github.com/bugs-report/need-support-singleton-for-different-page.git

### To Reproduce

1. Create a ts module, and set and export a singleton, which needs time-costing initializing.
```ts
const buildMySingleton = async ():Promise<{value:string}> => {
  return new Promise((resolve) => {
    console.log(""\nStart initializing my singleton"");

    // Here is a progress of initializing singleton that costs much time
    setTimeout(() => {
      resolve({ value: ""data"" });
    }, 20000);
  });
};

export const MySingleton = await buildMySingleton();
```
2. Refer this singleton in different page's `getStaticProps`.

In PageA,
```ts
import { MySingleton } from ""../lib/my-module"";
export default function PageA(props) {
  return <div>PageA</div>;
}
export const getStaticProps = () => {
  const mySingleton = MySingleton;  // refer the singleton
  return { props: { value: mySingleton.value } };
};
```
And in PageB
```ts
import { MySingleton } from ""../lib/my-module"";
export default function PageB(props) {
  return <div>PageB</div>;
}
export const getStaticProps = () => {
  const mySingleton = MySingleton; // refer the singleton
  return { props: { value: mySingleton.value } };
};
```

And so on, refer this singleton in different pages

4. Run `npm run build` to build the next.js project
5. I find that the terminal outputs `Start initializing my singleton` many times

![image](https://github.com/user-attachments/assets/887d6646-a9d6-4090-9f22-529010e8b707)

This means that in the SSG process of different pages, each page will initialize its own `MySingleton`, and not use the same `MySingleton`.

This will lead to a problem: if initializing `MySingleton` is a very time-consuming process, each page will generate its own `MySingleton`, and this unnecessary multiple initialization will seriously slow down the build performance.

In addition, and more seriously: if initializing the Singleton is not an idempotent operation (such as connecting to a database), then this will cause errors to occur.

### Current vs. Expected behavior

My purpose is set a singleton in a module, and every page's `getStaticProps` should use same one singleton during building time. It means that the module singleton is supposed to be initialized once. Because the singleton initializing is very time-costing.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 36670
  Available CPU cores: 8
Binaries:
  Node: 22.6.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Module Resolution

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_","タイトル:
異なるページの `getStaticProps` で同じシングルトンを参照するためのサポートが必要です。","本文:
### この問題を再現するためのコードへのリンク

https://github.com/bugs-report/need-support-singleton-for-different-page.git

### 再現手順

1. 時間のかかる初期化が必要なシングルトンを設定してエクスポートする ts モジュールを作成します。
```ts
const buildMySingleton = async ():Promise<{value:string}> => {
  return new Promise((resolve) => {
    console.log(""\nシングルトンの初期化を開始します"");

    // ここにシングルトンの初期化にかかる時間の進行があります
    setTimeout(() => {
      resolve({ value: ""data"" });
    }, 20000);
  });
};

export const MySingleton = await buildMySingleton();
```
2. 異なるページの `getStaticProps` でこのシングルトンを参照します。

PageA では、
```ts
import { MySingleton } from ""../lib/my-module"";
export default function PageA(props) {
  return <div>PageA</div>;
}
export const getStaticProps = () => {
  const mySingleton = MySingleton;  // シングルトンを参照
  return { props: { value: mySingleton.value } };
};
```
PageB では
```ts
import { MySingleton } from ""../lib/my-module"";
export default function PageB(props) {
  return <div>PageB</div>;
}
export const getStaticProps = () => {
  const mySingleton = MySingleton; // シングルトンを参照
  return { props: { value: mySingleton.value } };
};
```

このように、異なるページでこのシングルトンを参照します。

4. `npm run build` を実行して next.js プロジェクトをビルドします。
5. ターミナルに `シングルトンの初期化を開始します` と何度も出力されることがわかります。

![image](https://github.com/user-attachments/assets/887d6646-a9d6-4090-9f22-529010e8b707)

これは、異なるページの SSG プロセスで、各ページが独自の `MySingleton` を初期化し、同じ `MySingleton` を使用していないことを意味します。

これにより、次の問題が発生します: `MySingleton` の初期化が非常に時間のかかるプロセスである場合、各ページが独自の `MySingleton` を生成し、この不要な複数の初期化がビルドパフォーマンスを深刻に低下させます。

さらに深刻なことに: シングルトンの初期化が冪等性のない操作（データベースへの接続など）である場合、エラーが発生する原因となります。

### 現在の動作と期待される動作

私の目的は、モジュールにシングルトンを設定し、すべてのページの `getStaticProps` がビルド時に同じシングルトンを使用することです。つまり、モジュールのシングルトンは一度だけ初期化されるべきです。シングルトンの初期化は非常に時間がかかるためです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Pro
  利用可能なメモリ (MB): 36670
  利用可能な CPU コア: 8
バイナリ:
  Node: 22.6.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されました (15.0.1)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

モジュール解決

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Docs: Node.js version,"### What is the documentation issue?

In a Getting Start guide you're suggesting to use Node.js `v18.18.0` and above, but for me it doesn't work with Node.js `v19.0.0` and `v19.5.0` also. 

Maybe it'll be a useful catch :)

### Is there any context that might help us understand?

`MacOS Sequoia v15.0.1`   

### Does the docs page already exist? Please link to it.

https://nextjs.org/docs/getting-started/installation",タイトル: ドキュメント: Node.js バージョン,"本文:
### ドキュメントの問題は何ですか？

「Getting Started」ガイドでは、Node.js `v18.18.0` 以上を使用することを推奨していますが、私の環境では Node.js `v19.0.0` および `v19.5.0` でも動作しませんでした。

おそらく、これは役立つ情報になるでしょう :)

### 理解を助けるための文脈はありますか？

`MacOS Sequoia v15.0.1`   

### そのドキュメントページは既に存在しますか？リンクを教えてください。

https://nextjs.org/docs/getting-started/installation"
S1,P1,"""use cache"" crashes if it contains tainted values","### Link to the code that reproduces this issue

https://github.com/mordechaim/next-repro-cache-taint

### To Reproduce

1. Start the application
2. See the error on page load

### Current vs. Expected behavior

**Current behavior**
The cache errors with the message passed to `taintUniqueValue`:
![image](https://github.com/user-attachments/assets/ede27edf-1322-4d86-9ce7-170ced1ed6ad)

This error is also present while building the project:
```
Error while saving cache key: [""rKc0nlkGUlH9QFhckQS1H"",""8087fac4d5a350d79685366b3e238ee36c2ce46a"",[]] Error: Don't pass the password to the client
```

**Expected behavior**
Since cache is server-side only, we should be able to cache tainted values.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Home
  Available memory (MB): 32674
  Available CPU cores: 8
Binaries:
  Node: 22.9.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.2-canary.9 // Latest available version is detected (15.0.2-canary.9).
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_",キャッシュの使用が汚染された値を含むとクラッシュする,"### この問題を再現するコードへのリンク

https://github.com/mordechaim/next-repro-cache-taint

### 再現手順

1. アプリケーションを起動する
2. ページロード時にエラーを確認する

### 現在の動作と期待される動作

**現在の動作**
キャッシュは `taintUniqueValue` に渡されたメッセージでエラーを返します：
![image](https://github.com/user-attachments/assets/ede27edf-1322-4d86-9ce7-170ced1ed6ad)

このエラーはプロジェクトのビルド中にも発生します：
```
キャッシュキーの保存中にエラーが発生しました: [""rKc0nlkGUlH9QFhckQS1H"",""8087fac4d5a350d79685366b3e238ee36c2ce46a"",[]] エラー: パスワードをクライアントに渡さないでください
```

**期待される動作**
キャッシュはサーバーサイドのみであるため、汚染された値をキャッシュできるはずです。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Home
  利用可能なメモリ (MB): 32674
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.9.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.2-canary.9 // 検出された最新のバージョンは (15.0.2-canary.9) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

_返答なし_"
S1,P1,Babel TypeScript transformer does not support satisfies operator in v13,"### Link to the code that reproduces this issue

https://stackblitz.com/edit/vercel-next-js-elkp8u?file=pages%2Findex.tsx

### To Reproduce

When using satisfies in the Next v13, incorrect syntax errors are thrown out as v13 is packaged with older versions of babel that do not have satisfies support.

### Current vs. Expected behavior

With the latest (or higher than current) babel version, satisfies would work correctly.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.3.0: Wed Dec 20 21:30:44 PST 2023; root:xnu-10002.81.5~7/RELEASE_ARM64_T6000
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 8.6.1
Relevant Packages:
  next: 13.5.7
  eslint-config-next: 13.5.7
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

There was an issue long ago about this [here](https://github.com/vercel/next.js/issues/43799) which was closed by a PR [here](https://github.com/vercel/next.js/pull/51962), which made it into canary versions of 1.5.6 but somehow never to the full version.",Babel TypeScriptトランスフォーマーはv13でsatisfies演算子をサポートしていません,"### この問題を再現するコードへのリンク

https://stackblitz.com/edit/vercel-next-js-elkp8u?file=pages%2Findex.tsx

### 再現手順

Next v13でsatisfiesを使用すると、古いバージョンのbabelがパッケージされているため、satisfiesサポートがないという理由で不正な構文エラーが発生します。

### 現在の動作と期待される動作

最新の（または現在よりも新しい）babelバージョンでは、satisfiesが正しく機能するはずです。

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.3.0: Wed Dec 20 21:30:44 PST 2023; root:xnu-10002.81.5~7/RELEASE_ARM64_T6000
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 8.6.1
関連パッケージ：
  next: 13.5.7
  eslint-config-next: 13.5.7
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.6.3
Next.js設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build（ローカル）

### 追加のコンテキスト

この件については、以前に[こちら](https://github.com/vercel/next.js/issues/43799)で問題があり、[こちら](https://github.com/vercel/next.js/pull/51962)のPRによってクローズされましたが、1.5.6のカナリアバージョンには含まれたものの、なぜかフルバージョンには含まれませんでした。"
S1,P1,Turbopack: `resourceQuery` is empty for import URLs that are remapped in TypeScript,"### Link to the code that reproduces this issue

https://codesandbox.io/p/github/kdy1/repro-next-69502/csb-pl26sn/draft/modest-bassi

### To Reproduce

1. Have Turbopack configured to load `*.mdx` file with a custom loader
2. Created a file in the root folder: `/assets/test.mdx`
3. Update tsconfig.json's `compilerOptions.paths` to add `""assets/*"": [""./assets/*""]`
4. Import the mdx file in a component: 
```typescript
import { v } from ""assets/test.mdx?test"";
```
5. Inside the custom loader, `this.resourceQuery` is empty

### Current vs. Expected behavior

**Current:**

`this.resourceQuery` is empty

**Expected:**

`this.resourceQuery` should be `?test`.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 8.15.6
Relevant Packages:
  next: 15.0.2-canary.9 // Latest available version is detected (15.0.2-canary.9).
  eslint-config-next: 14.1.0
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Disable Turbopack and use the identical Webpack configuration, `this.resourceQuery` gives the correct result of `?test`.

Related issue: https://github.com/vercel/next.js/issues/69502
Related PR: https://github.com/vercel/next.js/pull/69703","タイトル:
Turbopack: `resourceQuery` が TypeScript でリマップされたインポート URL に対して空です","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/github/kdy1/repro-next-69502/csb-pl26sn/draft/modest-bassi

### 再現手順

1. Turbopack を設定して `*.mdx` ファイルをカスタムローダーで読み込む
2. ルートフォルダーにファイルを作成: `/assets/test.mdx`
3. tsconfig.json の `compilerOptions.paths` を更新して `""assets/*"": [""./assets/*""]` を追加
4. コンポーネント内で mdx ファイルをインポート: 
```typescript
import { v } from ""assets/test.mdx?test"";
```
5. カスタムローダー内で `this.resourceQuery` が空である

### 現在の動作と期待される動作

**現在の動作:**

`this.resourceQuery` は空です

**期待される動作:**

`this.resourceQuery` は `?test` であるべきです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能な CPU コア: 2
バイナリ:
  Node: 20.12.0
  npm: 10.5.0
  Yarn: 1.22.19
  pnpm: 8.15.6
関連パッケージ:
  next: 15.0.2-canary.9 // 検出された最新の利用可能バージョンは 15.0.2-canary.9 です。
  eslint-config-next: 14.1.0
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.3.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

Turbopack を無効にし、同一の Webpack 設定を使用すると、`this.resourceQuery` は正しい結果 `?test` を返します。

関連する問題: https://github.com/vercel/next.js/issues/69502  
関連する PR: https://github.com/vercel/next.js/pull/69703"
S1,P1,Turbopack doesnt support magic comments,"### Link to the code that reproduces this issue

👆🏻

### To Reproduce

I'm using dynamic imports with MDX to load in some mdx that lives outside the app dir. The approved method for this is to use dynamic imports so the file and it's images stay inside the module graph. 

Each blog post has a folder with the MDX file and the images related to that post. The problem comes when there are other files in the folder, Webpack wants to slurp them all up because of the way dynamic imports work:

So I'm using ""[magic comments](https://rspack.dev/api/runtime-api/module-methods#magic-comments)"" to exclude the files I don't need:

```js
const { default: MDXContent } = await import(/* webpackExclude: /\.mp4$/ */ `../../../../content/${filePath}`);
```

These magic comments work in Webpack, RSPack but not Turbopack. 

Any plans to support them? Or another way to ignore certain files? 

### Current vs. Expected behavior

👆🏻

### Provide environment information

```bash
""next"": ""15.0.1""
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_","タイトル:
Turbopackはマジックコメントをサポートしていません","本文:
### この問題を再現するためのコードへのリンク

👆🏻

### 再現手順

私はMDXを使用して、アプリディレクトリの外にあるいくつかのmdxを動的インポートで読み込んでいます。このための承認された方法は、動的インポートを使用してファイルとその画像がモジュールグラフ内に留まるようにすることです。

各ブログ投稿には、MDXファイルとその投稿に関連する画像が含まれるフォルダがあります。問題は、フォルダ内に他のファイルがあると、Webpackが動的インポートの仕組みのためにそれらすべてを取り込もうとすることです。

そのため、必要のないファイルを除外するために「[マジックコメント](https://rspack.dev/api/runtime-api/module-methods#magic-comments)」を使用しています：

```js
const { default: MDXContent } = await import(/* webpackExclude: /\.mp4$/ */ `../../../../content/${filePath}`);
```

これらのマジックコメントはWebpackやRSPackでは機能しますが、Turbopackでは機能しません。

これらをサポートする計画はありますか？それとも特定のファイルを無視する別の方法はありますか？

### 現在の動作と期待される動作

👆🏻

### 環境情報を提供してください

```bash
""next"": ""15.0.1""
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

_返答なし_"
S1,P1,useFormStatus() doesn't work with shadcn/ui Select component,"### Link to the code that reproduces this issue

https://github.com/samstr/shadcn-formstatus-demo

### To Reproduce

1. Clone https://github.com/samstr/shadcn-formstatus-demo
2. npm install
3. npm run dev
4. Go to http://localhost:3000/
5. Click the submit button on the form with an Input (pending state works)
6. Click the submit button on the form with a Select (pending state does not work)

### Current vs. Expected behavior

See the difference between a form using an `Input` vs `Select`. I'm not sure if this is a NextJS issue, a shadcn/ui issue, or an underlying react issue. I suspect it's actually a problem with the current React 19 RC.

https://github.com/user-attachments/assets/340d07cd-5266-42c7-a169-90f761940027



### Provide environment information

```bash
System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 98304
  Available CPU cores: 12
Binaries:
  Node: 18.18.0
  npm: 9.8.1
  Yarn: N/A
  pnpm: 7.22.0
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

The issue started after upgrading to NextJS 15.0.0",useFormStatus()はshadcn/ui Selectコンポーネントで機能しません,"### この問題を再現するコードへのリンク

https://github.com/samstr/shadcn-formstatus-demo

### 再現手順

1. https://github.com/samstr/shadcn-formstatus-demoをクローンします
2. npm installを実行します
3. npm run devを実行します
4. http://localhost:3000/にアクセスします
5. Inputを含むフォームの送信ボタンをクリックします（保留状態は機能します）
6. Selectを含むフォームの送信ボタンをクリックします（保留状態は機能しません）

### 現在の動作と期待される動作

`Input`を使用したフォームと`Select`を使用したフォームの違いを見てください。これはNextJSの問題なのか、shadcn/uiの問題なのか、根本的なReactの問題なのかはわかりません。実際には現在のReact 19 RCに問題があると思います。

https://github.com/user-attachments/assets/340d07cd-5266-42c7-a169-90f761940027

### 環境情報を提供してください

```bash
システム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 98304
  利用可能なCPUコア: 12
バイナリ:
  Node: 18.18.0
  npm: 9.8.1
  Yarn: N/A
  pnpm: 7.22.0
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されました (15.0.1)。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

この問題はNextJS 15.0.0にアップグレードした後に始まりました"
S1,P1,"Module '""next"" has no exported member ""X"" (eg, 'Image', 'NextConfig').","### Link to the code that reproduces this issue

https://github.com/nextui-org/next-app-template

### To Reproduce

1. Upgrade to `v15` from `v14`
2. Enable turbopack
3. start dev server
*using typescript

### Current vs. Expected behavior

## Expected behevior
- Import stuff (like Image, Metadata) from `next` package
## Currently
- you can't

## Though you can: (**Fix**)
1. Disable turbopack
2. start dev server


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 ZEN SMP PREEMPT_DYNAMIC Tue, 22 Oct 2024 18:31:33 +0000
Binaries:
  Node: 20.18.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.1
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-cae764ce-20241025
  react-dom: 19.0.0-rc-cae764ce-20241025
  typescript: 5.6.3
```


### Which area(s) are affected? (Select all that apply)

Module Resolution

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
モジュール '""next"" にエクスポートされたメンバー ""X"" はありません（例：'Image'、'NextConfig'）。","本文:
### この問題を再現するコードへのリンク

https://github.com/nextui-org/next-app-template

### 再現手順

1. `v14` から `v15` にアップグレードする
2. ターボパックを有効にする
3. 開発サーバーを起動する
* TypeScriptを使用

### 現在の動作と期待される動作

## 期待される動作
- `next` パッケージからのインポート（Image、Metadataなど）

## 現在の状況
- インポートできません

## ただし、次のことができます: (**修正**)
1. ターボパックを無効にする
2. 開発サーバーを起動する

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 ZEN SMP PREEMPT_DYNAMIC Tue, 22 Oct 2024 18:31:33 +0000
バイナリ:
  Node: 20.18.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.1
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-cae764ce-20241025
  react-dom: 19.0.0-rc-cae764ce-20241025
  typescript: 5.6.3
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

モジュール解決

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,Next.js 15 import alias not working with turbopack,"### Link to the code that reproduces this issue

https://github.com/aelassas/next-turbopack

### To Reproduce

Create a Next.js 15 project with an internal package `package1`:
```
| - my-app/
| - packages/package1/
```
Add the alias in tsconfig.json:
```js
{
  ""compilerOptions"": {
   ...
    ""baseUrl"": ""./"",
    ""paths"": {
      ""@/*"": [""./src/*""],
      "":package1"": [""../packages/package1""],
    },
  }
}
```

Import `:package1` in a page or component:
```js
import * as package1 from ':package1'
...
```

Run the dev server with turbopack.

### Current vs. Expected behavior

When I run the dev server without turbopack, it works fine. But when I try with turbopack I always get this error:
```
Module not found: Can't resolve ':package1'
Import map: aliased to relative ""../packages/package1"" inside of [project]/
```

### Provide environment information

```bash
Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 32593
  Available CPU cores: 12
Binaries:
  Node: 20.17.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.2-canary.7 // Latest available version is detected (15.0.2-canary.7).
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",Next.js 15のインポートエイリアスがターボパックで機能しない,"### この問題を再現するコードへのリンク

https://github.com/aelassas/next-turbopack

### 再現手順

内部パッケージ`package1`を持つNext.js 15プロジェクトを作成します：
```
| - my-app/
| - packages/package1/
```
tsconfig.jsonにエイリアスを追加します：
```js
{
  ""compilerOptions"": {
   ...
    ""baseUrl"": ""./"",
    ""paths"": {
      ""@/*"": [""./src/*""],
      "":package1"": [""../packages/package1""],
    },
  }
}
```

ページまたはコンポーネントで`:package1`をインポートします：
```js
import * as package1 from ':package1'
...
```

ターボパックで開発サーバーを実行します。

### 現在の動作と期待される動作

ターボパックなしで開発サーバーを実行すると、問題なく動作します。しかし、ターボパックを使用すると、常に次のエラーが発生します：
```
モジュールが見つかりません: ':package1'を解決できません
インポートマップ: [project]/内の相対""../packages/package1""にエイリアスされています
```

### 環境情報を提供してください

```bash
プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 32593
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.17.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.2-canary.7 // 検出された最新の利用可能バージョンは(15.0.2-canary.7)です。
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ターボパック

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,"Reading searchParams with ""use cache"" causes the build to hang","### Link to the code that reproduces this issue

https://github.com/zaiste/nextjs-searchparams-bug-use-cache

### To Reproduce

Build the application 
```
npm run build
```

### Current vs. Expected behavior

**Current:** The build process gets stuck. 
**Expected:** The build process finishes

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Mon Sep 30 00:10:31 PDT 2024; root:xnu-11215.40.63~39/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 21.7.1
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.2-canary.6 // Latest available version is detected (15.0.2-canary.6).
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_","タイトル:
""use cache""でsearchParamsを読み取るとビルドがハングする","本文:
### この問題を再現するコードへのリンク

https://github.com/zaiste/nextjs-searchparams-bug-use-cache

### 再現手順

アプリケーションをビルドする 
```
npm run build
```

### 現在の動作と期待される動作

**現在:** ビルドプロセスが停止する。 
**期待:** ビルドプロセスが完了する

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Mon Sep 30 00:10:31 PDT 2024; root:xnu-11215.40.63~39/RELEASE_ARM64_T6000
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 10
バイナリ:
  Node: 21.7.1
  npm: 10.9.0
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.2-canary.6 // 利用可能な最新バージョンが検出されています (15.0.2-canary.6)。
  eslint-config-next: N/A
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,Cannot use `renderToReadableStream` from `react-dom/server.edge`,"### Link to the code that reproduces this issue

https://github.com/gabrielmfern/react-dom-edge-reproduction

### To Reproduce

1. Start the app using `next dev`
2. Open the route at https://localhost:3000/test
3. See the error in the terminal

### Current vs. Expected behavior

I was expecting that I would be able to properly call the functions from `react-dom` regardless of how I import it or where I run it. The result I get is an error that seems to indicate multiple instances of React running, so not exactly sure what is the cause.

```js
TypeError: Cannot read properties of undefined (reading 'H')
    at performWork (webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.0.2-canary.6_react-dom@19.0.0-rc-1631855f-20241023_react@19.0.0-rc-1631855f-20241023_
_3on5hdq5nuq33xp36ooa2qays4/node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.edge.development.js:6506:49)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at eval (webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.0.2-canary.6_react-dom@19.0.0-rc-1631855f-20241023_react@19.0.0-rc-1631855f-20241023__3on5hd
q5nuq33xp36ooa2qays4/node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.edge.development.js:7244:35)
    at node:internal/process/task_queues:140:7
    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
    at AsyncResource.runMicrotask (node:internal/process/task_queues:137:8)
```

### Provide environment information

```bash
Node.js v20.17.0

Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Tue, 22 Oct 2024 18:31:38 +0000
  Available memory (MB): 15872
  Available CPU cores: 24
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.10.0
Relevant Packages:
  next: 15.0.2-canary.6 // Latest available version is detected (15.0.2-canary.6).
  eslint-config-next: 14.1.0
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

I tested this against the latest version and also the canary, there doesn't seem to be any difference in the error or the behaviors at all. The error also seems to persist even when going back down to `15.0.0-canary.0` and downgrading the `react-dom` and `react` versions accordingly.

Not sure if this only happens when on the edge, or if it happens with any of the other exports for `react-dom/server`, but for my purposes I wanted to use the edge one specifically.","タイトル:
`react-dom/server.edge` から `renderToReadableStream` を使用できません","本文:
### この問題を再現するコードへのリンク

https://github.com/gabrielmfern/react-dom-edge-reproduction

### 再現手順

1. `next dev` を使用してアプリを起動します
2. https://localhost:3000/test のルートを開きます
3. ターミナルでエラーを確認します

### 現在の動作と期待される動作

`react-dom` の関数をどのようにインポートしても、どこで実行しても適切に呼び出せると思っていました。得られた結果は、複数の React インスタンスが実行されていることを示すエラーで、原因が正確にはわかりません。

```js
TypeError: Cannot read properties of undefined (reading 'H')
    at performWork (webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.0.2-canary.6_react-dom@19.0.0-rc-1631855f-20241023_react@19.0.0-rc-1631855f-20241023_
_3on5hdq5nuq33xp36ooa2qays4/node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.edge.development.js:6506:49)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at eval (webpack-internal:///(rsc)/./node_modules/.pnpm/next@15.0.2-canary.6_react-dom@19.0.0-rc-1631855f-20241023_react@19.0.0-rc-1631855f-20241023__3on5hd
q5nuq33xp36ooa2qays4/node_modules/next/dist/compiled/react-dom/cjs/react-dom-server.edge.development.js:7244:35)
    at node:internal/process/task_queues:140:7
    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
    at AsyncResource.runMicrotask (node:internal/process/task_queues:137:8)
```

### 環境情報を提供

```bash
Node.js v20.17.0

オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Tue, 22 Oct 2024 18:31:38 +0000
  利用可能メモリ (MB): 15872
  利用可能 CPU コア: 24
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.10.0
関連パッケージ:
  next: 15.0.2-canary.6 // 検出された最新の利用可能バージョン (15.0.2-canary.6)。
  eslint-config-next: 14.1.0
  react: 19.0.0-rc-1631855f-20241023
  react-dom: 19.0.0-rc-1631855f-20241023
  typescript: 5.3.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

ランタイム

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

最新バージョンとカナリア版の両方でテストしましたが、エラーや動作に違いはないようです。エラーは、`15.0.0-canary.0` に戻し、`react-dom` と `react` のバージョンを適切にダウングレードしても持続するようです。

これがエッジでのみ発生するのか、`react-dom/server` の他のエクスポートでも発生するのかは不明ですが、私の目的では特にエッジのものを使用したいと思っています。"
S1,P1,generateStaticParams with next export: Build fails when generateStaticParams returns an empty array of params,"### Link to the code that reproduces this issue

https://github.com/NasserBvB/generate-static-params-issue

### To Reproduce

While building a Next.js application with `output: ""export""` in `next.config.js`, I encountered an error regarding the missing `generateStaticParams()` function, despite it being implemented and returning an empty list. This error specifically affects dynamic pages in the project.

Notably, the build succeeds as expected when `generateStaticParams()` returns at least one article parameter in the list. The issue only arises when it returns an empty list (`[]`).

### Steps to Reproduce

1. Create a new Next.js application using `next@14.2.8`.
2. Add a dynamic page at `articles/[article]/page.js`.
3. Implement `generateStaticParams` in `articles/[article]/page.js` and set it to return an empty list (`[]`).
4. Configure `output: ""export""` in `next.config.js`.
5. Run the build command.

### Expected Behavior

The build should succeed without any issues, recognizing that `generateStaticParams()` is implemented and returning an empty list of article slugs.

### Actual Behavior

An error occurs during the build, specifically stating:

```
Error: Page ""/articles/[article]"" is missing ""generateStaticParams()"" so it cannot be used with ""output: export"" config.
```

However, when `generateStaticParams()` returns a list with at least one article slug, the build completes successfully as expected.

### Additional Context

- I’ve confirmed that `generateStaticParams()` exists in `articles/[article]/page.js`, and the issue persists only when it returns an empty list.


### Current vs. Expected behavior


### Expected Behavior

The build should succeed without any issues, recognizing that `generateStaticParams()` is implemented and returning an empty list of article slugs.

### Actual Behavior

An error occurs during the build, specifically stating:

```
Error: Page ""/articles/[article]"" is missing ""generateStaticParams()"" so it cannot be used with ""output: export"" config.
```

However, when `generateStaticParams()` returns a list with at least one article slug, the build completes successfully as expected.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:36:26 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8103
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 18.19.0
  npm: 10.2.3
  Yarn: 1.22.22
  pnpm: 9.12.0
Relevant Packages:
  next: 14.2.8 // An outdated version detected (latest is 15.0.1), upgrade is highly recommended!
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Output (export/standalone), Script (next/script)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_","タイトル:
generateStaticParamsとnext export: generateStaticParamsが空の配列を返すとビルドが失敗する","本文:
### この問題を再現するためのコードへのリンク

https://github.com/NasserBvB/generate-static-params-issue

### 再現手順

`next.config.js`で`output: ""export""`を設定したNext.jsアプリケーションをビルド中に、`generateStaticParams()`関数が欠落しているというエラーが発生しました。これは、関数が実装されていて空のリストを返しているにもかかわらずです。このエラーはプロジェクト内の動的ページに特に影響を与えます。

特に、`generateStaticParams()`がリストに少なくとも1つの記事パラメータを返す場合、ビルドは期待通りに成功します。この問題は、空のリスト（`[]`）を返すときにのみ発生します。

### 再現手順

1. `next@14.2.8`を使用して新しいNext.jsアプリケーションを作成します。
2. `articles/[article]/page.js`に動的ページを追加します。
3. `articles/[article]/page.js`で`generateStaticParams`を実装し、空のリスト（`[]`）を返すように設定します。
4. `next.config.js`で`output: ""export""`を設定します。
5. ビルドコマンドを実行します。

### 期待される動作

ビルドは問題なく成功し、`generateStaticParams()`が実装されていて空のリストのスラグを返していることを認識するべきです。

### 実際の動作

ビルド中にエラーが発生し、具体的には次のように表示されます：

```
Error: Page ""/articles/[article]"" is missing ""generateStaticParams()"" so it cannot be used with ""output: export"" config.
```

ただし、`generateStaticParams()`が少なくとも1つのスラグを持つリストを返す場合、ビルドは期待通りに成功します。

### 追加のコンテキスト

- `generateStaticParams()`が`articles/[article]/page.js`に存在することを確認しましたが、空のリストを返すときのみ問題が発生します。

### 現在の動作と期待される動作

### 期待される動作

ビルドは問題なく成功し、`generateStaticParams()`が実装されていて空のリストのスラグを返していることを認識するべきです。

### 実際の動作

ビルド中にエラーが発生し、具体的には次のように表示されます：

```
Error: Page ""/articles/[article]"" is missing ""generateStaticParams()"" so it cannot be used with ""output: export"" config.
```

ただし、`generateStaticParams()`が少なくとも1つのスラグを持つリストを返す場合、ビルドは期待通りに成功します。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:36:26 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T8103
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 8
バイナリ:
  Node: 18.19.0
  npm: 10.2.3
  Yarn: 1.22.22
  pnpm: 9.12.0
関連パッケージ:
  next: 14.2.8 // 古いバージョンが検出されました (最新は15.0.1)、アップグレードが強く推奨されます！
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  output: export
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app, 出力 (export/standalone), スクリプト (next/script)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Confusing error when calling a server function from use cache scope,"### Link to the code that reproduces this issue

n/a

### To Reproduce

```js
export default async function Main({ searchParams }) {
  const data = await searchParams;
  return (
    <Parent getStuff={() => <h2>huh {data.foo}</h2>}></Parent>
  );
}
```

```js
""use cache"";

export default async function Parent({ getStuff }) {
  console.log(""render Parent"");
  return (
    <>
      {getStuff()}
    </>
  );
}
```

produces

```
[ Cache ] Error: Attempted to call a temporary Client Reference from the server but it is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.
```

The confusing part is that the Client/Server wording here is wrong because it's really about Server/Cache.

### Current vs. Expected behavior

n/a

### Provide environment information

```bash
n/a
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",混乱を招くエラー：キャッシュスコープからサーバー関数を呼び出す際の問題,"### この問題を再現するコードへのリンク

該当なし

### 再現手順

```js
export default async function Main({ searchParams }) {
  const data = await searchParams;
  return (
    <Parent getStuff={() => <h2>huh {data.foo}</h2>}></Parent>
  );
}
```

```js
""use cache"";

export default async function Parent({ getStuff }) {
  console.log(""render Parent"");
  return (
    <>
      {getStuff()}
    </>
  );
}
```

生成される出力

```
[ Cache ] エラー: 一時的なクライアントリファレンスをサーバーから呼び出そうとしましたが、それはクライアントにあります。サーバーからクライアント関数を呼び出すことはできず、コンポーネントとしてレンダリングするか、クライアントコンポーネントのプロパティとして渡すことしかできません。
```

混乱を招く点は、ここでのクライアント/サーバーの表現が誤っていることで、実際にはサーバー/キャッシュに関する問題です。

### 現在の動作と期待される動作

該当なし

### 環境情報の提供

```bash
該当なし
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_返答なし_"
S1,P1,shadcn components are not working with next 15,"### Link to the code that reproduces this issue

https://github.com/SARATHKUMAR-T/next15

### To Reproduce

1. create new app with `npx create-next-app@latest`
2. try to install shadcn ui with `npx shadcn@latest init`


### Current vs. Expected behavior

![Screenshot from 2024-10-25 16-04-05](https://github.com/user-attachments/assets/6155f6dd-b665-4e9d-b946-a1813746137b)


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #47~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Oct  2 16:16:55 UTC 2
  Available memory (MB): 11821
  Available CPU cores: 4
Binaries:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed)

### Additional context

_No response_","タイトル:
shadcnコンポーネントがnext 15で動作しない","本文:
### この問題を再現するためのコードへのリンク

https://github.com/SARATHKUMAR-T/next15

### 再現手順

1. `npx create-next-app@latest`で新しいアプリを作成します。
2. `npx shadcn@latest init`を使ってshadcn uiをインストールしようとします。

### 現在の動作と期待される動作

![2024-10-25 16-04-05のスクリーンショット](https://github.com/user-attachments/assets/6155f6dd-b665-4e9d-b946-a1813746137b)

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #47~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Oct  2 16:16:55 UTC 2
  利用可能メモリ (MB): 11821
  利用可能CPUコア: 4
バイナリ:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されました (15.0.1)。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app、開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

_回答なし_"
S1,P1,Error next js 15 image component,"### Link to the code that reproduces this issue

https://codesandbox.io/p/github/Farruh-JS/next15_image_issue/master

### To Reproduce

Codesandbox link: https://codesandbox.io/p/github/Farruh-JS/next15_image_issue/master 
Github link: https://github.com/Farruh-JS/next15_image_issue

I don't know why, but on Codesandbox everything worked fine for me, you should run this locally.

![image](https://github.com/user-attachments/assets/f361d134-f70a-47ae-aa85-c23937f77b1c)

### Current vs. Expected behavior

If you use the Next Image component, some random images will return a 500 error. However, if you render the same image with an img tag, it will work fine.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
Binaries:
  Node: 20.11.1
  npm: 10.5.0
Relevant Packages:
  next: 15.0.1
  eslint-config-next: 15.0.0-canary.148
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5
Next.js Config:
 images: {
		remotePatterns: [
			{ protocol: 'https', hostname: 'ik.imagekit.io' },
			{
				protocol: 'https',
				hostname: 'storage.googleapis.com',
				port: '',
				pathname: '/polebor/site/media/original/**',
			},
			{ protocol: 'https', hostname: 'mp.softly.uz' },
		],
	},
```


### Which area(s) are affected? (Select all that apply)

Image (next/image)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

I tested my reproduction against different canary releases including latest 15.0.2-canary.6 version, and the first one that introduced the bug was &quot;15.0.0&quot;, since reverting to &quot;14.2.14&quot; works.
Also i have tried on my windows machine, got the same problem
","タイトル:
Next.js 15の画像コンポーネントのエラー","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/github/Farruh-JS/next15_image_issue/master

### 再現手順

Codesandboxリンク: https://codesandbox.io/p/github/Farruh-JS/next15_image_issue/master  
Githubリンク: https://github.com/Farruh-JS/next15_image_issue

なぜか分かりませんが、Codesandboxではすべて正常に動作しました。ローカルで実行する必要があります。

![image](https://github.com/user-attachments/assets/f361d134-f70a-47ae-aa85-c23937f77b1c)

### 現在の動作と期待される動作

Next Imageコンポーネントを使用すると、いくつかのランダムな画像が500エラーを返します。しかし、同じ画像をimgタグでレンダリングすると、正常に動作します。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
バイナリ:
  Node: 20.11.1
  npm: 10.5.0
関連パッケージ:
  next: 15.0.1
  eslint-config-next: 15.0.0-canary.148
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5
Next.js設定:
 images: {
		remotePatterns: [
			{ protocol: 'https', hostname: 'ik.imagekit.io' },
			{
				protocol: 'https',
				hostname: 'storage.googleapis.com',
				port: '',
				pathname: '/polebor/site/media/original/**',
			},
			{ protocol: 'https', hostname: 'mp.softly.uz' },
		],
	},
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

画像 (next/image)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

異なるカナリアリリース（最新の15.0.2-canary.6バージョンを含む）に対して再現をテストしましたが、バグを導入した最初のバージョンは「15.0.0」であり、「14.2.14」に戻すと正常に動作します。また、Windowsマシンでも同じ問題が発生しました。"
S1,P1,Next.JS does NOT support Docker Swarm.,"### Link to the code that reproduces this issue

https://github.com/SanderCokart/sandercokart.com/tree/development

### To Reproduce

`docker service create` and `docker stack deploy` both do launch the nodes and services but going to localhost:3000 results in nothing.

### Current vs. Expected behavior

Going to localhost:3000 results in nothing.

**Expected behavior:** webpage shows up

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 65268
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.11.0
Relevant Packages:
  next: 14.2.11 // An outdated version detected (latest is 15.0.1), upgrade is highly recommended!
  eslint-config-next: 14.2.11
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

After a `docker swarm init` you can run `docker service create -p 80:80 --replicas 1 --name nginx nginx` and then visit localhost:80 (make sure to disable apache in wsl running `sudo systemctl stop apache2.service` in wsl terminal) you can see the nginx welcome page.

Using curl to go to localhost:3000 you get this:
```
curl: (52) Empty reply from server
```",タイトル: Next.JSはDocker Swarmをサポートしていません。,"本文:
### この問題を再現するコードへのリンク

https://github.com/SanderCokart/sandercokart.com/tree/development

### 再現手順

`docker service create`および`docker stack deploy`はノードとサービスを起動しますが、localhost:3000にアクセスしても何も表示されません。

### 現在の動作と期待される動作

localhost:3000にアクセスしても何も表示されません。

**期待される動作:** ウェブページが表示されること

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 65268
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.17.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.11.0
関連パッケージ:
  next: 14.2.11 // 古いバージョンが検出されました (最新は15.0.1)、アップグレードを強く推奨します！
  eslint-config-next: 14.2.11
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

出力 (エクスポート/スタンドアロン)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他 (デプロイ済み)

### 追加のコンテキスト

`docker swarm init`の後、`docker service create -p 80:80 --replicas 1 --name nginx nginx`を実行し、localhost:80にアクセスすると（WSLで`sudo systemctl stop apache2.service`を実行してapacheを無効にすることを確認してください）、nginxのウェルカムページが表示されます。

curlを使用してlocalhost:3000にアクセスすると、次のようになります:
```
curl: (52) サーバーからの空の応答
```"
S1,P1,Get an error when upgrading to next v15 and icon.svg in the app folder,"### Link to the code that reproduces this issue

https://github.com/Cache-Hit-Shanghai/pikebaohomepage

### To Reproduce

1. Download the project from the link above.
1. Upgrade next.js to v15.
1. npm run dev

### Current vs. Expected behavior

# current
next-app-loader?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5C14S%5CDownloads%5Ccode%5Cpikebaohomepage%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5C14S%5CDownloads%5Ccode%5Cpikebaohomepage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!:63
Error: Image import ""next-metadata-image-loader?type=icon&segment=&basePath=&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js!C:\Users\14S\Downloads\code\pikebaohomepage\app\icon.svg?__next_metadata__"" is not a valid image file. The image may be corrupted or an unsupported format.
# expected
No error as with next v14.

### Provide environment information

```bash
Win11
next.js v15
node v23
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_","タイトル:
次のv15にアップグレード時にエラーが発生し、アプリフォルダー内のicon.svg","本文:
### この問題を再現するコードへのリンク

https://github.com/Cache-Hit-Shanghai/pikebaohomepage

### 再現手順

1. 上記のリンクからプロジェクトをダウンロードします。
1. next.jsをv15にアップグレードします。
1. npm run devを実行します。

### 現在の動作と期待される動作

# 現在
next-app-loader?name=app%2Fpage&page=%2Fpage&appPaths=%2Fpage&pagePath=private-next-app-dir%2Fpage.jsx&appDir=C%3A%5CUsers%5C14S%5CDownloads%5Ccode%5Cpikebaohomepage%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5C14S%5CDownloads%5Ccode%5Cpikebaohomepage&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!:63
エラー: 画像インポート ""next-metadata-image-loader?type=icon&segment=&basePath=&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js!C:\Users\14S\Downloads\code\pikebaohomepage\app\icon.svg?__next_metadata__"" は有効な画像ファイルではありません。画像が破損しているか、サポートされていない形式です。
# 期待される動作
next v14のようにエラーが発生しない。

### 環境情報を提供

```bash
Win11
next.js v15
node v23
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,"When using router.replace() from next/navigation for routing, the modal opened with the next.js slot does not close.","### Link to the code that reproduces this issue

https://github.com/2dubbing/nextgram

### To Reproduce

1. npm install
2. npm run dev
3. Open web browser http://localhost:3000
4. Click the square UI with the number on it on the screen.
5. Click the X button in the modal window.

### Current vs. Expected behavior

Current: If you route with router.replace() while the modal window is open, the modal window will not close.

Expected behavior: Routing with router.replace() should close any open modal windows.


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.6.0
Relevant Packages:
  next: 15.0.0-canary.61
  react: 19.0.0-rc.0
  react-dom: 19.0.0-rc.0
  typescript: 5.5.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

You might want to use router.replace for the following reasons
Because we think it's better for usability to use router.replace rather than router.back if the data change is successful on the Change Form Data page.

thank you.","タイトル:
router.replace()をnext/navigationから使用してルーティングすると、next.jsのスロットで開いたモーダルが閉じない。","本文:
### この問題を再現するコードへのリンク

https://github.com/2dubbing/nextgram

### 再現手順

1. npm install
2. npm run dev
3. ウェブブラウザを開く http://localhost:3000
4. 画面上の数字が表示された四角いUIをクリックする。
5. モーダルウィンドウのXボタンをクリックする。

### 現在の動作と期待される動作

現在: モーダルウィンドウが開いている状態でrouter.replace()を使用してルーティングすると、モーダルウィンドウは閉じません。

期待される動作: router.replace()でルーティングすると、開いているモーダルウィンドウは閉じるべきです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.6.0
関連パッケージ:
  next: 15.0.0-canary.61
  react: 19.0.0-rc.0
  react-dom: 19.0.0-rc.0
  typescript: 5.5.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

データ変更が成功した場合、Change Form Dataページでrouter.backではなくrouter.replaceを使用する方がユーザビリティに優れていると考えています。

ありがとうございます。"
S1,P1,"Playwright could not find tests with Nextjs 15 experimental testmode ","### Link to the code that reproduces this issue

https://github.com/KagamiChan/next15-playwright-test-not-found

### To Reproduce

1. run `npm run build`
2. run `npx playwright test`
3. playwright reports ""No tests found""
```
next15-playwright-test-not-found> npx playwright test
Error: No tests found

To open last HTML report run:

  npx playwright show-report
```

### Current vs. Expected behavior

playwright should detect the test cases and run it.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Pro
  Available memory (MB): 64618
  Available CPU cores: 32
Binaries:
  Node: 21.7.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Testing

### Which stage(s) are affected? (Select all that apply)

next start (local)

### Additional context

I also tried with pnpm and the result is the same, so it might not be an issue of package manager

The setup is following the instructions here: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md

This used to work with v14","タイトル:
PlaywrightがNextjs 15の実験的テストモードでテストを見つけられない","本文:
### この問題を再現するためのコードへのリンク

https://github.com/KagamiChan/next15-playwright-test-not-found

### 再現手順

1. `npm run build`を実行
2. `npx playwright test`を実行
3. playwrightが「テストが見つかりません」と報告する
```
next15-playwright-test-not-found> npx playwright test
エラー: テストが見つかりません

最後のHTMLレポートを開くには、次を実行してください:

  npx playwright show-report
```

### 現在の動作と期待される動作

playwrightはテストケースを検出し、実行するべきです。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Pro
  利用可能なメモリ (MB): 64618
  利用可能なCPUコア: 32
バイナリ:
  Node: 21.7.1
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されています (15.0.1)。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

テスト

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next start（ローカル）

### 追加のコンテキスト

pnpmでも試しましたが、結果は同じでしたので、パッケージマネージャーの問題ではないかもしれません。

セットアップは、こちらの指示に従っています: https://github.com/vercel/next.js/blob/canary/packages/next/src/experimental/testmode/playwright/README.md

これはv14では正常に動作していました。"
S1,P1,Dynamic segments which contain dashes seem to be buggy (vercel only?),"### Link to the code that reproduces this issue

https://github.com/julianbenegas/nextjs-dynamic-segments-bug

### To Reproduce

1. Deploy the project with Vercel, OR try it out in my deployment: https://rewrite-bug.vercel.app
2. Navigate to /blog/some-slug (i'm just json stringifying the awaited params and rendering them)
3. See that `some-slug` is not what's shown, but rather `[doesnt-work]` encoded

### Current vs. Expected behavior

I expect the page to show `{""doesnt-work"":""some-slug""}` but instead it shows `{""doesnt-work"":""%5Bdoesnt-work%5D""}`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:25 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6030
  Available memory (MB): 36864
  Available CPU cores: 12
Binaries:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: 4.1.1
  pnpm: 8.14.1
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

if i rename the folder to `[slug]` or anything that doesn't contain a dash, this seems to be resolved. So, the issue seems to be related to dashes within dynamic segments.

if i pre-generate static params, those will work; for example: `https://rewrite-bug.vercel.app/blog/pregenerated`",ダッシュを含む動的セグメントはバグがあるようです（Vercelのみ？）,"### この問題を再現するコードへのリンク

https://github.com/julianbenegas/nextjs-dynamic-segments-bug

### 再現手順

1. Vercelでプロジェクトをデプロイするか、私のデプロイメントで試してみてください: https://rewrite-bug.vercel.app
2. /blog/some-slug に移動します（待機したパラメータをJSON文字列化してレンダリングしています）
3. `some-slug` が表示されるのではなく、むしろ `[doesnt-work]` がエンコードされて表示されるのを確認します

### 現在の動作と期待される動作

ページには `{""doesnt-work"":""some-slug""}` が表示されることを期待していますが、代わりに `{""doesnt-work"":""%5Bdoesnt-work%5D""}` が表示されます

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:25 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 36864
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: 4.1.1
  pnpm: 8.14.1
関連パッケージ:
  next: 15.0.1 // 最新の利用可能バージョンが検出されました (15.0.1)。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択してください）

ナビゲーション

### 影響を受けるステージはどれですか？（すべて選択してください）

Vercel（デプロイ済み）

### 追加のコンテキスト

フォルダ名を `[slug]` またはダッシュを含まない任意の名前に変更すると、この問題は解決されるようです。したがって、問題は動的セグメント内のダッシュに関連しているようです。

静的パラメータを事前生成すると、それらは機能します。例えば: `https://rewrite-bug.vercel.app/blog/pregenerated`"
S1,P1,Next.js 15 stable codemod has now caused my local font imports to produce hydration errors,"I've updated the repo, simplified it, and created easy steps to reproduce this issue based off @timneutkens feedback. I'm editing the original comment here below to reflect all that.

### Link to the code that reproduces this issue

https://github.com/tr1s/trisanity-test

### To Reproduce

1. `git clone https://github.com/tr1s/trisanity-test.git`
1. `cd trisanity-test`
1. `npm i`
1. `npm run dev`

The hydration errors:

![CleanShot 2024-10-23 at 14 32 29@2x](https://github.com/user-attachments/assets/571924d5-5c4c-4d78-a0b0-651b6fac062a)

### Current vs. Expected behavior

Current behaviour: a working app with hydration errors
Expected behaviour: a working app without hydration errors

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```

### Which area(s) are affected? (Select all that apply)

Font (next/font)

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I ran the Next.js 15 codemod and now I have hydration errors on my local font imports. I've tried with and without turbopack, same issues.

There are two ways to remove the hydration error:
1. Remove the default `src/app/layout.tsx`
1. Go to the `src/app/(frontend)/layout.tsx` file and remove the `className` block from the `<html> tag:

```
return (
	<html
		lang=""en""
		className={`
        		${GTFAdieu.variable}
        		${GTFAdieu_Slanted.variable}
        		${GTFAdieu_Backslant.variable}
        		${Source_Sans_3.variable}
      		`}
	>
		<body>
			<Nav />
			<main role=""main"" id=""main-content"" tabIndex={-1}>
				{children}
			</main>
		</body>
	</html>
);
```

The `src/app/layout.tsx` was left as is so it wouldn't mess up any Sanity Studio UI. Then I created a `src/app/(frontend)/layout.tsx` where the layout for my frontend would live—this is where I imported my fonts. I was following along with [this Sanity tutorial](https://www.sanity.io/learn/course/content-driven-web-application-foundations) in which they did this.

For this setup when using a default layout and a nested (frontend) layout I was not getting any hydration errors until Next.js RC2 and beyond. RC1 was working fine, and that's what this tutorial was based off.

Here's my `fonts.js` that was working previously with Next 15 RC1:

```
import localFont from 'next/font/local';

export const GTFAdieu = localFont({
	variable: '--font-GTFAdieu',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Light.otf',
			weight: '300',
			style: 'normal',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Regular.otf',
			weight: '400',
			style: 'normal',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Bold.otf',
			weight: '700',
			style: 'normal',
		},
	],
});

export const GTFAdieu_Backslant = localFont({
	variable: '--font-GTFAdieu-Backslant',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-LightBackslant.otf',
			weight: '300',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-RegularBackslant.otf',
			weight: '400',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-BoldBackslant.otf',
			weight: '700',
			style: 'italic',
		},
	],
});

export const GTFAdieu_Slanted = localFont({
	variable: '--font-GTFAdieu-Slanted',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-RegularSlanted.otf',
			weight: '400',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-BoldSlanted.otf',
			weight: '700',
			style: 'italic',
		},
	],
});

export const Source_Sans_3 = localFont({
	variable: '--font-Source-Sans-3',
	src: [
		{
			path: '../../public/fonts/source-sans-3-v4-latin-regular.woff2',
			weight: '400',
			style: 'normal',
		},
		{
			path: '../../public/fonts/source-sans-3-v4-latin-700.woff2',
			weight: '700',
			style: 'normal',
		},
	],
});
```

That's about all the context I can provide. Given that, do we know what may be going on here?","タイトル:
Next.js 15の安定版codemodが、ローカルフォントのインポートに水和エラーを引き起こしました","本文:
リポジトリを更新し、簡素化し、@timneutkensのフィードバックに基づいてこの問題を再現するための簡単な手順を作成しました。以下の元のコメントを編集して、すべてを反映させます。

### この問題を再現するためのコードへのリンク

https://github.com/tr1s/trisanity-test

### 再現手順

1. `git clone https://github.com/tr1s/trisanity-test.git`
1. `cd trisanity-test`
1. `npm i`
1. `npm run dev`

水和エラー:

![CleanShot 2024-10-23 at 14 32 29@2x](https://github.com/user-attachments/assets/571924d5-5c4c-4d78-a0b0-651b6fac062a)

### 現在の動作と期待される動作

現在の動作: 水和エラーのある動作するアプリ  
期待される動作: 水和エラーのない動作するアプリ

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.9.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.1 // 利用可能な最新バージョンが検出されました (15.0.1)。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

フォント (next/font)

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

Next.js 15のcodemodを実行したところ、ローカルフォントのインポートに水和エラーが発生しました。ターボパックの有無にかかわらず、同じ問題が発生しています。

水和エラーを取り除く方法は2つあります：
1. デフォルトの `src/app/layout.tsx` を削除する
2. `src/app/(frontend)/layout.tsx` ファイルに移動し、`<html>` タグから `className` ブロックを削除する：

```
return (
	<html
		lang=""en""
		className={`
        		${GTFAdieu.variable}
        		${GTFAdieu_Slanted.variable}
        		${GTFAdieu_Backslant.variable}
        		${Source_Sans_3.variable}
      		`}
	>
		<body>
			<Nav />
			<main role=""main"" id=""main-content"" tabIndex={-1}>
				{children}
			</main>
		</body>
	</html>
);
```

`src/app/layout.tsx` はそのままにしておき、Sanity Studio UIが壊れないようにしました。その後、フロントエンドのレイアウトが存在する `src/app/(frontend)/layout.tsx` を作成し、そこでフォントをインポートしました。この設定は、[このSanityのチュートリアル](https://www.sanity.io/learn/course/content-driven-web-application-foundations)に従って行いました。

デフォルトのレイアウトとネストされた（フロントエンド）レイアウトを使用する場合、この設定ではNext.js RC2以降まで水和エラーは発生しませんでした。RC1は正常に動作しており、これがこのチュートリアルの基になっていました。

以下は、Next 15 RC1で以前に正常に動作していた `fonts.js` です：

```
import localFont from 'next/font/local';

export const GTFAdieu = localFont({
	variable: '--font-GTFAdieu',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Light.otf',
			weight: '300',
			style: 'normal',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Regular.otf',
			weight: '400',
			style: 'normal',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-Bold.otf',
			weight: '700',
			style: 'normal',
		},
	],
});

export const GTFAdieu_Backslant = localFont({
	variable: '--font-GTFAdieu-Backslant',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-LightBackslant.otf',
			weight: '300',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-RegularBackslant.otf',
			weight: '400',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-BoldBackslant.otf',
			weight: '700',
			style: 'italic',
		},
	],
});

export const GTFAdieu_Slanted = localFont({
	variable: '--font-GTFAdieu-Slanted',
	src: [
		{
			path: '../../public/fonts/GTFAdieuTRIAL-RegularSlanted.otf',
			weight: '400',
			style: 'italic',
		},
		{
			path: '../../public/fonts/GTFAdieuTRIAL-BoldSlanted.otf',
			weight: '700',
			style: 'italic',
		},
	],
});

export const Source_Sans_3 = localFont({
	variable: '--font-Source-Sans-3',
	src: [
		{
			path: '../../public/fonts/source-sans-3-v4-latin-regular.woff2',
			weight: '400',
			style: 'normal',
		},
		{
			path: '../../public/fonts/source-sans-3-v4-latin-700.woff2',
			weight: '700',
			style: 'normal',
		},
	],
});
```

これが提供できるすべてのコンテキストです。これを考慮して、何が起こっているのか分かりますか？"
S1,P1,Cannot use 'import.meta' outside a module when using next.config.ts,"### Link to the code that reproduces this issue

https://github.com/hrougier/next15

### To Reproduce

1. Start the application in development (next dev)
2. See error in the console
3. Open `next.config.ts` to see the failing code.

### Current vs. Expected behavior

Following the steps from the previous section, I expected `import.meta.dirname` to be printed in the console (works when using next.config.js in ESM format instead of next.config.ts).

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.1 // Latest available version is detected (15.0.1).
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, TypeScript

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

Using `next.config.ts` with a `package.json` containing:
```json
{
  ""type"": ""module""
}
```","タイトル:
next.config.tsを使用しているときにモジュールの外で'import.meta'を使用できません","本文:
### この問題を再現するコードへのリンク

https://github.com/hrougier/next15

### 再現手順

1. 開発環境でアプリケーションを起動する (next dev)
2. コンソールにエラーが表示されるのを確認する
3. `next.config.ts`を開いて失敗しているコードを見る

### 現在の動作と期待される動作

前のセクションの手順に従ったところ、コンソールに`import.meta.dirname`が表示されることを期待していました（next.config.tsの代わりにESM形式のnext.config.jsを使用すると動作します）。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.1 // 検出された最新の利用可能なバージョンは15.0.1です。
  eslint-config-next: 15.0.1
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、TypeScript

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）

### 追加のコンテキスト

`package.json`に以下を含む`next.config.ts`を使用しています:
```json
{
  ""type"": ""module""
}
```"
S1,P1,Setting a metadata field to undefined prevents falling back to the parent component's metadata value,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/dark-architecture-go8s7s

### To Reproduce

1. Load the repro application in [Codesandbox](https://codesandbox.io/p/devbox/dark-architecture-go8s7s)
2. View source on the homepage - confirm that the ""description"" meta tag appears in the document <head>
3. Click the link to visit the About page - confirm that the ""description"" meta tag appears in the document <head>
4. Click the link to visit the Dashboard page - observe that no ""description"" meta tag appears in the <head>

### Current vs. Expected behavior

Expected behavior:
When the ""description"" field is either absent, or present but undefined in the metadata object, the value rendered on the page will be the fallback parent's ""description"" field.

Actual behavior
When the description field is absent from the metadata, the value will use the parent's metadata as expected. But if the field is present but undefined, no fallback will be used, and no description tag will be rendered.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.1-canary.2 // Latest available version is detected (15.0.1-canary.2).
  eslint-config-next: N/A
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Metadata

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

It seems like a common use case to try to set a metadata field with a possibly undefined value.

An example:

```typescript
export async function generateMetadata(
  { params, searchParams }: Props
): Promise<Metadata> {
  // read route params
  const id = (await params).id
 
  // fetch data
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  return {
    title: product.title,
    // use optional chaining to access the subtitle, which will fall back to undefined if the product is not present
    // this may also be undefined if subtitle is an optional field
    description: product?.subtitle
  }
}
```


I would expect that if the value is undefined, the parent metadata value is shown. But instead the field is removed completely from the document. This is unexpected.",メタデータフィールドを未定義に設定すると、親コンポーネントのメタデータ値にフォールバックしなくなる,"### コードのリンク

https://codesandbox.io/p/devbox/dark-architecture-go8s7s

### 再現手順

1. [Codesandbox](https://codesandbox.io/p/devbox/dark-architecture-go8s7s)で再現アプリケーションを読み込む
2. ホームページのソースを表示 - ""description""メタタグがドキュメントの<head>に表示されていることを確認
3. Aboutページへのリンクをクリック - ""description""メタタグがドキュメントの<head>に表示されていることを確認
4. Dashboardページへのリンクをクリック - <head>に""description""メタタグが表示されないことを確認

### 現在の動作と期待される動作

期待される動作：
""Description""フィールドが存在しないか、メタデータオブジェクト内で未定義の場合、ページに表示される値はフォールバックの親の""Description""フィールドになります。

実際の動作：
メタデータからdescriptionフィールドが欠如している場合、値は期待通り親のメタデータを使用します。しかし、フィールドが存在するが未定義の場合、フォールバックは使用されず、descriptionタグはレンダリングされません。

### 環境情報

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ：
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ：
  next: 15.0.1-canary.2 // 利用可能な最新バージョンが検出されました (15.0.1-canary.2)。
  eslint-config-next: N/A
  react: 19.0.0-rc-69d4b800-20241021
  react-dom: 19.0.0-rc-69d4b800-20241021
  typescript: 5.3.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

メタデータ

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

未定義の値を持つメタデータフィールドを設定しようとするのは一般的なユースケースのようです。

例：

```typescript
export async function generateMetadata(
  { params, searchParams }: Props
): Promise<Metadata> {
  // ルートパラメータを読み取る
  const id = (await params).id
 
  // データを取得する
  const product = await fetch(`https://.../${id}`).then((res) => res.json())

  return {
    title: product.title,
    // オプショナルチェイニングを使用してサブタイトルにアクセスし、製品が存在しない場合は未定義にフォールバックします
    // サブタイトルがオプショナルフィールドの場合、これも未定義になる可能性があります
    description: product?.subtitle
  }
}
```

値が未定義の場合、親のメタデータ値が表示されることを期待していました。しかし、代わりにフィールドはドキュメントから完全に削除されます。これは予期しない動作です。"
S1,P1,Next.js fails to find/load native node modules compiled as a separate package in a (pnpm) workspace,"### Link to the code that reproduces this issue

https://github.com/daanboer/next-load-native-module

### To Reproduce

Install dependencies.

```bash
pnpm i
```
Build the `rust-lib` package (needs a working rust installation).

```bash
pnpm -C packages/rust-lib build
```

Try to build the `web-app` package.

```bash
pnpm -C packages/web-app build
```

### Current vs. Expected behavior

I expect the `greet` function from the `rust-lib` package to be imported and called. Instead the `web-app` build process throws the following error: `[cause]: Error: Cannot find module '../rust-lib/dist/index.node'`.

<details>
  <summary>Full build logs</summary>

  ```
> web-app@0.1.0 build /home/daan/git/next-load-native-module/packages/web-app
> next build

  ▲ Next.js 15.0.0

   Creating an optimized production build ...
 ✓ Compiled successfully
 ✓ Linting and checking validity of types    
   Collecting page data  .Error: Failed to collect configuration for /
    at /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js:1130:23
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Span.traceAsyncFn (/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/trace/trace.js:157:20) {
  [cause]: Error: Cannot find module '../rust-lib/dist/index.node'
  Require stack:
  - /home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/load-components.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/worker.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/compiled/jest-worker/processChild.js
      at Module._resolveFilename (node:internal/modules/cjs/loader:1248:15)
      at /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require-hook.js:55:36
      at Module._load (node:internal/modules/cjs/loader:1074:27)
      at TracingChannel.traceSync (node:diagnostics_channel:315:14)
      at wrapModuleLoad (node:internal/modules/cjs/loader:217:24)
      at Module.require (node:internal/modules/cjs/loader:1339:12)
      at mod.require (/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require-hook.js:65:28)
      at require (node:internal/modules/helpers:135:16)
      at 7215 (/home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js:1:31238)
      at t (/home/daan/git/next-load-native-module/packages/web-app/.next/server/webpack-runtime.js:1:127) {
    code: 'MODULE_NOT_FOUND',
    requireStack: [
      '/home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/load-components.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/worker.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/compiled/jest-worker/processChild.js'
    ]
  }
}

> Build error occurred
Error: Failed to collect page data for /
    at /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js:1233:15
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5) {
  type: 'Error'
}
   Collecting page data  . ELIFECYCLE  Command failed with exit code 1.
  ```
</details>


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1-NixOS SMP PREEMPT_DYNAMIC Thu Aug 29 15:33:59 UTC 2024
  Available memory (MB): 31938
  Available CPU cores: 20
Binaries:
  Node: 22.8.0
  npm: N/A
  Yarn: N/A
  pnpm: 9.10.0
Relevant Packages:
  next: 15.0.0 // Latest available version is detected (15.0.0).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

The same setup compiles when using Next.js `v14.2.13` for `web-app`. It seems that the bug is introduced in `v14.2.14`. ","タイトル:
Next.jsが(pnpm)ワークスペース内で別パッケージとしてコンパイルされたネイティブノードモジュールを見つけられない/読み込めない","本文:
### この問題を再現するためのコードへのリンク

https://github.com/daanboer/next-load-native-module

### 再現手順

依存関係をインストールします。

```bash
pnpm i
```
`rust-lib`パッケージをビルドします（動作するRustのインストールが必要です）。

```bash
pnpm -C packages/rust-lib build
```

`web-app`パッケージをビルドしようとします。

```bash
pnpm -C packages/web-app build
```

### 現在の動作と期待される動作

`rust-lib`パッケージから`greet`関数がインポートされて呼び出されることを期待しています。しかし、`web-app`のビルドプロセスは次のエラーをスローします: `[cause]: Error: Cannot find module '../rust-lib/dist/index.node'`。

<details>
  <summary>完全なビルドログ</summary>

  ``` 
> web-app@0.1.0 build /home/daan/git/next-load-native-module/packages/web-app
> next build

  ▲ Next.js 15.0.0

   最適化されたプロダクションビルドを作成中 ...
 ✓ 成功裏にコンパイルされました
 ✓ リンティングと型の有効性チェック    
   ページデータを収集中  .エラー: /の設定を収集できませんでした
    at /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js:1130:23
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
    at async Span.traceAsyncFn (/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/trace/trace.js:157:20) {
  [cause]: Error: Cannot find module '../rust-lib/dist/index.node'
  Require stack:
  - /home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/load-components.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/worker.js
  - /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/compiled/jest-worker/processChild.js
      at Module._resolveFilename (node:internal/modules/cjs/loader:1248:15)
      at /home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require-hook.js:55:36
      at Module._load (node:internal/modules/cjs/loader:1074:27)
      at TracingChannel.traceSync (node:diagnostics_channel:315:14)
      at wrapModuleLoad (node:internal/modules/cjs/loader:217:24)
      at Module.require (node:internal/modules/cjs/loader:1339:12)
      at mod.require (/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require-hook.js:65:28)
      at require (node:internal/modules/helpers:135:16)
      at 7215 (/home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js:1:31238)
      at t (/home/daan/git/next-load-native-module/packages/web-app/.next/server/webpack-runtime.js:1:127) {
    code: 'MODULE_NOT_FOUND',
    requireStack: [
      '/home/daan/git/next-load-native-module/packages/web-app/.next/server/app/page.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/require.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/server/load-components.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/utils.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node_modules/next/dist/build/worker.js',
      '/home/daan/git/next-load-native-module/node_modules/.pnpm/next@15.0.0_react-dom@19.0.0-rc-65a56d0e-20241020_react@19.0.0-rc-65a56d0e-20241020__react@19.0.0-rc-65a56d0e-20241020/node"
S1,P1,Hot reload doesn't work inside Docker container,"### Link to the code that reproduces this issue

https://github.com/ArtoszBart/next-issue

### To Reproduce

1. `docker-compose up`
2. make change in page.tsx
3. save changes

### Current vs. Expected behavior

Hot reload should reload the page to show changes, but changes is not visible in the browser

### Provide environment information

```bash
Physical PC:
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Education
  Available memory (MB): 16319
  Available CPU cores: 16
Binaries:
  Node: 20.18.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0 // Latest available version is detected (15.0.0).
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js Config:
  output: N/A

Container:
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  Available memory (MB): 7911
  Available CPU cores: 16
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 15.0.0 // Latest available version is detected (15.0.0).
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

After saving changes in page.tsx on the PC, the .next/server/chunks/ssr on PC is updated same as page.tsx in container. However .next/server/chunks/ssr in container remains not updated.","タイトル:
Dockerコンテナ内でホットリロードが機能しない","本文:
### この問題を再現するコードへのリンク

https://github.com/ArtoszBart/next-issue

### 再現手順

1. `docker-compose up`
2. page.tsxを変更する
3. 変更を保存する

### 現在の動作と期待される動作

ホットリロードはページをリロードして変更を表示するはずですが、ブラウザには変更が表示されません。

### 環境情報を提供してください

```bash
物理PC:
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Education
  利用可能メモリ (MB): 16319
  利用可能CPUコア: 16
バイナリ:
  Node: 20.18.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0 // 利用可能な最新バージョンが検出されました (15.0.0)。
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js設定:
  出力: N/A

コンテナ:
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  利用可能メモリ (MB): 7911
  利用可能CPUコア: 16
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 15.0.0 // 利用可能な最新バージョンが検出されました (15.0.0)。
  eslint-config-next: 15.0.0
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

PCでpage.tsxの変更を保存した後、PCの.next/server/chunks/ssrはコンテナのpage.tsxと同様に更新されます。しかし、コンテナ内の.next/server/chunks/ssrは更新されません。"
S1,P1,Unable to process favicon,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/romantic-ace-vn6rqz

### To Reproduce

1. Place in the app folder the specific favicon.ico I have provided in the codesandbox
2. Run dev with turbo enabled
3. Receive the following error:
```
 ⨯ ./app/favicon.ico
Processing image failed
unable to decode image data

Caused by:
- failed to fill whole buffer
```

### Current vs. Expected behavior

Would expect the following the favicon to render:
![image](https://github.com/user-attachments/assets/b42c083a-519e-475c-ac67-4ec55faef867)

but instead get:
![image](https://github.com/user-attachments/assets/aed283e9-2640-466e-a701-91f9a0aaddf2)


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0 // Latest available version is detected (15.0.0).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

This error started occuring on `next@15.0.0-rc.1` and persists on `next@15.0.0`. It was not occuring on `next@15.0.0-rc.0`.","タイトル:
ファビコンを処理できません","本文:
### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/devbox/romantic-ace-vn6rqz

### 再現手順

1. コードサンドボックスで提供した特定のfavicon.icoをアプリフォルダに置く
2. Turboを有効にして開発を実行する
3. 次のエラーを受け取る:
```
 ⨯ ./app/favicon.ico
画像の処理に失敗しました
画像データをデコードできません

原因:
- バッファ全体を埋めることに失敗しました
```

### 現在の動作と期待される動作

次のファビコンがレンダリングされることを期待しています:
![image](https://github.com/user-attachments/assets/b42c083a-519e-475c-ac67-4ec55faef867)

しかし、代わりに次のものが表示されます:
![image](https://github.com/user-attachments/assets/aed283e9-2640-466e-a701-91f9a0aaddf2)

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.0 // 利用可能な最新バージョンが検出されました (15.0.0)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ターボパック

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

このエラーは`next@15.0.0-rc.1`で発生し始め、`next@15.0.0`でも持続しています。`next@15.0.0-rc.0`では発生していませんでした。"
S1,P1,Can't override headers via middleware,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/great-elbakyan-jty6yh

### To Reproduce

Start the application and inspect the headers. You'll see that new headers can be added, but existing headers can't be modified.

### Current vs. Expected behavior

We should be able to replace or remove headers when rewriting.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Wed Jul 31 20:50:54 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T8122
  Available memory (MB): 24576
  Available CPU cores: 8
Binaries:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.2
Relevant Packages:
  next: 15.0.0 // Latest available version is detected (15.0.0).
  eslint-config-next: N/A
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

We have a small Next.js app that is designed to proxy between two other apps sharing a single domain.

These apps have headers that we want to modify/remove when their pages are served via the proxy.

We can add headers, but we are not able to modify or remove headers.",ヘッダーをミドルウェア経由で上書きできない,"### コードのリンク

https://codesandbox.io/p/devbox/great-elbakyan-jty6yh

### 再現手順

アプリケーションを起動し、ヘッダーを検査します。新しいヘッダーは追加できますが、既存のヘッダーは変更できないことがわかります。

### 現在の動作と期待される動作

ヘッダーを置き換えたり削除したりできるはずです。

### 環境情報

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Wed Jul 31 20:50:54 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T8122
  利用可能なメモリ (MB): 24576
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.2
関連パッケージ:
  next: 15.0.0 // 利用可能な最新バージョンが検出されました (15.0.0)。
  eslint-config-next: N/A
  react: 19.0.0-rc-65a56d0e-20241020
  react-dom: 19.0.0-rc-65a56d0e-20241020
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

単一のドメインを共有する2つのアプリ間でプロキシとして設計された小さなNext.jsアプリがあります。

これらのアプリには、プロキシ経由でページが提供される際に変更または削除したいヘッダーがあります。

ヘッダーを追加できますが、ヘッダーを変更または削除することはできません。"
S1,P1,Tree shaking not working for pages with transpilePackages,"### Link to the code that reproduces this issue

https://github.com/capJavert/nextjs-tree-shaking-test

### To Reproduce

1. Build application in production
2. Check `_app` bundle and it will contain `bla` const and other exports/imports from `shared/src/consts/common.ts` even though that const is only imported inside `/test` page

### Current vs. Expected behavior

We would expect `bla` to be tree shaken out of the main bundle (`_app`) and to only be included inside that page's bundle.

The above is just a small test but on a big application this has a major bundle size implications. 

The shared package is also added to `transpilePackages` and `optimizePackageImports` and `sideEffects` is set to `false`. While above helps in some other cases we noticed that this setup does not allow `transpilePackages` to work. 

We also tried moving shared to `web/src` and import directly and that correctly tree shakes the bundle and `bla` is not included inside `_app` so there must be some issue with `transpilePackages` (from our understanding). 

Looking forward to getting more eyes on this. 

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: 1.22.18
  pnpm: 9.0.4
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Pages Router, Performance

### Which stage(s) are affected? (Select all that apply)

next build (local), Vercel (Deployed)

### Additional context

I did not test this on 15.x since it is next canary but don't expect it to change since 15.x is focused on new react features.",ツリーシェイキングが transpilePackages を使用しているページで機能しない,"### コードのリンク

https://github.com/capJavert/nextjs-tree-shaking-test

### 再現手順

1. アプリケーションをプロダクションビルドする
2. `_app` バンドルを確認すると、`bla` 定数や `shared/src/consts/common.ts` からの他のエクスポート/インポートが含まれていることがわかります。これは、その定数が `/test` ページ内でのみインポートされているにもかかわらずです。

### 現在の動作と期待される動作

`bla` がメインバンドル（`_app`）からツリーシェイキングされ、そのページのバンドル内にのみ含まれることを期待しています。

上記は小さなテストですが、大規模なアプリケーションでは、これがバンドルサイズに大きな影響を与えます。

共有パッケージは `transpilePackages` に追加され、`optimizePackageImports` と `sideEffects` は `false` に設定されています。上記の設定は他のケースでは役立ちますが、この設定では `transpilePackages` が機能しないことに気付きました。

また、共有を `web/src` に移動して直接インポートすることも試みましたが、それは正しくバンドルをツリーシェイキングし、`bla` は `_app` に含まれないため、`transpilePackages` に何らかの問題があると考えられます。

この件についてさらに注目してもらえることを期待しています。

### 環境情報

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  利用可能メモリ (MB): 32768
  利用可能 CPU コア: 10
バイナリ:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: 1.22.18
  pnpm: 9.0.4
関連パッケージ:
  next: 14.2.15 // 検出された最新のバージョンは 14.2.15 です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js 設定:
  output: N/A
```

### 影響を受ける領域 (該当するものをすべて選択)

create-next-app、Pages Router、パフォーマンス

### 影響を受けるステージ (該当するものをすべて選択)

next build (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

15.x ではテストしていませんが、次のカナリア版であり、15.x は新しい React 機能に焦点を当てているため、変更は期待していません。"
S1,P1,setAssetPrefix not work in custom server,"### Link to the code that reproduces this issue

https://github.com/yutingzhao1991/nextSetAssetPrefixBug

### To Reproduce

1. Clone https://github.com/yutingzhao1991/nextSetAssetPrefixBug
2. npm install
3. node index.js

### Current vs. Expected behavior

https://github.com/yutingzhao1991/nextSetAssetPrefixBug/blob/main/index.js#L14 This line of code doesn't work, I hope to set the address of static resources through `setAssetPrefix`, different server environments need to request different addresses.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 22.3.0: Mon Jan 30 20:39:46 PST 2023; root:xnu-8792.81.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: N/A
  pnpm: 8.14.0
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

Similar to issue https://github.com/vercel/next.js/issues/59940, but it seems like this problem has been fixed by PR https://github.com/vercel/next.js/pull/61676. However, I tried the latest version of next and the issue still persists.",カスタムサーバーでのsetAssetPrefixが機能しない,"### この問題を再現するコードへのリンク

https://github.com/yutingzhao1991/nextSetAssetPrefixBug

### 再現手順

1. https://github.com/yutingzhao1991/nextSetAssetPrefixBug をクローンする
2. npm install を実行する
3. node index.js を実行する

### 現在の動作と期待される動作

https://github.com/yutingzhao1991/nextSetAssetPrefixBug/blob/main/index.js#L14 このコード行は機能しません。`setAssetPrefix`を通じて静的リソースのアドレスを設定したいのですが、異なるサーバー環境では異なるアドレスをリクエストする必要があります。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 22.3.0: Mon Jan 30 20:39:46 PST 2023; root:xnu-8792.81.3~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.12.2
  npm: 10.5.0
  Yarn: N/A
  pnpm: 8.14.0
関連パッケージ:
  next: 14.2.15 // 利用可能な最新バージョンが検出されました (14.2.15)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

https://github.com/vercel/next.js/issues/59940 に似ていますが、この問題はPR https://github.com/vercel/next.js/pull/61676 によって修正されたようです。しかし、最新バージョンのnextを試しましたが、問題は依然として続いています。"
S1,P1,"Custom Server Not Bundled Correctly with Standalone Build, ESBuild, or Bun","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/determined-shaw-nz95jm

### To Reproduce

1. Create a new Next.js application with a custom server, or use yours if you already have one.
```bash
npx create-next-app --example custom-server custom-server-app
```

2. Try to bundle the server using the following approaches:

**Standalone Build:**
```js
// next.config.js
{
  output: ""standalone""
}
```
While the build succeeds, it does not support custom servers properly, as mentioned in [this existing discussion](https://github.com/vercel/next.js/discussions/34599). As a result, the standalone build ignores the custom server, preventing full bundling.

**ESBuild:**
```bash
npx esbuild server.js --bundle --platform=node --log-limit=0 --log-level=error
```
This approach fails with dependency handling issues. Please find the logs here:
**[esbuild.log](https://github.com/user-attachments/files/17445140/esbuild.log)**


**Bun:**
```bash
npx bun build server.ts --outdir out/ --target node
```
Similar to ESBuild, this fails with dependency handling issues. Here is the output log: 
**[bun.log](https://github.com/user-attachments/files/17445142/bun.log)**

Here are some of the common errors you can find in the logs linked above:

- `Could not resolve: ""react-dom/server.edge""`
- `Could not resolve: ""critters""`
- `Could not resolve: ""react-server-dom-turbopack/client.edge""`
- `Could not resolve: ""react-server-dom-webpack/client.edge""`
- `Could not resolve: ""react-server-dom-webpack/server.node""`

### Current vs. Expected behavior

### Current Behavior:
**Bundlers or Build Tools (e.g. ESBuild and Bun):** Fail due to dependency resolution issues. Likely related to how Next.js handles or manifests its internal dependencies or experimental forks of libraries.
**Standalone build:** Does not support bundling of custom servers and ignores them during the build process.

### Expected Behavior:
The build system should either:
- Enable external bundling tools like ESBuild and Bun to properly handle the custom server and all dependencies without failure.
- Support custom servers natively in the standalone build (i.e., correctly bundle custom servers along with the app).

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:17:33 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6031
  Available memory (MB): 65536
  Available CPU cores: 16
Binaries:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 4.9.5
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

Bundling the entire application, including custom servers, is essential for production environments, especially when optimizing deployment artifacts such as Docker images. Proper bundling would allow removing the `node_modules` folder, greatly reducing the image size.",カスタムサーバーがスタンドアロンビルド、ESBuild、またはBunと正しくバンドルされていない,"### コードのリンク（この問題を再現するための）

https://codesandbox.io/p/devbox/determined-shaw-nz95jm

### 再現手順

1. カスタムサーバーを使用して新しいNext.jsアプリケーションを作成するか、既に持っている場合はそれを使用します。
```bash
npx create-next-app --example custom-server custom-server-app
```

2. 次のアプローチを使用してサーバーをバンドルしようとします：

**スタンドアロンビルド:**
```js
// next.config.js
{
  output: ""standalone""
}
```
ビルドは成功しますが、[この既存の議論](https://github.com/vercel/next.js/discussions/34599)で述べられているように、カスタムサーバーを適切にサポートしていません。その結果、スタンドアロンビルドはカスタムサーバーを無視し、完全なバンドルを妨げます。

**ESBuild:**
```bash
npx esbuild server.js --bundle --platform=node --log-limit=0 --log-level=error
```
このアプローチは依存関係の処理の問題で失敗します。ログはここにあります：
**[esbuild.log](https://github.com/user-attachments/files/17445140/esbuild.log)**

**Bun:**
```bash
npx bun build server.ts --outdir out/ --target node
```
ESBuildと同様に、依存関係の処理の問題で失敗します。出力ログはここにあります：
**[bun.log](https://github.com/user-attachments/files/17445142/bun.log)**

上記のリンクされたログで見つけることができる一般的なエラーのいくつか：

- `解決できませんでした: ""react-dom/server.edge""`
- `解決できませんでした: ""critters""`
- `解決できませんでした: ""react-server-dom-turbopack/client.edge""`
- `解決できませんでした: ""react-server-dom-webpack/client.edge""`
- `解決できませんでした: ""react-server-dom-webpack/server.node""`

### 現在の動作と期待される動作

### 現在の動作:
**バンドラーまたはビルドツール（例：ESBuildとBun）：** 依存関係の解決の問題により失敗します。これは、Next.jsが内部依存関係やライブラリの実験的フォークをどのように処理または表現するかに関連している可能性があります。
**スタンドアロンビルド：** カスタムサーバーのバンドルをサポートせず、ビルドプロセス中に無視します。

### 期待される動作:
ビルドシステムは次のいずれかを行うべきです：
- ESBuildやBunなどの外部バンドルツールがカスタムサーバーとすべての依存関係を適切に処理できるようにする。
- スタンドアロンビルドでカスタムサーバーをネイティブにサポートする（つまり、アプリと一緒にカスタムサーバーを正しくバンドルする）。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:17:33 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6031
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.18.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.15 // 検出された最新のバージョンは14.2.15です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 4.9.5
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明、出力（エクスポート/スタンドアロン）

### 影響を受ける段階はどれですか？（該当するすべてを選択）

next build（ローカル）

### 追加のコンテキスト

カスタムサーバーを含むアプリケーション全体をバンドルすることは、特にDockerイメージなどのデプロイメントアーティファクトを最適化する際に、プロダクション環境にとって重要です。適切なバンドルにより、`node_modules`フォルダーを削除でき、イメージサイズを大幅に削減できます。"
S1,P1,Missing `src.blurDataURL` for default metadata images while importing `apple-icon.png`/`icon.png`/`opengraph-image.png`/`twitter-image.png` with Turbopack enabled,"### Link to the code that reproduces this issue

https://github.com/dimaMachina/repro-next/tree/missing-src.blurDataURL

### To Reproduce

Run `pnpm dev`

### Current vs. Expected behavior

See errors:

```text
Error: Image with src ""/_next/static/media/opengraph-image.41136f47.png"" has ""placeholder='blur'"" property but is missing the ""blurDataURL"" property.
Error: Image with src ""/_next/static/media/icon.92de3cc2.png"" has ""placeholder='blur'"" property but is missing the ""blurDataURL"" property.
Error: Image with src ""/_next/static/media/opengraph-image.41136f47.png"" has ""placeholder='blur'"" property but is missing the ""blurDataURL"" property.
Error: Image with src ""/_next/static/media/twitter-image.92de3cc2.png"" has ""placeholder='blur'"" property but is missing the ""blurDataURL"" property.
```

Without `--turbo` I don't have any error.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020
  Available memory (MB): 98304
  Available CPU cores: 12
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.1
Relevant Packages:
  next: 15.0.0-canary.196 // There is a newer canary version (15.0.0-canary.197) available, please upgrade! 
  eslint-config-next: 14.1.0
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
Turbopackが有効な状態で`apple-icon.png`/`icon.png`/`opengraph-image.png`/`twitter-image.png`をインポートする際にデフォルトのメタデータ画像に対して`src.blurDataURL`が欠落しています","本文:
### この問題を再現するコードへのリンク

https://github.com/dimaMachina/repro-next/tree/missing-src.blurDataURL

### 再現手順

`pnpm dev`を実行します。

### 現在の動作と期待される動作

エラーを参照してください：

```text
Error: srcが""/_next/static/media/opengraph-image.41136f47.png""の画像は""placeholder='blur'""プロパティを持っていますが、""blurDataURL""プロパティが欠落しています。
Error: srcが""/_next/static/media/icon.92de3cc2.png""の画像は""placeholder='blur'""プロパティを持っていますが、""blurDataURL""プロパティが欠落しています。
Error: srcが""/_next/static/media/opengraph-image.41136f47.png""の画像は""placeholder='blur'""プロパティを持っていますが、""blurDataURL""プロパティが欠落しています。
Error: srcが""/_next/static/media/twitter-image.92de3cc2.png""の画像は""placeholder='blur'""プロパティを持っていますが、""blurDataURL""プロパティが欠落しています。
```

`--turbo`なしではエラーは発生しません。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: x64
  バージョン: Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 98304
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.12.1
関連パッケージ:
  next: 15.0.0-canary.196 // 新しいカナリアバージョン (15.0.0-canary.197) が利用可能です。アップグレードしてください！ 
  eslint-config-next: 14.1.0
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.6.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Turbopack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Next.js App Router ISR doesn't remove noindex meta tag on cache revalidation,"### Link to the code that reproduces this issue

https://stackblitz.com/edit/stackblitz-starters-ws74xq?file=README.md

### To Reproduce

1. Build the project and start it in production mode `npm run build && npm start`
2. Open a new terminal and run the backend server `npm run server`
3. Open the application on the `/admin` path. Click on any item in the list. Change the status to ""Draft"" and click on save button. If the post already has a ""Draft"" status then first change it to ""Published"" and make it ""Draft"" again.
4. Copy the id of the post and go to page `/posts/<id>`. Refresh it until the not found page appears.
5. Check the generated page in `.next` directory: `cat .next/server/app/posts/<id>.html`. There should be `<meta name=""robots"" content=""noindex""/>` tag.
6. Now go the the page `/admin/posts/<id>` and change the status to ""Published"" and save.
7. Go to the page `/posts/<id>` and refresh it until the non-404 page appears. Run the `cat .next/server/app/posts/<id>.html` command in terminal again. There is still `<meta name=""robots"" content=""noindex""/>` tag.

### Current vs. Expected behavior

I expect Next.js to remove the robots tag on revalidation.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: Ubuntu 20.04.0 LTS Thu Oct 17 2024 22:46:17 GMT+0500 (Uzbekistan Standard Time)
  Available memory (MB): NaN
  Available CPU cores: 8
Binaries:
  Node: 18.20.3
  npm: 10.2.3
  Yarn: 1.22.19
  pnpm: 8.15.6
Relevant Packages:
  next: 14.2.8 // There is a newer version (14.2.15) available, upgrade recommended! 
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next build (local), next start (local)

### Additional context

_No response_","タイトル:
Next.js アプリルーター ISR がキャッシュの再検証時に noindex メタタグを削除しない","本文:
### この問題を再現するコードへのリンク

https://stackblitz.com/edit/stackblitz-starters-ws74xq?file=README.md

### 再現手順

1. プロジェクトをビルドし、プロダクションモードで開始します `npm run build && npm start`
2. 新しいターミナルを開き、バックエンドサーバーを実行します `npm run server`
3. `/admin` パスでアプリケーションを開きます。リスト内の任意のアイテムをクリックします。ステータスを「ドラフト」に変更し、保存ボタンをクリックします。投稿がすでに「ドラフト」ステータスの場合は、最初に「公開」に変更し、再度「ドラフト」にします。
4. 投稿の ID をコピーし、`/posts/<id>` ページに移動します。見つからないページが表示されるまでリフレッシュします。
5. `.next` ディレクトリ内の生成されたページを確認します: `cat .next/server/app/posts/<id>.html`。`<meta name=""robots"" content=""noindex""/>` タグが存在するはずです。
6. 次に、`/admin/posts/<id>` ページに移動し、ステータスを「公開」に変更して保存します。
7. `/posts/<id>` ページに移動し、404 でないページが表示されるまでリフレッシュします。ターミナルで再度 `cat .next/server/app/posts/<id>.html` コマンドを実行します。まだ `<meta name=""robots"" content=""noindex""/>` タグが存在します。

### 現在の動作と期待される動作

Next.js が再検証時にロボットタグを削除することを期待しています。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: Ubuntu 20.04.0 LTS Thu Oct 17 2024 22:46:17 GMT+0500 (ウズベキスタン標準時)
  利用可能なメモリ (MB): NaN
  利用可能な CPU コア: 8
バイナリ:
  Node: 18.20.3
  npm: 10.2.3
  Yarn: 1.22.19
  pnpm: 8.15.6
関連パッケージ:
  next: 14.2.8 // 新しいバージョン (14.2.15) が利用可能です。アップグレードを推奨します！
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,"Including exclamation mark("" ! "")  in assetPrefix compilation will result in an error","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/xenodochial-easley-ddh8vq?workspaceId=6bdce0be-af7a-405b-adec-ac633e9ed70d

### To Reproduce

Add the following config to ""next.config.mjs"":
```js
output: ""export"",
assetPrefix: ""https://mycdn.com/!mark"",
```
if the assetPrefix incude ""!"" will trigger error
if change the ""!"" to ""21%"" will be ok (but not my need)


### Current vs. Expected behavior

Current:
```sh
➜  workspace git:(master) ✗ yarn build
yarn run v1.22.19
$ next build
  ▲ Next.js 15.0.0-canary.196

   Creating an optimized production build ...
Failed to compile.

Module not found: Error: Can't resolve 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' in '/project/workspace'

Module not found: Error: Can't resolve 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' in '/project/workspace'

Module not found: Error: Can't resolve 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' in '/project/workspace'


> Build failed because of webpack errors
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```



### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0-canary.196 // Latest available version is detected (15.0.0-canary.196).
  eslint-config-next: N/A
  react: 19.0.0-rc-77b637d6-20241016
  react-dom: 19.0.0-rc-77b637d6-20241016
  typescript: 5.3.3
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

Both 15.0 and 14.x is not ok","タイトル:
アセットプレフィックスのコンパイルに感嘆符（"" ! ""）を含めるとエラーが発生します","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/xenodochial-easley-ddh8vq?workspaceId=6bdce0be-af7a-405b-adec-ac633e9ed70d

### 再現手順

次の設定を ""next.config.mjs"" に追加します：
```js
output: ""export"",
assetPrefix: ""https://mycdn.com/!mark"",
```
アセットプレフィックスに ""!"" を含めるとエラーが発生します。
""!"" を ""21%"" に変更すると問題ありません（しかし、私の必要なものではありません）。

### 現在の動作と期待される動作

現在の動作：
```sh
➜  workspace git:(master) ✗ yarn build
yarn run v1.22.19
$ next build
  ▲ Next.js 15.0.0-canary.196

   最適化されたプロダクションビルドを作成中...
コンパイルに失敗しました。

モジュールが見つかりません: エラー: 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' を '/project/workspace' で解決できません

モジュールが見つかりません: エラー: 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' を '/project/workspace' で解決できません

モジュールが見つかりません: エラー: 'mark&nextConfigOutput=export&flyingShuttle=false&nextConfigExperimentalUseEarlyImport=&preferredRegion=&middlewareConfig=e30%3D' を '/project/workspace' で解決できません

> ビルドは webpack エラーのために失敗しました
エラー コマンドは終了コード 1 で失敗しました。
情報 このコマンドのドキュメントについては https://yarnpkg.com/en/docs/cli/run を訪問してください。
```

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能な CPU コア: 2
バイナリ：
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ：
  next: 15.0.0-canary.196 // 利用可能な最新バージョンが検出されました (15.0.0-canary.196)。
  eslint-config-next: N/A
  react: 19.0.0-rc-77b637d6-20241016
  react-dom: 19.0.0-rc-77b637d6-20241016
  typescript: 5.3.3
Next.js 設定：
  output: export
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

create-next-app

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build (ローカル)

### 追加のコンテキスト

15.0 と 14.x の両方が問題です。"
S1,P1,Cookies cannot be read in middleware while defined in server actions (since 14 at least),"### Link to the code that reproduces this issue

https://github.com/ScreamZ/reproduction-app-cookies-middleware

### To Reproduce

1. Start application
2. Clic ""click me"" button

### Current vs. Expected behavior

Cookies are set in Server action and middleware is not able to catch it!
![image](https://github.com/user-attachments/assets/590e1236-0045-43f0-a634-e0587120a057)


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 9.12.1
Relevant Packages:
  next: 15.0.0-canary.196
  eslint-config-next: N/A
  react: 19.0.0-rc-77b637d6-20241016
  react-dom: 19.0.0-rc-77b637d6-20241016
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_",クッキーはサーバーアクションで定義されている間、ミドルウェアでは読み取れません（少なくとも14以降）,"### この問題を再現するコードへのリンク

https://github.com/ScreamZ/reproduction-app-cookies-middleware

### 再現手順

1. アプリケーションを起動する
2. 「クリックして」ボタンをクリックする

### 現在の動作と期待される動作

クッキーはサーバーアクションで設定されており、ミドルウェアはそれをキャッチできません！
![image](https://github.com/user-attachments/assets/590e1236-0045-43f0-a634-e0587120a057)

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:39:07 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 9.12.1
関連パッケージ:
  next: 15.0.0-canary.196
  eslint-config-next: N/A
  react: 19.0.0-rc-77b637d6-20241016
  react-dom: 19.0.0-rc-77b637d6-20241016
  typescript: 5.3.3
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next start（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,Error on browsers like chrome 83,"### Link to the code that reproduces this issue

https://github.com/ViniciusLeviVL/next-catalogo-digital-debug2

### To Reproduce

Steps to reproduce:
Just init a next project with create-next-app@latest, deploy and see using a emulator like appetize.io (need to be deployed in web first) or insomnia (can reproduce in development environment)

https://appetize.io/demo?device=galaxytabs7&osVersion=11.0&record=true&debug=true&proxy=intercept&enableAdb=true

### Current vs. Expected behavior

I have a project with next.js and this month some old browsers is getting error on load, i tryed init a new project with the default template of next and it's getting error too, did not next support browsers like chrome 83 ?

I deployed my project on vercel to make sure that's not my server, but still getting these errors

https://next-catalogo-digital.vercel.app

Images:

[Error stack in my globar-error.tsx](https://i.sstatic.net/jtEVjV6F.png)

[Browser version of emulator](https://i.sstatic.net/wjCSrVsY.png)



### Provide environment information

```bash
Versions: 

Node: 20.16.0
Browser: Chrome 83 ...
Next: 14.2.15
```

My package.json:
```
{
  ""name"": ""next-example"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""next"": ""14.2.15""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.15""
  }
}
```
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Pages Router, Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

I tested in next 13, 14 and 15","タイトル:
Chrome 83のようなブラウザでのエラー","本文:
### この問題を再現するコードへのリンク

https://github.com/ViniciusLeviVL/next-catalogo-digital-debug2

### 再現手順

再現手順：
create-next-app@latestで次のプロジェクトを初期化し、デプロイして、appetize.ioのようなエミュレーターで確認します（最初にウェブにデプロイする必要があります）またはinsomnia（開発環境で再現可能）

https://appetize.io/demo?device=galaxytabs7&osVersion=11.0&record=true&debug=true&proxy=intercept&enableAdb=true

### 現在の動作と期待される動作

私はnext.jsのプロジェクトを持っていて、今月いくつかの古いブラウザで読み込み時にエラーが発生しています。デフォルトのテンプレートで新しいプロジェクトを初期化してみましたが、エラーが発生しています。nextはChrome 83のようなブラウザをサポートしていないのでしょうか？

私のプロジェクトをvercelにデプロイして、サーバーの問題ではないことを確認しましたが、それでもこれらのエラーが発生しています。

https://next-catalogo-digital.vercel.app

画像：

[私のglobar-error.tsxのエラースタック](https://i.sstatic.net/jtEVjV6F.png)

[エミュレーターのブラウザバージョン](https://i.sstatic.net/wjCSrVsY.png)

### 環境情報を提供

```bash
バージョン：

Node: 20.16.0
ブラウザ: Chrome 83 ...
Next: 14.2.15
```

私のpackage.json：
```
{
  ""name"": ""next-example"",
  ""version"": ""0.1.0"",
  ""private"": true,
  ""scripts"": {
    ""dev"": ""next dev"",
    ""build"": ""next build"",
    ""start"": ""next start"",
    ""lint"": ""next lint""
  },
  ""dependencies"": {
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""next"": ""14.2.15""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.15""
  }
}
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app、ページルーター、並行およびインターセプトルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、Vercel（デプロイ済み）、その他（デプロイ済み）

### 追加のコンテキスト

私はnext 13、14、15でテストしました。"
S1,P1,Page is not rendered if router.push({static path with query params}),"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/nostalgic-butterfly-m4yqwg?file=%2Fpackage.json

### To Reproduce

1. I use static export and app routes, all my components are client components
2. Reproduse in production env
3. Example: router.push(""/login?firstVisit=true"") -> login page is not rendered, router.push(""/login"") -> works
4. I also do prefetch for router.push(""/login"")

If I have query params in url the page is not rendered.

### Current vs. Expected behavior

Login page should render for router.push(""/login?firstVisit=true"")

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 7.25.1
Relevant Packages:
  next: 14.2.10
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: export
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

_No response_",ページがレンダリングされない場合（router.push({静的パスとクエリパラメータ}）,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/nostalgic-butterfly-m4yqwg?file=%2Fpackage.json

### 再現手順

1. 静的エクスポートとアプリルートを使用しており、すべてのコンポーネントはクライアントコンポーネントです。
2. 本番環境で再現します。
3. 例：router.push(""/login?firstVisit=true"") -> ログインページがレンダリングされない、router.push(""/login"") -> 動作します。
4. router.push(""/login"")のためにプレフェッチも行っています。

URLにクエリパラメータがある場合、ページはレンダリングされません。

### 現在の動作と期待される動作

router.push(""/login?firstVisit=true"")に対してログインページがレンダリングされるべきです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能メモリ (MB): 32768
  利用可能CPUコア: 10
バイナリ:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 7.25.1
関連パッケージ:
  next: 14.2.10
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  出力: export
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

_回答なし_"
S1,P1,Redirect from Server Action takes precedence over the Redirect from Middleware when they are sequential,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/dqqhy7

### To Reproduce

1. Visit the [demo](https://dqqhy7-3000.csb.app/)
2. Click the Trigger A redirect button
3. You'll be redirected. The search params you'll see have hello='xyz' (This was expected to be hello=xyz&identifier=yolo)
4. Refresh the page, you'll see the expected params

### Current vs. Expected behavior

Current Behavior:

Triggering a redirect from a server action to another route results in the invocation of the middleware, which processes the request and has the ability to redirect again depending on how the request is handled. In this case, search parameters attached to the redirect URL from the server action are being received in the middleware. I’m trying to append an additional search parameter and redirect again, and although the generated URL with the newly added search param appears correct, the page served to the client does not include the newly appended parameter.

Expected Behavior:

I expect the parameter I appended to be available to the client because I attached it and triggered the redirect in the middleware.

In my actual codebase, the server action signs the user in (using signIn from [authjs](https://authjs.dev/) with redirect: false) and then redirects them (using next/navigation) to another route. This route is supposed to generate a temporary identifier and append it to the search parameters. I use middleware to achieve this, as the middleware intercepts the request to the target route (from the server action), checks for the search parameters, and if the identifier is missing, calls my custom backend (using the auth token it just received). The middleware then appends the identifier from the backend response to the search parameters and redirects the request again. The middleware is invoked once more, but this time with the search parameter included in the URL.

The issue is that the client is still being served a page without the appended query parameter.

I’ve found a workaround by avoiding the redirect in the server action and using router.push in the client component that triggered the workflow.

Could someone help me understand why this issue is happening?

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:14:59 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T8122
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 18.20.3
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: 9.12.1
Relevant Packages:
  next: 14.2.6 // There is a newer version (14.2.15) available, upgrade recommended! 
  eslint-config-next: 14.2.6
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: standalone
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

Tested on v14.2.5, v14.2.6, v14.2.15. Happens locally as well deployed on gcloud with a docker image.",サーバーアクションからのリダイレクトは、ミドルウェアからのリダイレクトよりも優先される（連続している場合）,"### コードのリンク（この問題を再現するための）

https://codesandbox.io/p/devbox/dqqhy7

### 再現手順

1. [デモ](https://dqqhy7-3000.csb.app/)にアクセスします。
2. 「Trigger A redirect」ボタンをクリックします。
3. リダイレクトされます。表示される検索パラメータはhello='xyz'です（これはhello=xyz&identifier=yoloになるはずでした）。
4. ページをリフレッシュすると、期待されるパラメータが表示されます。

### 現在の動作と期待される動作

現在の動作：

サーバーアクションから別のルートへのリダイレクトをトリガーすると、ミドルウェアが呼び出され、リクエストを処理し、リクエストの処理方法に応じて再度リダイレクトする能力があります。この場合、サーバーアクションからのリダイレクトURLに添付された検索パラメータがミドルウェアで受信されています。私は追加の検索パラメータを追加して再度リダイレクトしようとしていますが、新しく追加された検索パラメータを含む生成されたURLは正しいように見えるものの、クライアントに提供されるページには新しく追加されたパラメータが含まれていません。

期待される動作：

私は、ミドルウェアでリダイレクトをトリガーしたため、追加したパラメータがクライアントで利用可能であることを期待しています。

私の実際のコードベースでは、サーバーアクションがユーザーをサインインさせ（[authjs](https://authjs.dev/)のsignInを使用し、redirect: false）、次に別のルートにリダイレクトします。このルートは、一時的な識別子を生成し、それを検索パラメータに追加することになっています。私はミドルウェアを使用してこれを実現しています。ミドルウェアは、ターゲットルートへのリクエストをインターセプトし（サーバーアクションから）、検索パラメータをチェックし、識別子が欠けている場合は、受け取った認証トークンを使用してカスタムバックエンドを呼び出します。ミドルウェアは、バックエンドの応答から識別子を検索パラメータに追加し、リクエストを再度リダイレクトします。ミドルウェアは再度呼び出されますが、今回はURLに検索パラメータが含まれています。

問題は、クライアントが追加されたクエリパラメータなしでページを提供され続けることです。

サーバーアクションでのリダイレクトを避け、ワークフローをトリガーしたクライアントコンポーネントでrouter.pushを使用することで回避策を見つけました。

この問題がなぜ発生しているのか理解する手助けをしていただけませんか？

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:14:59 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T8122
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 18.20.3
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: 9.12.1
関連パッケージ:
  next: 14.2.6 // 新しいバージョン (14.2.15) が利用可能です。アップグレードをお勧めします！ 
  eslint-config-next: 14.2.6
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js 設定:
  output: standalone
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

v14.2.5、v14.2.6、v14.2.15でテスト済み。ローカルでもgcloudにデプロイされたdockerイメージでも発生します。"
S1,P1,NextJs requests custom route when using `navigator.clipboard.writeText`,"### Link to the code that reproduces this issue

https://github.com/cuongle-hdwebsoft/nextjs-bug

### To Reproduce

1. Start the application in development mode
2. Go to homepage http://localhost:8080/
3. Click the button `Click me`, and wait until it alerts `Copy clipboard successfully`
4. Open server log in the terminal, it will appear `==> This route is called`

### Current vs. Expected behavior

Current behavior:
- When I use `navigator.clipboard.writeText` to copy the text, it always request API to my custom route

Expected behavior:
- It should not request API when using `navigator.clipboard.writeText`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.12.0
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",次のJsは、`navigator.clipboard.writeText`を使用する際にカスタムルートをリクエストします,"### この問題を再現するコードへのリンク

https://github.com/cuongle-hdwebsoft/nextjs-bug

### 再現手順

1. アプリケーションを開発モードで起動します
2. ホームページ http://localhost:8080/ に移動します
3. ボタン `Click me` をクリックし、`Copy clipboard successfully` とアラートが表示されるまで待ちます
4. ターミナルのサーバーログを開くと、`==> This route is called` と表示されます

### 現在の動作と期待される動作

現在の動作：
- `navigator.clipboard.writeText` を使用してテキストをコピーすると、常にカスタムルートにAPIをリクエストします

期待される動作：
- `navigator.clipboard.writeText` を使用する際にAPIをリクエストしないはずです

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Mon Aug 12 20:51:54 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ：
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.22
  pnpm: 9.12.0
関連パッケージ：
  next: 14.2.15 // 検出された最新のバージョンは (14.2.15) です。
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js 設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

create-next-app

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,"[turbopack]: Can't specify issuer with @svgr/webpack loader, causes invalid url transformation in css","### Link to the code that reproduces this issue

https://github.com/MaciejWiatr/svgr-nextjs-css-url-repro

### To Reproduce

1.  Create new nextjs app with turbopack enabled for dev server (`next dev --turbo`)
2. Add `@svgr/webpack` as an dependency and loader to nextjs config like the following
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: {
    turbo: {
      rules: {
        ""*.svg"": {
          loaders: [""@svgr/webpack""],
          as: ""*.js"",
        },
      },
    },
  },
};
```
3. Install external library that utilizes css svg url imports, i.e flag-icons `npm install flag-icons` ( i will use it as an example for next steps)
4. Add html element: `<span className=""fi fi-gr""></span>`
5. Start development server `npm run dev`
6. Inspect generated css: 
![image](https://github.com/user-attachments/assets/7d93e5ac-6858-4bb7-bb5d-856c3e123f58)
7. Notice the invalid svg -> js transformation and missing flag icon in the page itself




### Current vs. Expected behavior
Current behavior: Svgr transforms all svg imports to js files breaking ones in css
Expected: I should be able to specify what files and when are transformed via i.e issuer. This is possible in webpack-land and svgr has a documented way of avoiding this bug:
https://react-svgr.com/docs/webpack/#use-svg-in-css-files

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Home
  Available memory (MB): 32713
  Available CPU cores: 12
Binaries:
  Node: 22.2.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Turbopack, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",[turbopack]: @svgr/webpackローダーで発行者を指定できず、CSS内の無効なURL変換を引き起こす,"### この問題を再現するコードへのリンク

https://github.com/MaciejWiatr/svgr-nextjs-css-url-repro

### 再現手順

1. turbopackを有効にした新しいnextjsアプリを作成する（`next dev --turbo`）
2. `@svgr/webpack`を依存関係として追加し、次のようにnextjsの設定にローダーを追加する
```js
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  experimental: {
    turbo: {
      rules: {
        ""*.svg"": {
          loaders: [""@svgr/webpack""],
          as: ""*.js"",
        },
      },
    },
  },
};
```
3. CSS SVG URLインポートを利用する外部ライブラリをインストールする。例としてflag-iconsを使用する `npm install flag-icons`
4. HTML要素を追加する：`<span className=""fi fi-gr""></span>`
5. 開発サーバーを起動する `npm run dev`
6. 生成されたCSSを検査する： 
![image](https://github.com/user-attachments/assets/7d93e5ac-6858-4bb7-bb5d-856c3e123f58)
7. 無効なSVG -> JS変換とページ自体にフラグアイコンが欠けていることに気付く

### 現在の動作と期待される動作
現在の動作：SvgrはすべてのSVGインポートをJSファイルに変換し、CSS内のものを壊す
期待される動作：どのファイルがいつ変換されるかを発行者などを通じて指定できるべきである。これはwebpackの世界では可能であり、svgrにはこのバグを回避するための文書化された方法がある：
https://react-svgr.com/docs/webpack/#use-svg-in-css-files

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Home
  利用可能メモリ (MB): 32713
  利用可能CPUコア: 12
バイナリ:
  Node: 22.2.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.15 // 最新の利用可能バージョンが検出されています (14.2.15)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験、Turbopack、Webpack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,`next/link` Link component creates a stackoverflow when navigating to a server component with a `redirect` logic,"### Link to the code that reproduces this issue

https://github.com/bwilytsch/redirect-nextjs-repro

### To Reproduce

1. Setup a new NextJS app using the app router
2. Create two nested routes e.g. `/dashboard` and `/dashboard/getting-started`
3. Add a `layout.tsx` server component to `/dashboard` with a redirect to `/dashboard/getting-started` when a condition is met.
4. In your root `page.tsx` use the `next/link` Link component to navigate to `/dashboard`

### Current vs. Expected behavior

# Current
`next/link` component creates a stackoverflow by getting stuck in an infinite react hook loop.

# Expected
To not do the above.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1-NixOS SMP PREEMPT_DYNAMIC Sun Sep 15 14:57:56 UTC 2024
  Available memory (MB): 31400
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.10.0
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed)

### Additional context

Not sure if this is a unique case, but we have to fetch some data for our redirect logic, which is why we can't do it via e.g. `middleware.ts`.

Also our example is a bit more complex than the on in the reproduction and affects child components as well, which is why it's currently in the `layout.tsx` component.

Appreciate any help on a potential fix. Thank you!",`next/link`のLinkコンポーネントがリダイレクトロジックを持つサーバーコンポーネントにナビゲートするとスタックオーバーフローを引き起こす,"### この問題を再現するコードへのリンク

https://github.com/bwilytsch/redirect-nextjs-repro

### 再現手順

1. アプリルーターを使用して新しいNextJSアプリをセットアップします。
2. `/dashboard`と`/dashboard/getting-started`のような2つのネストされたルートを作成します。
3. 条件が満たされたときに`/dashboard/getting-started`にリダイレクトする`layout.tsx`サーバーコンポーネントを`/dashboard`に追加します。
4. ルートの`page.tsx`で`next/link`のLinkコンポーネントを使用して`/dashboard`にナビゲートします。

### 現在の動作と期待される動作

# 現在
`next/link`コンポーネントは無限のReactフックループにハマり、スタックオーバーフローを引き起こします。

# 期待される動作
上記の動作をしないこと。

### 環境情報の提供

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1-NixOS SMP PREEMPT_DYNAMIC Sun Sep 15 14:57:56 UTC 2024
  利用可能なメモリ (MB): 31400
  利用可能なCPUコア: 16
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.10.0
関連パッケージ：
  next: 14.2.15 // 検出された最新のバージョンは14.2.15です。
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

これはユニークなケースかどうかわかりませんが、リダイレクトロジックのためにデータを取得する必要があるため、`middleware.ts`を介して行うことができません。

また、私たちの例は再現のものよりも少し複雑で、子コンポーネントにも影響を与えるため、現在は`layout.tsx`コンポーネントにあります。

潜在的な修正についての助けを感謝します。ありがとうございます！"
S1,P1,Server Action fails silently on timeout,"### Link to the code that reproduces this issue

https://github.com/elie222/inbox-zero/blob/main/apps/web/app/(landing)/components/TestAction.tsx

### To Reproduce

Go here and click Test Action at the bottom:
https://getinboxzero.com/components

The result is undefined.  Even though it's a timeout error.

If you check the Network tab you will see a POST with a 504 error and message: FUNCTION_INVOCATION_TIMEOUT
But the app has no way of getting this error.

### Current vs. Expected behavior

Current: timeout returns undefined
Expected: timeout should throw an error with FUNCTION_INVOCATION_TIMEOUT

### Provide environment information

```bash
All
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed)

### Additional context

_No response_",サーバーアクションがタイムアウト時に静かに失敗する,"### この問題を再現するコードへのリンク

https://github.com/elie222/inbox-zero/blob/main/apps/web/app/(landing)/components/TestAction.tsx

### 再現手順

こちらに行き、下部の「テストアクション」をクリックしてください：
https://getinboxzero.com/components

結果は未定義です。タイムアウトエラーにもかかわらず。

ネットワークタブを確認すると、504エラーとメッセージ：FUNCTION_INVOCATION_TIMEOUTのPOSTが表示されますが、アプリにはこのエラーを取得する方法がありません。

### 現在の動作と期待される動作

現在：タイムアウトは未定義を返します  
期待される：タイムアウトはFUNCTION_INVOCATION_TIMEOUTのエラーをスローするべきです

### 環境情報を提供してください

```bash
すべて
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

_回答なし_"
S1,P1,i18n configuration causes 500 error when certain malformed URLs are visited,"### Link to the code that reproduces this issue

https://github.com/Parker-Echo/nextjs-reproduction-app-bug

### To Reproduce

1. Start the server `next dev`.
2. Run `curl -k http://localhost:3000/\\\\\\%20../%20../%20../%20../%20../%20../foobar`
3. Observe it returns a 500 error and logs the following
```
Failed to handle request for /\\\%20../%20../%20../%20../%20../%20../foobar
TypeError: Invalid URL
    at new URL (node:internal/url:775:36)
    at parseRelativeUrl (my-app/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js:16:68)
    at parseUrl (my-app/node_modules/next/dist/shared/lib/router/utils/parse-url.js:15:55)
    at requestHandlerImpl (my-app/node_modules/next/dist/server/lib/router-server.js:115:54)
    at Server.requestListener (my-app/node_modules/next/dist/server/lib/start-server.js:141:19)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
  code: 'ERR_INVALID_URL',
  input: '/\\\\\\%20../%20../%20../%20../%20../%20../etc/passwd/',
  base: 'http://n/'
}
```

### Current vs. Expected behavior

Following the steps from the previous section, I expect a redirect or a 404 error.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.183 // Latest available version is detected (15.0.0-canary.183).
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js Config:
```


### Which area(s) are affected? (Select all that apply)

Not sure, Internationalization (i18n), Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

I don't repro if I access the URL via postman or the browser, possibly because of different encodings. I reproduced against 14.2 as well. Only happens with i18n configured. 
Forum post: https://nextjs-forum.com/post/1293815757494288404 ",i18n設定が特定の不正なURLにアクセスした際に500エラーを引き起こす,"### この問題を再現するコードへのリンク

https://github.com/Parker-Echo/nextjs-reproduction-app-bug

### 再現手順

1. サーバーを起動する `next dev`。
2. `curl -k http://localhost:3000/\\\\\\%20../%20../%20../%20../%20../%20../foobar` を実行する。
3. 500エラーが返され、以下のログが記録されるのを確認する。
```
/\\\%20../%20../%20../%20../%20../%20../foobar のリクエストを処理できませんでした
TypeError: 無効なURL
    at new URL (node:internal/url:775:36)
    at parseRelativeUrl (my-app/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js:16:68)
    at parseUrl (my-app/node_modules/next/dist/shared/lib/router/utils/parse-url.js:15:55)
    at requestHandlerImpl (my-app/node_modules/next/dist/server/lib/router-server.js:115:54)
    at Server.requestListener (my-app/node_modules/next/dist/server/lib/start-server.js:141:19)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {
  code: 'ERR_INVALID_URL',
  input: '/\\\\\\%20../%20../%20../%20../%20../%20../etc/passwd/',
  base: 'http://n/'
}
```

### 現在の動作と期待される動作

前のセクションの手順に従った場合、リダイレクトまたは404エラーを期待しています。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.183 // 利用可能な最新バージョンが検出されました (15.0.0-canary.183)。
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js設定:
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明、国際化 (i18n)、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

Postmanやブラウザ経由でURLにアクセスすると再現しないが、異なるエンコーディングのためかもしれません。14.2でも再現しました。i18nが設定されている場合のみ発生します。フォーラム投稿: https://nextjs-forum.com/post/1293815757494288404"
S1,P1,"Using a parallel route slot with dynamic route, in parallel to a catch-all route causes non-turbo dev server and build to fail.","### Link to the code that reproduces this issue

https://github.com/ItsWendell/nextjs-14.2.15-catch-all-parallel-routes-dynamic-segments-build-issues-repo

### To Reproduce

- Create a catch-all route
- Create a parallel route slot somewhere with a dynamic path

Reproduction:

Clone this repository

1. Run npm install
2. Run npm run dev --turbo and visit http://localhost:3000/
3. Press the ""Lets visit a blog post that contains a slot with a dynamic parallel route."" button, press ""Start slotting"" to visit a dynamic slot within that blog page / layout
4. See that it works pretty well, now let's make it fail:
5. Run npm run build, the build will fail with error: `ENOENT: no such file or directory, open '/Projects/parallel-routes-catch-all/.next/server/app/(blog)/blog/[slug]/@info/info/[infoId]/page_client-reference-manifest.js'`
6. Run npm run dev (without turbo) see that it fails as soon as you click the ""Start slotting"" button with a similar error: `ENOENT: no such file or directory, open '/Projects/parallel-routes-catch-all/.next/server/app/(blog)/blog/[slug]/@info/info/[infoId]/page_client-reference-manifest.js'`


### Current vs. Expected behavior

I expect `next build` to compile a valid version, since it works sucessfully in next dev --turbo as I expected. So that I can use the parallel routes together with catch-all routes, as next dev --turbo shows, it should have higher priority than the catch-all route.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Wed Oct  9 05:26:29 UTC 2024
  Available memory (MB): 31561
  Available CPU cores: 8
Binaries:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Module Resolution, Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

I tested against latest canary `[15.0.0-canary.182](https://www.npmjs.com/package/next/v/15.0.0-canary.182)` too, and the latest stable `14.2.15`.

### Workaround

I found a work around: Instead of using an required catch-all route I've replaced the catch-all route with a non-optional catch all route `[[...slug]]` vs `[...slug]`, this seems to continue the build. Not optimal because in some cases you want to have e.g. a seperate page.tsx and a catch-all for all other pages, but we can work around that. This issue is still relevant,  since this behavior should be the same with an optional catch all route.","タイトル:
動的ルートと並行してキャッチオールルートを使用する並行ルートスロットが、ノンターボ開発サーバーおよびビルドの失敗を引き起こす","本文:
### この問題を再現するコードへのリンク

https://github.com/ItsWendell/nextjs-14.2.15-catch-all-parallel-routes-dynamic-segments-build-issues-repo

### 再現手順

- キャッチオールルートを作成する
- 動的パスを持つ並行ルートスロットをどこかに作成する

再現手順:

このリポジトリをクローンする

1. npm install を実行
2. npm run dev --turbo を実行し、http://localhost:3000/ にアクセス
3. 「動的並行ルートを含むスロットのあるブログ投稿を訪問しましょう。」ボタンを押し、「スロットを開始」を押して、そのブログページ/レイアウト内の動的スロットにアクセス
4. うまく動作することを確認したら、失敗させてみましょう:
5. npm run build を実行すると、ビルドは次のエラーで失敗します: `ENOENT: no such file or directory, open '/Projects/parallel-routes-catch-all/.next/server/app/(blog)/blog/[slug]/@info/info/[infoId]/page_client-reference-manifest.js'`
6. npm run dev (ターボなし) を実行すると、「スロットを開始」ボタンをクリックするとすぐに、同様のエラーで失敗します: `ENOENT: no such file or directory, open '/Projects/parallel-routes-catch-all/.next/server/app/(blog)/blog/[slug]/@info/info/[infoId]/page_client-reference-manifest.js'`

### 現在の動作と期待される動作

`next build` が有効なバージョンをコンパイルすることを期待しています。なぜなら、次の dev --turbo では正常に動作するからです。したがって、キャッチオールルートと並行ルートを一緒に使用できるはずです。次の dev --turbo が示すように、キャッチオールルートよりも高い優先度を持つべきです。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Wed Oct  9 05:26:29 UTC 2024
  利用可能なメモリ (MB): 31561
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.15 // 検出された最新の利用可能バージョン (14.2.15)。
  eslint-config-next: 14.2.15
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？ (すべて選択)

モジュール解決、並行およびインターセプトルート

### 影響を受けるステージはどれですか？ (すべて選択)

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

最新のカナリア `[15.0.0-canary.182](https://www.npmjs.com/package/next/v/15.0.0-canary.182)` と、最新の安定版 `14.2.15` に対してもテストしました。

### 回避策

回避策を見つけました: 必須のキャッチオールルートの代わりに、オプションでないキャッチオールルート `[[...slug]]` を使用しました。これによりビルドが続行されるようです。最適ではありませんが、場合によっては別の page.tsx と他のすべてのページのためのキャッチオールを持ちたいことがありますが、それを回避することができます。この問題は依然として関連性があり、オプションのキャッチオールルートでも同様の動作が期待されるべきです。"
S1,P1,URLSearchParams does not survive serialization/deserialization when passed from a client to a Server Action,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/exciting-meitner-zrdlrs

### To Reproduce

1. Write a Server Action that takes URLSearchParams
2. Try to call it from a client component

### Current vs. Expected behavior

When calling `URLSearchParams#toString()` in a Server Action, it yields a malformed output (`foo,bar,next,js`), instead of actual query/search params (`foo=bar&next=js`).

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0-canary.182 // Latest available version is detected (15.0.0-canary.182).
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

_No response_","タイトル:
URLSearchParamsは、クライアントからサーバーアクションに渡される際にシリアル化/デシリアル化に耐えません","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/exciting-meitner-zrdlrs

### 再現手順

1. URLSearchParamsを受け取るサーバーアクションを書く
2. クライアントコンポーネントからそれを呼び出そうとする

### 現在の動作と期待される動作

サーバーアクション内で`URLSearchParams#toString()`を呼び出すと、実際のクエリ/検索パラメータ（`foo=bar&next=js`）ではなく、誤った出力（`foo,bar,next,js`）が得られます。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能メモリ (MB): 4102
  利用可能CPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.0-canary.182 // 検出された最新のバージョンは (15.0.0-canary.182) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,Image Component flicker when refresh the page,"### Link to the code that reproduces this issue

https://github.com/jizhi0v0/background-image-flash.git

### To Reproduce

1.Start the application in development (next dev)
2.refresh the page
3.image flash

### Current vs. Expected behavior


https://github.com/user-attachments/assets/a6098447-ed5a-4530-ad2b-1dd4aa7e7581



### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.1.0: Mon Sep 30 00:10:38 PDT 2024; root:xnu-11215.40.63~39/RELEASE_ARM64_T6031
  Available memory (MB): 36864
  Available CPU cores: 14
Binaries:
  Node: 22.3.0
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: 9.6.0
Relevant Packages:
  next: 14.2.15 // Latest available version is detected (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Image (next/image)

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Also exist in latest canary version.","タイトル:
ページをリフレッシュすると画像コンポーネントがちらつく","本文:
### この問題を再現するコードへのリンク

https://github.com/jizhi0v0/background-image-flash.git

### 再現手順

1. 開発環境でアプリケーションを起動する (next dev)
2. ページをリフレッシュする
3. 画像がちらつく

### 現在の動作と期待される動作

https://github.com/user-attachments/assets/a6098447-ed5a-4530-ad2b-1dd4aa7e7581

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.1.0: Mon Sep 30 00:10:38 PDT 2024; root:xnu-11215.40.63~39/RELEASE_ARM64_T6031
  利用可能メモリ (MB): 36864
  利用可能CPUコア: 14
バイナリ:
  Node: 22.3.0
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: 9.6.0
関連パッケージ:
  next: 14.2.15 // 利用可能な最新バージョンが検出されました (14.2.15).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

画像 (next/image)

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

最新のカナリアバージョンにも存在します。"
S1,P1,Could there be a caching issue causing the page to load based on the previous redirection logic when accessing the page?,"### Link to the code that reproduces this issue

https://github.com/minsu0012/test

### To Reproduce

1. Install npx create-next-app@latest. 
2. Install using the app router method.
3. Keep app/layout and delete app/page.
4. Create an app/start folder and virtually create layout.tsx and page.tsx.
5. In next.config.mjs, add redirects with source as `/` and destination as `/start`.
6. When running locally, when you normally enter `/`, you will be moved to `/start`.
7. After changing app/start to app/home, change next.config.mjs destination to /home.
8. When running local, when you enter `/`, you should move to `/home`, but you enter `/start`.

When accessing in a new browser window without local work, it correctly redirects to /home. However, if previously accessed /start, it redirects to /start instead of /home.


### Current vs. Expected behavior


I added code to redirect to `/start` when entering `/`.
When running locally, it normally enters /start.

next.config.mjs 

```
 async redirects() {
    return [
      {
        source: '/',
        destination: '/start',
        permanent: true,
      },
    ];
  },
```

The existing app/start was renamed to app/home, and the redirection part was also modified to point to /home.

```
 async redirects() {
    return [
      {
        source: '/',
        destination: '/home',
        permanent: true,
      },
    ];
  },
```
However, if you run it locally and enter `/`, you will be redirected to the `/start` page.

### Provide environment information

```bash
I installed it in app router tailiwndcss format with `npx create-next-app@latest`.

Packages 


  ""dependencies"": {
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""next"": ""14.2.15""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.15""
  }
```

Could this be a routing cache issue? 
How to solve this problem?
",キャッシュの問題が原因で、ページが以前のリダイレクションロジックに基づいて読み込まれることはありますか？,"### コードのリンク

https://github.com/minsu0012/test

### 再現手順

1. `npx create-next-app@latest`をインストールします。
2. アプリルーター方式でインストールします。
3. `app/layout`を保持し、`app/page`を削除します。
4. `app/start`フォルダーを作成し、仮想的に`layout.tsx`と`page.tsx`を作成します。
5. `next.config.mjs`に、ソースを`/`、宛先を`/start`としてリダイレクトを追加します。
6. ローカルで実行すると、通常`/`に入ると`/start`に移動します。
7. `app/start`を`app/home`に変更した後、`next.config.mjs`の宛先を`/home`に変更します。
8. ローカルで実行すると、`/`に入ると`/home`に移動するはずですが、`/start`に入ります。

新しいブラウザウィンドウでアクセスすると、正しく`/home`にリダイレクトされます。しかし、以前に`/start`にアクセスした場合、`/home`ではなく`/start`にリダイレクトされます。

### 現在の動作と期待される動作

`/`に入ると`/start`にリダイレクトするコードを追加しました。
ローカルで実行すると、通常`/start`に入ります。

`next.config.mjs`

```
 async redirects() {
    return [
      {
        source: '/',
        destination: '/start',
        permanent: true,
      },
    ];
  },
```

既存の`app/start`は`app/home`に名前を変更し、リダイレクト部分も`/home`を指すように修正しました。

```
 async redirects() {
    return [
      {
        source: '/',
        destination: '/home',
        permanent: true,
      },
    ];
  },
```
しかし、ローカルで実行して`/`に入ると、`/start`ページにリダイレクトされます。

### 環境情報を提供

```bash
`npx create-next-app@latest`でapp router tailwindcss形式でインストールしました。

パッケージ

  ""dependencies"": {
    ""react"": ""^18"",
    ""react-dom"": ""^18"",
    ""next"": ""14.2.15""
  },
  ""devDependencies"": {
    ""typescript"": ""^5"",
    ""@types/node"": ""^20"",
    ""@types/react"": ""^18"",
    ""@types/react-dom"": ""^18"",
    ""postcss"": ""^8"",
    ""tailwindcss"": ""^3.4.1"",
    ""eslint"": ""^8"",
    ""eslint-config-next"": ""14.2.15""
  }
```

これはルーティングキャッシュの問題でしょうか？
この問題を解決する方法はありますか？"
S1,P1,Stale link navigations are updating the UI in local dev,"### Link to the code that reproduces this issue

https://github.com/samselikoff/stale-link-updates-in-dev

### To Reproduce

1. Start the application in development (`npm run dev`)
2. Quickly click Link 1, Link 2, then Link 3
3. You'll see the UI update with all three navigations – it will show ""Post 1"", ""Post 2"" and ""Post3""

### Current vs. Expected behavior

Current:

The UI updates with all link navigations, including stale ones.

Expected:

The UI should discard stale link navigations, and only render the latest one once it settles.

Note: This behavior only happens on dev. When I deploy to Vercel, the UI only shows the final navigation.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: N/A
  pnpm: 9.7.1
Relevant Packages:
  next: 15.0.0-canary.179 // Latest available version is detected (15.0.0-canary.179).
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

The `/post/[id]/page.tsx` is an RSC that awaits a 1-second Promise. The stale updates only happen in dev.

Here's a video:

https://github.com/user-attachments/assets/cd5a2852-de0d-452c-a21e-2973f7337863

Here are some links to quickly see the two different behaviors:

- ❌ StackBlitz dev build: https://stackblitz.com/github/samselikoff/stale-link-updates-in-dev?file=app%2Flayout.tsx

- ✅ Vercel prod build: https://stale-link-updates-in-dev.vercel.app","タイトル:
ローカル開発における古いリンクナビゲーションがUIを更新しています","本文:
### この問題を再現するためのコードへのリンク

https://github.com/samselikoff/stale-link-updates-in-dev

### 再現手順

1. 開発環境でアプリケーションを起動する（`npm run dev`）
2. 迅速にリンク1、リンク2、リンク3をクリックする
3. UIがすべての3つのナビゲーションで更新され、「ポスト1」、「ポスト2」、「ポスト3」が表示される

### 現在の動作と期待される動作

現在:

UIはすべてのリンクナビゲーション（古いものを含む）で更新されます。

期待される動作:

UIは古いリンクナビゲーションを破棄し、安定した後に最新のものだけをレンダリングするべきです。

注: この動作は開発環境でのみ発生します。Vercelにデプロイすると、UIは最終的なナビゲーションのみを表示します。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: N/A
  pnpm: 9.7.1
関連パッケージ:
  next: 15.0.0-canary.179 // 検出された最新の利用可能なバージョン (15.0.0-canary.179)。
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

`/post/[id]/page.tsx`は1秒のPromiseを待つRSCです。古い更新は開発環境でのみ発生します。

こちらが動画です:

https://github.com/user-attachments/assets/cd5a2852-de0d-452c-a21e-2973f7337863

異なる2つの動作をすぐに確認するためのリンクは以下です:

- ❌ StackBlitz開発ビルド: https://stackblitz.com/github/samselikoff/stale-link-updates-in-dev?file=app%2Flayout.tsx

- ✅ Vercel本番ビルド: https://stale-link-updates-in-dev.vercel.app"
S1,P1,Consecutive slashes in URL trigger routing error and no page renders in browser when Next.js runs behind gateway,"### Link to the code that reproduces this issue

https://github.com/cosieLq/exampleApp_nextjs/tree/reproduction-double-slash-routing-error

### To Reproduce

1. Start the application (npm run dev or npm run start)
2. Start the gateway (node proxy.js)
3. Go to localhost:8000///about
4. Observe browser console and see 'Error: invariant: invalid relative URL, router received...'

### Current vs. Expected behavior

I expected no error in browser console and the page to render correctly.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Wed Jul 31 20:48:52 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 1.22.19
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.179 // Latest available version is detected (15.0.0-canary.179).
  eslint-config-next: N/A
  react: 19.0.0-beta-04b058868c-20240508
  react-dom: 19.0.0-beta-04b058868c-20240508
  typescript: 5.1.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Internationalization (i18n), Navigation, Pages Router

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Other (Deployed)

### Additional context

When i18n is disabled in next.config.js, no error will appear and the page renders correctly.","タイトル:
URLの連続スラッシュがルーティングエラーを引き起こし、Next.jsがゲートウェイの背後で実行されるとブラウザにページが表示されない","本文:
### この問題を再現するコードへのリンク

https://github.com/cosieLq/exampleApp_nextjs/tree/reproduction-double-slash-routing-error

### 再現手順

1. アプリケーションを起動する (npm run dev または npm run start)
2. ゲートウェイを起動する (node proxy.js)
3. localhost:8000///about にアクセスする
4. ブラウザのコンソールを観察し、「Error: invariant: invalid relative URL, router received...」というエラーを確認する

### 現在の動作と期待される動作

ブラウザのコンソールにエラーが表示されず、ページが正しくレンダリングされることを期待していました。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Wed Jul 31 20:48:52 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 1.22.19
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.179 // 検出された最新の利用可能バージョンは (15.0.0-canary.179) です。
  eslint-config-next: N/A
  react: 19.0.0-beta-04b058868c-20240508
  react-dom: 19.0.0-beta-04b058868c-20240508
  typescript: 5.1.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

国際化 (i18n)、ナビゲーション、ページルーター

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)、その他 (デプロイ済み)

### 追加のコンテキスト

next.config.jsでi18nが無効になっている場合、エラーは表示されず、ページは正しくレンダリングされます。"
S1,P1,SWC minify bug,"### Link to the code that reproduces this issue

https://github.com/luixo/receipt-app/commits/swc-minify-bug

### To Reproduce

Unfortunately, this bug is quite hard to reproduce with a minimal version due to a bunch of mechanisms involved in building process.
You can reproduce the bug in my project repo or via injecting code in SWC minification.

With my project:
1. Checkout project on a given branch
1. `corepack enable && yarn install`
1. Copy `.env.example` as `.env.local`
1. `NODE_ENV=test npx dotenv -c -- yarn web:build`
1. `NODE_ENV=test npx dotenv -c -- yarn web:start`

With a SWC minification:
1. Create a next project (v14, it seems to be fixed in v15)
1. Get to SWC minify function (`node_modules/next/dist/build/swc/index.js`)
1. Add `const failingSrc = '...'` from additional context to the file
1. Add `minify(failingSrc, { compress: true, mangle: true, output: { comments: false } }).then(({code}) => console.log(code))` somewhere in the end of the file
1. Run `rm -rf .next && npm run build`

### Current vs. Expected behavior

Expected: Compiled version doesn't have an undefined variable
Current: Compiled version does have an undefined variable

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:25 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6030
  Available memory (MB): 36864
  Available CPU cores: 12
Binaries:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 3.6.2
  pnpm: N/A
Relevant Packages:
  next: 14.2.14 // Latest available version is detected (14.2.14).
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

SWC

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

The failing src code:
```js
const foo = function(fn) {
    const options = {
        param: {
            value: """",
        },
    };
    const store = (obj) => obj[options.param.value];
    fn(() => store);
}
```
It's compiled to:
```js
let foo=function(e){let l=e=>e[options_param.value];e(()=>l)};
```
Or beautified:
```js
let foo = function(e) {
    let l = e => e[options_param.value];
    e(() => l)
};
```
You can witness that `options_param` is an undefined value that is lost from the context.

The real example is way bigger, so this is the smallest I could make still fail.",SWCミニファイバグ,"### この問題を再現するコードへのリンク

https://github.com/luixo/receipt-app/commits/swc-minify-bug

### 再現手順

残念ながら、このバグはビルドプロセスに関与する多くのメカニズムのため、最小限のバージョンで再現するのが非常に難しいです。
私のプロジェクトリポジトリまたはSWCミニファイケーションにコードを注入することでバグを再現できます。

私のプロジェクトでの手順：
1. 指定されたブランチでプロジェクトをチェックアウト
1. `corepack enable && yarn install`
1. `.env.example`を`.env.local`としてコピー
1. `NODE_ENV=test npx dotenv -c -- yarn web:build`
1. `NODE_ENV=test npx dotenv -c -- yarn web:start`

SWCミニファイケーションでの手順：
1. 次のプロジェクトを作成（v14、v15では修正されているようです）
1. SWCミニファイ関数に移動（`node_modules/next/dist/build/swc/index.js`）
1. 追加のコンテキストから`const failingSrc = '...'`をファイルに追加
1. ファイルの最後の方に`minify(failingSrc, { compress: true, mangle: true, output: { comments: false } }).then(({code}) => console.log(code))`を追加
1. `rm -rf .next && npm run build`を実行

### 現在の動作と期待される動作

期待される動作：コンパイルされたバージョンには未定義の変数がない
現在の動作：コンパイルされたバージョンには未定義の変数がある

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:25 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 36864
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.15.1
  npm: 10.7.0
  Yarn: 3.6.2
  pnpm: N/A
関連パッケージ:
  next: 14.2.14 // 利用可能な最新バージョンが検出されました (14.2.14)。
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.4
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

SWC

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build（ローカル）

### 追加のコンテキスト

失敗するソースコード：
```js
const foo = function(fn) {
    const options = {
        param: {
            value: """",
        },
    };
    const store = (obj) => obj[options.param.value];
    fn(() => store);
}
```
コンパイルされると：
```js
let foo=function(e){let l=e=>e[options_param.value];e(()=>l)};
```
または美化された形：
```js
let foo = function(e) {
    let l = e => e[options_param.value];
    e(() => l)
};
```
`options_param`がコンテキストから失われた未定義の値であることが確認できます。

実際の例ははるかに大きいので、これがまだ失敗する最小限のものです。"
S1,P1,tsconfig > compilerOptions.paths > `${configDir}` template variable fails the app load and build,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/next-tsconfig-configdir-l7jgmy?file=%2Ftsconfig.json%3A23%2C15

### To Reproduce

1. Fork the sandbox
1. Run `pnpm install`
1. Run `pnpm dev`
1. The app fails to load due to import path alias issue

### Current vs. Expected behavior

## Current

TypeScript has added the [${configDir} Template Variable for Configuration Files](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#the-configdir-template-variable-for-configuration-files) in TypeScript 5.5.
This template variable is essential for creating extendable configs, e.g.:
https://github.com/alexilyaev/configs/blob/main/tsconfig/next.json

But it doesn't work in Next.js when used in `tsconfig.json` > `compilerOptions.paths` values.

We can verify that the config works because navigating imports that use the path aliases works as expected.
Also running `pnpm tsc --noEmit` doesn't fail (`pnpm` prefix to run the project TypeScript version and not the global one).

## Expected

Using `${configDir}` Template Variable in `tsconfig.json` should not fail the Next.js app load and build.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0-canary.179 // Latest available version is detected (15.0.0-canary.179).
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience, Module Resolution, TypeScript

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

I've encountered this issue when I tried to move my `tsconfig.json` settings to an external repo and use it in my repo via `extends` in `tsconfig.json`.
On the TypeScript side, everything worked. But Next.js failed to build.","タイトル:
tsconfig > compilerOptions.paths > `${configDir}` テンプレート変数がアプリの読み込みとビルドに失敗する","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/next-tsconfig-configdir-l7jgmy?file=%2Ftsconfig.json%3A23%2C15

### 再現手順

1. サンドボックスをフォークする
1. `pnpm install` を実行する
1. `pnpm dev` を実行する
1. インポートパスエイリアスの問題によりアプリが読み込まれない

### 現在の動作と期待される動作

## 現在の動作

TypeScriptは、TypeScript 5.5で[設定ファイルのための${configDir}テンプレート変数](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#the-configdir-template-variable-for-configuration-files)を追加しました。
このテンプレート変数は、拡張可能な設定を作成するために不可欠です。例えば：
https://github.com/alexilyaev/configs/blob/main/tsconfig/next.json

しかし、`tsconfig.json` > `compilerOptions.paths`の値で使用すると、Next.jsでは機能しません。

パスエイリアスを使用するインポートのナビゲーションが期待通りに機能するため、設定が機能していることを確認できます。
また、`pnpm tsc --noEmit`を実行しても失敗しません（`pnpm`プレフィックスはプロジェクトのTypeScriptバージョンを実行し、グローバルなものではありません）。

## 期待される動作

`tsconfig.json`で`${configDir}`テンプレート変数を使用しても、Next.jsアプリの読み込みとビルドが失敗しないこと。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能なCPUコア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.0-canary.179 // 検出された最新の利用可能バージョンは (15.0.0-canary.179) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.6.2
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

開発者体験、モジュール解決、TypeScript

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

`tsconfig.json`の設定を外部リポジトリに移動し、`tsconfig.json`の`extends`を介して自分のリポジトリで使用しようとしたときにこの問題に遭遇しました。
TypeScript側ではすべてが機能しましたが、Next.jsはビルドに失敗しました。"
S1,P1,"Static Pages with dynamicParams Not Streaming & PPR Prefetch Not Caching Static Pages Properly ","### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/static-page-render-zl2634

### To Reproduce


1) Create a `[slug]/page.jsx`  route.  (In repo already done it)
2) Make a link for it.   (In repo already done it)
3) `npm run build` -> `npm run start`


`[slug]/page.jsx` 
```jsx
import  { Suspense } from 'react';

export const dynamic = 'force-static';
export const dynamicParams = true;
export const revalidate = 20;

export default async function SuspenseTest(props) {
    const slug = (await props.params).slug;
  return (
    <div>
      <h1>This is a static content</h1>
      <Suspense fallback=""Loading..."">
        <LongRunning slug={slug}/>
      </Suspense>
    </div>
  );
}

async function LongRunning(props) {
  await new Promise((resolve) => setTimeout(resolve, 5000));
  return <span>Success! ({props.slug})</span>
}
```

in other a route e.g `app/page.jsx`
```jsx
import Link from ""next/link"";
import styles from ""./page.module.css"";

export default function Home() {
  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <Link href=""/suspenseTest"" prefetch={false}>
          SuspenseTest
        </Link>
      </main>
    </div>
  );
}

```

### Current vs. Expected behavior

If `experimental.ppr` is set to `false`:

**Expected:** When clicking the link, the static part of the page should load instantly, and the Suspensed part should load via streaming. Than cache it with  the  standard mode (ISR, SWR)

**Actual:** When clicking the link, the page doesn't load until the entire SSG rendering is complete, causing a 5-second delay before anything happens.

If `experimental.ppr` is set to `true`:

**Expected:** When clicking the link, the static part of the page should load instantly, followed by the Suspensed part via streaming. The rendered result should then be cached so that reloading or navigating to the page again loads it instantly without any loading indicator, whenever i open this page (via reload, paste the url, or client side navigation). After the revalidation is needed the standard ISR flow happens (Stale-While-Revalidate).

**Actual:** When clicking the link, the page loads with streaming, but the rendered result is only cached on the client side. On reload, the page is re-rendered via SSG (resulting in a 5-second delay), and it only loads once rendering is complete.  After the SSG finished, reloading the page should load it instantly. However, navigating to the page again without a client cache should load it with streaming once more  and not reusing the ISR cache.

### Provide environment information

```bash
Operating System:
  Platform: PopOs Linux
Binaries:
  Node: 20.17.0
  npm: 10.8.2
Relevant Packages:
  next: 15.0.0-canary.179   
  react: ^18
  react-dom: ^18
```


### Which area(s) are affected? (Select all that apply)

Navigation, Partial Prerendering (PPR)

### Which stage(s) are affected? (Select all that apply)

next start (local)

### Additional context

This also occurs when `Link` has `prefetch={true}`, resulting in only client-side caching.

With the environment variable `NEXT_PRIVATE_DEBUG_CACHE=1` enabled

The cache is only utilized when visiting the page directly. During client-side navigation, the following log is not generated:

```
using filesystem cache handler
get /suspenseTest undefined APP_PAGE false
set /suspenseTest
```",静的ページのdynamicParamsがストリーミングされず、PPRプリフェッチが静的ページを適切にキャッシュしていない,"### コードのリンク

https://codesandbox.io/p/devbox/static-page-render-zl2634

### 再現手順

1) `[slug]/page.jsx` ルートを作成します。（リポジトリですでに完了しています）
2) それ用のリンクを作成します。（リポジトリですでに完了しています）
3) `npm run build` -> `npm run start`

`[slug]/page.jsx` 
```jsx
import  { Suspense } from 'react';

export const dynamic = 'force-static';
export const dynamicParams = true;
export const revalidate = 20;

export default async function SuspenseTest(props) {
    const slug = (await props.params).slug;
  return (
    <div>
      <h1>これは静的コンテンツです</h1>
      <Suspense fallback=""読み込み中..."">
        <LongRunning slug={slug}/>
      </Suspense>
    </div>
  );
}

async function LongRunning(props) {
  await new Promise((resolve) => setTimeout(resolve, 5000));
  return <span>成功！ ({props.slug})</span>
}
```

別のルート、例えば `app/page.jsx`
```jsx
import Link from ""next/link"";
import styles from ""./page.module.css"";

export default function Home() {
  return (
    <div className={styles.page}>
      <main className={styles.main}>
        <Link href=""/suspenseTest"" prefetch={false}>
          SuspenseTest
        </Link>
      </main>
    </div>
  );
}
```

### 現在の動作と期待される動作

`experimental.ppr` が `false` に設定されている場合：

**期待される動作：** リンクをクリックすると、ページの静的部分が即座に読み込まれ、サスペンドされた部分がストリーミングで読み込まれるべきです。その後、標準モード（ISR、SWR）でキャッシュされるべきです。

**実際の動作：** リンクをクリックすると、ページはSSGレンダリングが完了するまで読み込まれず、何も起こらないのに5秒の遅延が発生します。

`experimental.ppr` が `true` に設定されている場合：

**期待される動作：** リンクをクリックすると、ページの静的部分が即座に読み込まれ、その後サスペンドされた部分がストリーミングで読み込まれるべきです。レンダリングされた結果はキャッシュされ、ページを再読み込みまたはナビゲートする際に、読み込みインジケーターなしで即座に読み込まれるべきです（リロード、URLの貼り付け、またはクライアントサイドのナビゲーションを介して）。再検証が必要な場合は、標準のISRフローが発生します（Stale-While-Revalidate）。

**実際の動作：** リンクをクリックすると、ページはストリーミングで読み込まれますが、レンダリングされた結果はクライアント側にのみキャッシュされます。リロードすると、ページはSSGを介して再レンダリングされ（5秒の遅延が発生）、レンダリングが完了するまで読み込まれません。SSGが完了した後、ページをリロードすると即座に読み込まれるべきですが、クライアントキャッシュなしで再度ページにナビゲートすると、再びストリーミングで読み込まれ、ISRキャッシュを再利用しません。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: PopOs Linux
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
関連パッケージ：
  next: 15.0.0-canary.179   
  react: ^18
  react-dom: ^18
```

### 影響を受ける領域（該当するものをすべて選択）

ナビゲーション、部分的プリレンダリング（PPR）

### 影響を受けるステージ（該当するものをすべて選択）

next start（ローカル）

### 追加のコンテキスト

`Link` に `prefetch={true}` が設定されている場合も同様の問題が発生し、クライアント側のキャッシュのみが行われます。

環境変数 `NEXT_PRIVATE_DEBUG_CACHE=1` が有効になっている場合

キャッシュはページに直接訪問したときのみ利用されます。クライアントサイドナビゲーション中には、次のログは生成されません：

```
ファイルシステムキャッシュハンドラを使用中
get /suspenseTest undefined APP_PAGE false
set /suspenseTest
```"
S1,P1,History pushState doesn't trigger Interceptor Route,"### Link to the code that reproduces this issue

https://github.com/iamJoeTaylor/next-intercept-route

### To Reproduce

1. Using my repro you can `npm run dev` in my-app
2. Click on `Open Modal with history` which uses `window.history.pushState`

To build a reproduction yourself;
1. New NextJS project with App router.
2. Add an Interceptor Route
3. use `window.history.pushState`

This blog mentions pushSate so I'd expect it to work. https://nextjs.org/blog/next-14-1#windowhistorypushstate-and-windowhistoryreplacestate

### Current vs. Expected behavior

Currently the URL changes but the interceptor route is not invoked.

Expect the URL to change, the intercept route to work, and the history item to be present when fetched from `window.history.state`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:36 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: 8.15.4
Relevant Packages:
  next: 14.2.14 // Latest available version is detected (14.2.14).
  eslint-config-next: 14.2.14
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed)

### Additional context

_No response_","タイトル:
history.pushStateがインターセプター・ルートをトリガーしない","本文:
### この問題を再現するコードへのリンク

https://github.com/iamJoeTaylor/next-intercept-route

### 再現手順

1. 私のリポジトリを使用して、`npm run dev`を実行します。
2. `window.history.pushState`を使用する`Open Modal with history`をクリックします。

自分で再現を構築するには;
1. Appルーターを使用した新しいNextJSプロジェクトを作成します。
2. インターセプター・ルートを追加します。
3. `window.history.pushState`を使用します。

このブログではpushStateについて言及されているので、機能することを期待しています。 https://nextjs.org/blog/next-14-1#windowhistorypushstate-and-windowhistoryreplacestate

### 現在の動作と期待される動作

現在、URLは変更されますが、インターセプター・ルートは呼び出されません。

URLが変更され、インターセプト・ルートが機能し、`window.history.state`から取得したときに履歴アイテムが存在することを期待します。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 24.0.0: Tue Sep 24 23:37:36 PDT 2024; root:xnu-11215.1.12~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.19
  pnpm: 8.15.4
関連パッケージ:
  next: 14.2.14 // 検出された最新の利用可能なバージョンは14.2.14です。
  eslint-config-next: 14.2.14
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並行およびインターセプト・ルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

_応答なし_"
S1,P1,Always get ts error when exporting frontmatter from mdx file,"### Link to the code that reproduces this issue

https://github.com/hallee9000/mdx-types-issue

### To Reproduce

1. Add `remark-frontmatter` and `remark-mdx-frontmatter` plugin in `next.config.mjs`
```mjs
import createMDX from '@next/mdx'
import remarkFrontmatter from 'remark-frontmatter'
import remarkMdxFrontmatter from 'remark-mdx-frontmatter'
import rehypeMdxImportMedia from 'rehype-mdx-import-media'
import remarkHeadingID from 'remark-heading-id';
import { remarkMdxToc } from ""remark-mdx-toc"";

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
};

const withMDX = createMDX({
  options: {
    rehypePlugins: [
      rehypeMdxImportMedia,
    ],
    remarkPlugins: [
      remarkFrontmatter,
      remarkMdxFrontmatter,
      remarkHeadingID,
      remarkMdxToc
    ],
  },
})

export default withMDX(nextConfig);
```

2. Add `mdx.d.ts` file in `src` to custom types for mdx files 
```ts
declare module ""*.mdx"" {
  import { Element, MDXProps } from ""mdx/types"";
  import type { TocEntry } from 'remark-mdx-toc';

  export default function MDXContent(props: MDXProps): Element;

  // 导出 frontmatter 和 toc
  export const frontmatter: {
    title: string;
  };

  export const toc: TocEntry[];

}
```

3.  Import `mdx` file in `page.tsx`

`src/content/post.mdx` file:
```mdx
---
title: 'Hello world'
---

This is the content of the post.
```

`src/app/page.tsx` file:
```tsx
import React from ""react""
import Content, { frontmatter } from ""@/content/post.mdx"";
console.log(frontmatter)
export default async function PostPage() {

  return (
    <div className=""py-6"">
      <h1 className=""mb-10 text-4xl font-bold"">{frontmatter.title}</h1>
      <div className=""flex gap-6"">
        <div className=""prose flex-1"">
          <Content />
        </div>
      </div>
    </div>
  );
}
```

I can get the right value (`{title: ""hello world""}`) in the console but there is always a ts error tell me:

```
Module '""@/content/post.mdx""' has no exported member 'frontmatter'. Did you mean to use 'import frontmatter from ""@/content/post.mdx""' instead?ts(2614)
```

The error disappeared after running `Restart typescript server` but appeared again when I change something of this file.

### Current vs. Expected behavior

No typescript error `ts(2614)`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 22.6.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 9.11.0
Relevant Packages:
  next: 14.2.13 // There is a newer version (14.2.14) available, upgrade recommended!
  eslint-config-next: 14.2.13
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
 ⚠ There is a newer version (14.2.14) available, upgrade recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Markdown (MDX)

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I tried several methods but none worked.
1. Restart nextjs app
2. Clear `node_modules` and `.next` folder and reinstall
3. Add `mdx.d.ts`'s path to `include` of `tsconfig.json`",常にmdxファイルからfrontmatterをエクスポートする際にtsエラーが発生する,"### コードのリンク

https://github.com/hallee9000/mdx-types-issue

### 再現手順

1. `next.config.mjs`に`remark-frontmatter`と`remark-mdx-frontmatter`プラグインを追加します。
```mjs
import createMDX from '@next/mdx'
import remarkFrontmatter from 'remark-frontmatter'
import remarkMdxFrontmatter from 'remark-mdx-frontmatter'
import rehypeMdxImportMedia from 'rehype-mdx-import-media'
import remarkHeadingID from 'remark-heading-id';
import { remarkMdxToc } from ""remark-mdx-toc"";

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
};

const withMDX = createMDX({
  options: {
    rehypePlugins: [
      rehypeMdxImportMedia,
    ],
    remarkPlugins: [
      remarkFrontmatter,
      remarkMdxFrontmatter,
      remarkHeadingID,
      remarkMdxToc
    ],
  },
})

export default withMDX(nextConfig);
```

2. `src`に`mdx.d.ts`ファイルを追加してmdxファイルのカスタムタイプを定義します。
```ts
declare module ""*.mdx"" {
  import { Element, MDXProps } from ""mdx/types"";
  import type { TocEntry } from 'remark-mdx-toc';

  export default function MDXContent(props: MDXProps): Element;

  // frontmatterとtocをエクスポート
  export const frontmatter: {
    title: string;
  };

  export const toc: TocEntry[];

}
```

3. `page.tsx`で`mdx`ファイルをインポートします。

`src/content/post.mdx`ファイル:
```mdx
---
title: 'Hello world'
---

This is the content of the post.
```

`src/app/page.tsx`ファイル:
```tsx
import React from ""react""
import Content, { frontmatter } from ""@/content/post.mdx"";
console.log(frontmatter)
export default async function PostPage() {

  return (
    <div className=""py-6"">
      <h1 className=""mb-10 text-4xl font-bold"">{frontmatter.title}</h1>
      <div className=""flex gap-6"">
        <div className=""prose flex-1"">
          <Content />
        </div>
      </div>
    </div>
  );
}
```

コンソールでは正しい値（`{title: ""hello world""}`）を取得できますが、常に次のtsエラーが表示されます：

```
Module '""@/content/post.mdx""' has no exported member 'frontmatter'. Did you mean to use 'import frontmatter from ""@/content/post.mdx""' instead?ts(2614)
```

エラーは`TypeScriptサーバーを再起動`した後は消えますが、このファイルの何かを変更すると再び現れます。

### 現在の動作と期待される動作

TypeScriptエラー`ts(2614)`が発生しないこと。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 22.6.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 9.11.0
関連パッケージ:
  next: 14.2.13 // 新しいバージョン (14.2.14) が利用可能です。アップグレードを推奨します！
  eslint-config-next: 14.2.13
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  出力: N/A
 ⚠ 新しいバージョン (14.2.14) が利用可能です。アップグレードを推奨します！
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細は https://nextjs.org/docs/messages/opening-an-issue をご覧ください。
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

Markdown (MDX)

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

いくつかの方法を試しましたが、どれもうまくいきませんでした。
1. nextjsアプリを再起動
2. `node_modules`と`.next`フォルダーをクリアして再インストール
3. `tsconfig.json`の`include`に`mdx.d.ts`のパスを追加"
S1,P1,private fields broken in specific case,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/cool-yalow-zzkp58

### To Reproduce

Click preview
Wait for it to hydrate
It throws an error: ""attempted to get private field on non-instance""

### Current vs. Expected behavior

Here is the same code running in react without Next.js:
[https://codesandbox.io/p/sandbox/tslrlg](https://codesandbox.io/p/sandbox/tslrlg)
The getter does not throw and returns the value of the private field.

In the broken Next.js version, it renders fine on the server side, but when it rehydrates it throws.
The bug only happens if all of these are true:
- using Next.js
- a function is imported from another file
- that looks like this: `() => new class ClassName {/* class body */}`
- the returned instance is passed through useMemo or useRef

The following function formats do not trigger the error:
- `() => { return new class ClassName {/* class body */} }`
- `() => new ClassName()`
- `() => instance`
- exporting the class constructor


```js
""use client"";
import { useRef } from ""react"";
import { construct } from ""./construct"";

export default function Home() {
  const a = construct()
  const ref = useRef(a);
  const b = ref.current;

  return b.test;      // throws client-side
}
```

```js
export const construct = () => new class {
  #test = 99
  get test() { return this.#test }
}
```

### Provide environment information

```bash
It's running on CodeSandbox
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local)
",プライベートフィールドが特定のケースで壊れる,"### コードのリンク

https://codesandbox.io/p/devbox/cool-yalow-zzkp58

### 再現手順

プレビューをクリック  
ハイドレートされるのを待つ  
エラーが発生します: ""非インスタンスでプライベートフィールドを取得しようとしました""

### 現在の動作と期待される動作

こちらはNext.jsなしでReactで動作している同じコードです:  
[https://codesandbox.io/p/sandbox/tslrlg](https://codesandbox.io/p/sandbox/tslrlg)  
ゲッターはエラーを投げず、プライベートフィールドの値を返します。

壊れたNext.jsバージョンでは、サーバーサイドでは正常にレンダリングされますが、再ハイドレート時にエラーが発生します。  
このバグは、次のすべてが真である場合にのみ発生します:  
- Next.jsを使用している  
- 関数が別のファイルからインポートされている  
- それは次のように見える: `() => new class ClassName {/* クラス本体 */}`  
- 返されたインスタンスがuseMemoまたはuseRefを通じて渡される  

次の関数形式はエラーを引き起こしません:  
- `() => { return new class ClassName {/* クラス本体 */} }`  
- `() => new ClassName()`  
- `() => instance`  
- クラスコンストラクタをエクスポートする  

```js
""use client"";
import { useRef } from ""react"";
import { construct } from ""./construct"";

export default function Home() {
  const a = construct()
  const ref = useRef(a);
  const b = ref.current;

  return b.test;      // クライアントサイドでエラーを投げる
}
```

```js
export const construct = () => new class {
  #test = 99
  get test() { return this.#test }
}
```

### 環境情報を提供してください

```bash
CodeSandboxで実行中
```

### 影響を受ける領域はどれですか？（すべて選択してください）

ランタイム

### 影響を受けるステージはどれですか？（すべて選択してください）

next dev（ローカル）"
S1,P1,React Spring on development server not working on initial load,"### Link to the code that reproduces this issue

https://github.com/gdapps-studio/nextjs-minimal-reproduction-react-spring

### To Reproduce

1. `pnpm install`
2. `pnpm dev`
3. no content on initial load

### Current vs. Expected behavior

Following the reproduction steps, you will expect seeing the content, but actually you won't see anything on initial load.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 9.4.0
Relevant Packages:
  next: 14.2.14 // Latest available version is detected (14.2.14).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
開発サーバーでのReact Springが初回ロード時に動作しない","本文:
### この問題を再現するコードへのリンク

https://github.com/gdapps-studio/nextjs-minimal-reproduction-react-spring

### 再現手順

1. `pnpm install`
2. `pnpm dev`
3. 初回ロード時にコンテンツが表示されない

### 現在の動作と期待される動作

再現手順に従うと、コンテンツが表示されることを期待しますが、実際には初回ロード時に何も表示されません。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 9.4.0
関連パッケージ:
  next: 14.2.14 // 利用可能な最新バージョンが検出されました (14.2.14)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,headers function get method only return full referrer url on page refresh and not on page visited through Link component.,"### Link to the code that reproduces this issue

https://github.com/Rajesh-Poojari-Dmart/nextIssue

### To Reproduce

## Step 1

Add the following `generateMetadata` function in a couple of dynamic page files that are linked to each other using the Link component:

```javascript
export async function generateMetadata() {
   const headersList = headers();
   const refererUrl = headersList.get(""referer"") || null;
  
   return {
      openGraph: {
         url: refererUrl
      },
      alternates: {
         canonical: refererUrl,
      },
   };
}
```

## Step 2

Suppose you visit from Homepage ""/"" to some dynamic url ""/products/{productName}"" using Link component, the above genareteMetadata function adds opengraph and canonical url as ""http:localhost:3000/"" in head tag of /product/{productName} page, but when I refresh the page /product/{productName} , genareteMetadata function adds ""http:localhost:3000/product/{productName}"" in opengraph and canonical url.


### Current vs. Expected behavior

### Current behaviour
The headers function get method does not get the full url inside generateMetadata on page visited through Link component.

### Expected behaviour
The headers function should get the full url inside generateMetadata on page visited through Link component.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 21.6.0: Mon Dec 19 20:46:01 PST 2022; root:xnu-8020.240.18~2/RELEASE_ARM64_T8101
  Available memory (MB): 8192
  Available CPU cores: 8
Binaries:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.21
  pnpm: N/A
Relevant Packages:
  next: 14.2.14 // Latest available version is detected (14.2.14).
  eslint-config-next: 14.2.14
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
ヘッダー関数のgetメソッドは、ページをリフレッシュしたときにのみ完全なリファラURLを返し、Linkコンポーネントを通じて訪れたページでは返さない。","本文:
### この問題を再現するためのコードへのリンク

https://github.com/Rajesh-Poojari-Dmart/nextIssue

### 再現手順

## ステップ1

Linkコンポーネントを使用して互いにリンクされているいくつかの動的ページファイルに以下の`generateMetadata`関数を追加します：

```javascript
export async function generateMetadata() {
   const headersList = headers();
   const refererUrl = headersList.get(""referer"") || null;
  
   return {
      openGraph: {
         url: refererUrl
      },
      alternates: {
         canonical: refererUrl,
      },
   };
}
```

## ステップ2

ホームページ""/""からLinkコンポーネントを使用して動的URL""/products/{productName}""に移動すると、上記のgenerateMetadata関数は/product/{productName}ページのheadタグに""http:localhost:3000/""としてopengraphとcanonical URLを追加しますが、ページをリフレッシュすると/product/{productName}、generateMetadata関数は""http:localhost:3000/product/{productName}""をopengraphとcanonical URLに追加します。

### 現在の動作と期待される動作

### 現在の動作
ヘッダー関数のgetメソッドは、Linkコンポーネントを通じて訪れたページ内のgenerateMetadataで完全なURLを取得しません。

### 期待される動作
ヘッダー関数は、Linkコンポーネントを通じて訪れたページ内のgenerateMetadataで完全なURLを取得するべきです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 21.6.0: Mon Dec 19 20:46:01 PST 2022; root:xnu-8020.240.18~2/RELEASE_ARM64_T8101
  利用可能なメモリ (MB): 8192
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.9.0
  npm: 10.1.0
  Yarn: 1.22.21
  pnpm: N/A
関連パッケージ:
  next: 14.2.14 // 検出された最新の利用可能バージョンは14.2.14です。
  eslint-config-next: 14.2.14
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_応答なし_"
S1,P1,Not found page does not get scrolled to the top on opening,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/peaceful-pike-ktxllk?workspaceId=cc8eb0ea-4ef2-4830-9ca0-1bb04d0968ad

### To Reproduce

1. Start the application in development
2. Open /foo page
3. Scroll to the bottom and click the bottom link (""Click here to trigger not found redirect"")
4. Observe scroll position in opened (not-found) page

### Current vs. Expected behavior

Following the steps from the previous section I expected ""Not found"" page to be opened scrolled to the top but it keeps the scroll position of the /foo page.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0-canary.175 // Latest available version is detected (15.0.0-canary.175).
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure, Navigation, Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

_No response_","タイトル:  
開いたときに「見つかりません」ページが上部にスクロールされない","本文:  
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/peaceful-pike-ktxllk?workspaceId=cc8eb0ea-4ef2-4830-9ca0-1bb04d0968ad

### 再現手順

1. 開発環境でアプリケーションを起動する
2. /foo ページを開く
3. 下にスクロールして、下部のリンク（「見つからないリダイレクトをトリガーするにはクリックしてください」）をクリックする
4. 開いた（見つかりません）ページのスクロール位置を観察する

### 現在の動作と期待される動作

前のセクションの手順に従ったところ、「見つかりません」ページが上部にスクロールされて開かれることを期待しましたが、/foo ページのスクロール位置を保持しています。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能な CPU コア: 2
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.0-canary.175 // 検出された最新の利用可能バージョンは (15.0.0-canary.175) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-2d16326d-20240930
  react-dom: 19.0.0-rc-2d16326d-20240930
  typescript: 5.3.3
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明、ナビゲーション、並行およびインターセプトルート

### 影響を受ける段階はどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

_なし_"
S1,P1,_next/data requests on the index page get 308 redirect when middleware and basePath are both used,"### Link to the code that reproduces this issue

https://github.com/Zach-Jaensch/nextjs-basepath-middleware-redirect-issue

### To Reproduce

With basePath configure eg `/library`
With middleware existing (the contents of which doesn't matter)
Using a root page in the pages router `/`
With a Next Link to that page (link can be on any page)
Run app and click on the link to request the _next/data json 

### Current vs. Expected behavior

## Current
`/(basePath)/_next/data/index.json` request is redirected to `/(basePath)`  which is a document

## Expected
`/(basePath)/_next/data/index.json` should not redirect to `/(basePath)`

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Wed Jul 31 20:49:39 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.10.0
Relevant Packages:
  next: 15.0.0-canary.159 // There is a newer canary version (15.0.0-canary.175) available, please upgrade! 
  eslint-config-next: 14.2.13
  react: 19.0.0-rc-5dcb0097-20240918
  react-dom: 19.0.0-rc-5dcb0097-20240918
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
ミドルウェアとbasePathの両方が使用されていると、インデックスページで_next/dataリクエストが308リダイレクトされる","本文:
### この問題を再現するコードへのリンク

https://github.com/Zach-Jaensch/nextjs-basepath-middleware-redirect-issue

### 再現手順

basePathを設定例 `/library`  
ミドルウェアが存在する（内容は関係ない）  
ページルーターのルートページを使用 `/`  
そのページへのNext Link（リンクは任意のページにあってもよい）  
アプリを実行し、リンクをクリックして_next/data jsonをリクエスト

### 現在の動作と期待される動作

## 現在の動作
`/(basePath)/_next/data/index.json` リクエストが `/(basePath)` にリダイレクトされる（これはドキュメント）

## 期待される動作
`/(basePath)/_next/data/index.json` は `/(basePath)` にリダイレクトされるべきではない

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Wed Jul 31 20:49:39 PDT 2024; root:xnu-10063.141.1.700.5~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: N/A
  pnpm: 9.10.0
関連パッケージ:
  next: 15.0.0-canary.159 // 新しいカナリアバージョン (15.0.0-canary.175) が利用可能です。アップグレードしてください！ 
  eslint-config-next: 14.2.13
  react: 19.0.0-rc-5dcb0097-20240918
  react-dom: 19.0.0-rc-5dcb0097-20240918
  typescript: 5.6.2
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,static sites load to slow and extra network request being made when going to that route again,"### Link to the code that reproduces this issue

https://github.com/MariuzM/test__next/tree/main

### To Reproduce

When you click first time on next route it will load fast/instant. but when you click it again it loads abit slowly and also extra network request being made.

### Current vs. Expected behavior

If I'm building static site i don’t need extra network request being made to server, but why is next doing this on 2nd time click?

All this is being deployed on railway.app 

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-rc.0 // Latest available version is detected (15.0.0-rc.0).
  eslint-config-next: 15.0.0-rc.0
  react: 19.0.0-rc-fb9a90fa48-20240614
  react-dom: 19.0.0-rc-fb9a90fa48-20240614
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Performance

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

_No response_",静的サイトが遅く読み込まれ、再度そのルートにアクセスするときに余分なネットワークリクエストが発生する,"### この問題を再現するコードへのリンク

https://github.com/MariuzM/test__next/tree/main

### 再現手順

最初に次のルートをクリックすると、すぐに読み込まれます。しかし、再度クリックすると、少し遅く読み込まれ、余分なネットワークリクエストが発生します。

### 現在の動作と期待される動作

静的サイトを構築している場合、サーバーへの余分なネットワークリクエストは必要ありませんが、なぜ次のクリックでこれが発生するのでしょうか？

すべては railway.app にデプロイされています。

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能な CPU コア: 10
バイナリ：
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ：
  next: 15.0.0-rc.0 // 利用可能な最新バージョンが検出されました (15.0.0-rc.0)。
  eslint-config-next: 15.0.0-rc.0
  react: 19.0.0-rc-fb9a90fa48-20240614
  react-dom: 19.0.0-rc-fb9a90fa48-20240614
  typescript: 5.6.2
Next.js 設定：
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

パフォーマンス

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

_回答なし_"
S1,P1,Dynamic Modal Interception is Greedy,"### Link to the code that reproduces this issue

https://github.com/khuezy/next-modal-bug

### To Reproduce

1. npm install
2. npm run dev
3. Go to localhost:3000/gallery
4. Click on /gallery/dynamic
5. See dynamic route modal interception
6. Go back
7. Click /gallery/static
8. See that the static route is intercepted when it shouldn't

### Current vs. Expected behavior

Modal Interception intercepts static routes as dynamic.

```
/app
  /gallery
    /[dynamic]
      page.tsx
    /static
      page.tsx
    /@modal
      /[dynamic]
        page.tsx
```

When linking to `/gallery/static`, the modal interceptor intercepts it as `/gallery/[dynamic]`.

Without ""@modal"", the `/gallery/static` is processed before the `/gallery/[dynamic] `route. But with ""@modal"" interception, it is intercepting the `/gallery/static` path as `[dynamic]`

So with that, the expectation of ""@modal"" route interception is the same. ""@modal"" should not intercept static routes.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 22.6.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.7.0
Relevant Packages:
  next: 15.0.0-canary.173 // Latest available version is detected (15.0.0-canary.173).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_",動的モーダルインターセプションは貪欲です,"### この問題を再現するコードへのリンク

https://github.com/khuezy/next-modal-bug

### 再現手順

1. npm install
2. npm run dev
3. localhost:3000/galleryにアクセス
4. /gallery/dynamicをクリック
5. 動的ルートのモーダルインターセプションを確認
6. 戻る
7. /gallery/staticをクリック
8. 静的ルートが不適切にインターセプトされることを確認

### 現在の動作と期待される動作

モーダルインターセプションが静的ルートを動的としてインターセプトします。

```
/app
  /gallery
    /[dynamic]
      page.tsx
    /static
      page.tsx
    /@modal
      /[dynamic]
        page.tsx
```

`/gallery/static`にリンクすると、モーダルインターセプターがそれを`/gallery/[dynamic]`としてインターセプトします。

""@modal""なしでは、`/gallery/static`は`/gallery/[dynamic]`ルートの前に処理されます。しかし、""@modal""インターセプションがあると、`/gallery/static`パスを`[dynamic]`としてインターセプトしています。

したがって、""@modal""ルートインターセプションの期待は同じです。""@modal""は静的ルートをインターセプトすべきではありません。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T6000
  利用可能メモリ (MB): 32768
  利用可能CPUコア: 10
バイナリ:
  Node: 22.6.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.7.0
関連パッケージ:
  next: 15.0.0-canary.173 // 検出された最新の利用可能バージョンは (15.0.0-canary.173) です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

並行およびインターセプトルート

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,next package can't be found when using --turbo and deno 2 rc in a monorepo,"### Link to the code that reproduces this issue

https://github.com/hamlim/deno-monorepo

### To Reproduce

1. Clone the repo
2. Upgrade to deno 2 release candidate: `deno upgrade rc` (using at least `2.0.0-rc.7`)
3. Run `deno install` to install dependencies
4. Run `deno task dev --filter=docs` (runs the docs Next app in development mode)
5. Try to visit `localhost:3000`
6. See error in terminal

### Current vs. Expected behavior

Following the above steps - I'd expect the app to boot correctly, however it instead shows the following error in the terminal:

```sh
docs:dev: $ next dev --turbo
docs:dev:   ▲ Next.js 15.0.0-canary.140 (turbo)
docs:dev:   - Local:        http://localhost:3000
docs:dev:
docs:dev:  ✓ Starting...
docs:dev: [Error: Next.js package not found
docs:dev:
docs:dev: Debug info:
docs:dev: - Execution of get_entrypoints_with_issues failed
docs:dev: - Execution of Project::entrypoints failed
docs:dev: - Execution of PagesProject::to_endpoint failed
docs:dev: - Execution of PagesStructureItem::new failed
docs:dev: - Execution of FileSystemPath::join failed
docs:dev: - Execution of get_next_package failed
docs:dev: - Next.js package not found] {
docs:dev:   code: 'GenericFailure'
docs:dev: }
```

Note:

Removing `--turbo` on the dev task within `apps/docs/package.json` makes it work as expected.

My assumption is that turbopack (maybe) is unable to resolve the symlinked `next` package from the root `node_modules` (next is installed somewhere else with `deno` and then symlinked _I think_)

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: 24.0.0
  Available memory (MB): 24576
  Available CPU cores: 8
Binaries:
  Node: 20.11.1
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.140 // There is a newer canary version (15.0.0-canary.173) available, please upgrade!
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.4.5
Next.js Config:
  output: N/A
 ⚠ There is a newer canary version (15.0.0-canary.173) available, please upgrade!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Module Resolution, Turbopack

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Will attempt to replicate with the latest canary!",次のパッケージが見つかりません --turbo と deno 2 rc を使用したモノレポで,"### この問題を再現するためのコードへのリンク

https://github.com/hamlim/deno-monorepo

### 再現手順

1. リポジトリをクローンします
2. deno 2 リリース候補にアップグレードします: `deno upgrade rc`（少なくとも `2.0.0-rc.7` を使用）
3. 依存関係をインストールするために `deno install` を実行します
4. `deno task dev --filter=docs` を実行します（開発モードで docs Next アプリを実行）
5. `localhost:3000` にアクセスしてみます
6. ターミナルにエラーが表示されます

### 現在の動作と期待される動作

上記の手順に従った場合、アプリが正しく起動することを期待しますが、代わりにターミナルに以下のエラーが表示されます：

```sh
docs:dev: $ next dev --turbo
docs:dev:   ▲ Next.js 15.0.0-canary.140 (turbo)
docs:dev:   - Local:        http://localhost:3000
docs:dev:
docs:dev:  ✓ Starting...
docs:dev: [Error: Next.js package not found
docs:dev:
docs:dev: Debug info:
docs:dev: - Execution of get_entrypoints_with_issues failed
docs:dev: - Execution of Project::entrypoints failed
docs:dev: - Execution of PagesProject::to_endpoint failed
docs:dev: - Execution of PagesStructureItem::new failed
docs:dev: - Execution of FileSystemPath::join failed
docs:dev: - Execution of get_next_package failed
docs:dev: - Next.js package not found] {
docs:dev:   code: 'GenericFailure'
docs:dev: }
```

注意：

`apps/docs/package.json` 内の dev タスクから `--turbo` を削除すると、期待通りに動作します。

私の仮定では、turbopack がルートの `node_modules` からシンボリックリンクされた `next` パッケージを解決できない可能性があります（next はどこか別の場所に `deno` でインストールされ、その後シンボリックリンクされていると思います）。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: 24.0.0
  利用可能なメモリ (MB): 24576
  利用可能な CPU コア: 8
バイナリ:
  Node: 20.11.1
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.140 // 新しいカナリアバージョン (15.0.0-canary.173) が利用可能です。アップグレードしてください！
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.4.5
Next.js 設定:
  output: N/A
 ⚠ 新しいカナリアバージョン (15.0.0-canary.173) が利用可能です。アップグレードしてください！
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細はこちら - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

モジュール解決、Turbopack

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

最新のカナリアで再現を試みます！"
S1,P1,"Template strings are incorrectly converted during building, lead to JSON.parse errors at production runtime.","### Link to the code that reproduces this issue

https://github.com/Innei/next-bundle-regexp-repro

### To Reproduce

1. clone my repro
2. run build
3. next start and see prod page

![CleanShot 2024-09-28 at 9  01 11@2x](https://github.com/user-attachments/assets/aa1519f8-4f77-4d75-a399-3230f58119c1)


### Current vs. Expected behavior

The product of the build has changed in structure from the third party's original file, specifically, the template string of the third party's original file has been converted incorrectly, resulting in a JSON parse error.

1. The third party original code:

(It's too long. I've cut off part of it.
![CleanShot 2024-09-28 at 9  03 11@2x](https://github.com/user-attachments/assets/284bd72f-0e2b-42a4-98d5-275a931f049a)

I run the code, works

![CleanShot 2024-09-28 at 9  04 09@2x](https://github.com/user-attachments/assets/59d4d971-4649-4884-ab04-996ee45920b2)

2. next The compiled product, the template string is converted to a normal string, and throw an error.

![CleanShot 2024-09-28 at 9  06 25@2x](https://github.com/user-attachments/assets/5173ebf4-8389-4f1c-a013-13e0d500677e)

And copy the JSON.parse part code and run in console. Error.

![CleanShot 2024-09-28 at 9  07 23@2x](https://github.com/user-attachments/assets/d6d601b5-2758-4fab-80fd-51928c8c3af2)


And in the actual run, the reported error is the same

![CleanShot 2024-09-28 at 9  08 02@2x](https://github.com/user-attachments/assets/0f1f5813-b15d-497d-b7c0-1e1e211a8c55)


I was expecting that. next.js should not be converting template strings. Not only is the conversion incorrect here, but it also doesn't respect browserlist, even though I've set the browserlist target to the last 1 chrome version.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Mon Aug 12 20:52:12 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 12
Binaries:
  Node: 22.3.0
  npm: 10.2.4
  Yarn: 1.22.21
  pnpm: 9.11.0
Relevant Packages:
  next: 14.2.13 // Latest available version is detected (14.2.13).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

SWC

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_",テンプレート文字列がビルド中に不正に変換され、プロダクションランタイムでJSON.parseエラーを引き起こす。,"### この問題を再現するコードへのリンク

https://github.com/Innei/next-bundle-regexp-repro

### 再現手順

1. 私のリポをクローンする
2. ビルドを実行する
3. next startを実行し、プロダクションページを確認する

![CleanShot 2024-09-28 at 9  01 11@2x](https://github.com/user-attachments/assets/aa1519f8-4f77-4d75-a399-3230f58119c1)

### 現在の動作と期待される動作

ビルドの結果は、サードパーティの元のファイルから構造が変更されており、特にサードパーティの元のファイルのテンプレート文字列が不正に変換され、JSONパースエラーが発生しています。

1. サードパーティの元のコード：

（長すぎるため、一部をカットしました。）
![CleanShot 2024-09-28 at 9  03 11@2x](https://github.com/user-attachments/assets/284bd72f-0e2b-42a4-98d5-275a931f049a)

コードを実行すると、動作します。

![CleanShot 2024-09-28 at 9  04 09@2x](https://github.com/user-attachments/assets/59d4d971-4649-4884-ab04-996ee45920b2)

2. 次に、コンパイルされた製品では、テンプレート文字列が通常の文字列に変換され、エラーが発生します。

![CleanShot 2024-09-28 at 9  06 25@2x](https://github.com/user-attachments/assets/5173ebf4-8389-4f1c-a013-13e0d500677e)

JSON.parse部分のコードをコピーしてコンソールで実行すると、エラーが発生します。

![CleanShot 2024-09-28 at 9  07 23@2x](https://github.com/user-attachments/assets/d6d601b5-2758-4fab-80fd-51928c8c3af2)

実際の実行でも、報告されたエラーは同じです。

![CleanShot 2024-09-28 at 9  08 02@2x](https://github.com/user-attachments/assets/0f1f5813-b15d-497d-b7c0-1e1e211a8c55)

私は、next.jsがテンプレート文字列を変換しないことを期待していました。ここでの変換が不正であるだけでなく、ブラウザリストも尊重されておらず、ブラウザリストのターゲットを最新の1つのChromeバージョンに設定しているにもかかわらずです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Mon Aug 12 20:52:12 PDT 2024; root:xnu-11215.1.10~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 12
バイナリ:
  Node: 22.3.0
  npm: 10.2.4
  Yarn: 1.22.21
  pnpm: 9.11.0
関連パッケージ:
  next: 14.2.13 // 検出された最新のバージョンは14.2.13です。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

SWC

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next build（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,"Nextjs ResponseCookies function crashes with unhandled exception on decodeURIComponent if cookies has any string with % on it. ","### Link to the code that reproduces this issue

https://github.com/Sathosk/reponse-cookies-issue-reproduction-app

### To Reproduce

1. Run npm run dev
2. Open localhost:3000

### Current vs. Expected behavior

The application should handle the situation gracefully and not crash.

Instead, the following error occurs:
```bash
 ⨯ URIError: URI malformed
    at decodeURIComponent (<anonymous>)
    at Home (./src/app/page.tsx:11:78)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at stringify (<anonymous>)
    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
digest: ""2977456002""
 ```

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 16333
  Available CPU cores: 12
Binaries:
  Node: 20.14.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.171 // Latest available version is detected (15.0.0-canary.171).
  eslint-config-next: N/A
  react: 19.0.0-rc-778e1ed2-20240926
  react-dom: 19.0.0-rc-778e1ed2-20240926
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Other (Deployed)

### Additional context

The issue seems to stem from the ResponseCookies function that Next.js provides for creating a new Set-Cookie header.

Before version [14.2.8](https://github.com/vercel/next.js/commit/55cdf2b2bb279a269f1d4007fb7116f1da9c5ac9), cookies set in middleware could not be synced with RSC due to the request-response cycle. To bypass this issue, I implemented a custom function:

```
function applySetCookie(req: NextRequest, res: NextResponse): void {
    // parse the outgoing Set-Cookie header
    const setCookieHeader = res.headers.getSetCookie()
    const parsedCookies = parseSetCookies(setCookieHeader) // This used to be ResponseCookies function provided by Nextjs

    // Build a new Cookie header for the request by adding the setCookies
    const newReqHeaders = new Headers(req.headers)
    const newReqCookies = new RequestCookies(newReqHeaders)
    parsedCookies.forEach((cookie) => {
      newReqCookies.set(cookie)
    })
    // set “request header overrides” on the outgoing response
    NextResponse.next({
      request: { headers: newReqHeaders },
    }).headers.forEach((value, key) => {
      if (
        key === 'x-middleware-override-headers' ||
        key.startsWith('x-middleware-request-')
      ) {
        res.headers.set(key, value)
      }
    })
}
```
This approach worked, but I faced the same issue whenever a cookie contained a % character. It's not uncommon for cookies to have such characters.

The core issue here is that ResponseCookies is not handling exceptions thrown by the decodeURIComponent function. My workaround was to write a custom parser for handling cookies, and I have not faced any problems since.

However, starting with version 14.2.8, the functionality of merging cookies from middleware was added in the source code, essentially doing what I was doing. But the problem persists with the use of ResponseCookies, which crashes the application when decodeURIComponent throws an exception.

While I can implement a fix on my end, I believe this issue should be handled by the framework to prevent similar crashes.","タイトル:
NextjsのResponseCookies関数が、クッキーに%を含む文字列がある場合にdecodeURIComponentで未処理の例外が発生してクラッシュする。","本文:
### この問題を再現するコードへのリンク

https://github.com/Sathosk/reponse-cookies-issue-reproduction-app

### 再現手順

1. npm run devを実行
2. localhost:3000を開く

### 現在の動作と期待される動作

アプリケーションは状況を適切に処理し、クラッシュしないはずです。

代わりに、次のエラーが発生します：
```bash
 ⨯ URIError: URI malformed
    at decodeURIComponent (<anonymous>)
    at Home (./src/app/page.tsx:11:78)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at stringify (<anonymous>)
    at AsyncResource.runInAsyncScope (node:async_hooks:206:9)
digest: ""2977456002""
 ```

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Pro
  利用可能なメモリ (MB): 16333
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.14.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.171 // 検出された最新のバージョンは (15.0.0-canary.171) です。
  eslint-config-next: N/A
  react: 19.0.0-rc-778e1ed2-20240926
  react-dom: 19.0.0-rc-778e1ed2-20240926
  typescript: 5.3.3
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア、ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

この問題は、Next.jsが新しいSet-Cookieヘッダーを作成するために提供するResponseCookies関数に起因しているようです。

バージョン[14.2.8](https://github.com/vercel/next.js/commit/55cdf2b2bb279a269f1d4007fb7116f1da9c5ac9)以前は、ミドルウェアで設定されたクッキーはリクエスト-レスポンスサイクルのためにRSCと同期できませんでした。この問題を回避するために、カスタム関数を実装しました：

```
function applySetCookie(req: NextRequest, res: NextResponse): void {
    // 出力されるSet-Cookieヘッダーを解析
    const setCookieHeader = res.headers.getSetCookie()
    const parsedCookies = parseSetCookies(setCookieHeader) // これは以前はNextjsが提供するResponseCookies関数でした

    // setCookiesを追加してリクエスト用の新しいCookieヘッダーを構築
    const newReqHeaders = new Headers(req.headers)
    const newReqCookies = new RequestCookies(newReqHeaders)
    parsedCookies.forEach((cookie) => {
      newReqCookies.set(cookie)
    })
    // 出力されるレスポンスに「リクエストヘッダーのオーバーライド」を設定
    NextResponse.next({
      request: { headers: newReqHeaders },
    }).headers.forEach((value, key) => {
      if (
        key === 'x-middleware-override-headers' ||
        key.startsWith('x-middleware-request-')
      ) {
        res.headers.set(key, value)
      }
    })
}
```
このアプローチは機能しましたが、クッキーに%文字が含まれている場合に同じ問題に直面しました。クッキーにそのような文字が含まれることは珍しくありません。

ここでの核心的な問題は、ResponseCookiesがdecodeURIComponent関数によってスローされる例外を処理していないことです。私の回避策は、クッキーを処理するためのカスタムパーサーを書くことでしたが、それ以来問題は発生していません。

しかし、バージョン14.2.8以降、ミドルウェアからのクッキーをマージする機能がソースコードに追加され、基本的に私がやっていたことを行っています。しかし、ResponseCookiesを使用すると、decodeURIComponentが例外をスローしたときにアプリケーションがクラッシュするという問題は依然として残っています。

私の側で修正を実装することはできますが、同様のクラッシュを防ぐために、この問題はフレームワークによって処理されるべきだと考えています。"
S1,P1,NextResponse.rewrite does not override origin server headers,"### Link to the code that reproduces this issue

https://github.com/Gebov/nextjs-rewrite-headers

### To Reproduce

1. Start the app
2. Request /rewrite
3. Inspect the response headers
4. Verify that the Cache-Control header is not overriden
5. Verify that the custom header is overriden

### Current vs. Expected behavior

Currently the app is configured to proxy requests to nextjs.org with the URL /rewrite.

I expect all the headers specified in the NextResponse.headers to be overriden. In particular the Cache-Control header.
Currently it is not overriden. Custom headers work.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Enterprise
  Available memory (MB): 32488
  Available CPU cores: 16
Binaries:
  Node: 20.15.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.13 // Latest available version is detected (14.2.13).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
NextResponse.rewriteはオリジンサーバーヘッダーを上書きしません","本文:
### この問題を再現するコードへのリンク

https://github.com/Gebov/nextjs-rewrite-headers

### 再現手順

1. アプリを起動する
2. /rewriteをリクエストする
3. レスポンスヘッダーを検査する
4. Cache-Controlヘッダーが上書きされていないことを確認する
5. カスタムヘッダーが上書きされていることを確認する

### 現在の動作と期待される動作

現在、アプリはURL /rewriteを使用してnextjs.orgへのリクエストをプロキシするように設定されています。

NextResponse.headersに指定されたすべてのヘッダーが上書きされることを期待しています。特にCache-Controlヘッダーです。
現在は上書きされていません。カスタムヘッダーは機能しています。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Enterprise
  利用可能なメモリ (MB): 32488
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.15.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.13 // 利用可能な最新バージョンが検出されました (14.2.13)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,Using a client-side promise on initial render hangs server stream,"### Link to the code that reproduces this issue

https://github.com/mordechaim/promise-stream

### To Reproduce

1. Start the application with `npm run dev`
2. Click ""hard navigation"" link


### Current vs. Expected behavior

I use `use()` to resolve the promise in a client component. If the page is a full page load, the suspended component never ""wakes up"", the browser's loading indicator keeps spinning and the initial response body never completes.

When building the application with `next build` it hangs as well, with the following error message:

```
> next build

  ▲ Next.js 15.0.0-canary.163

   Creating an optimized production build ...
 ✓ Compiled successfully
 ✓ Linting and checking validity of types    
 ✓ Collecting page data    
   Generating static pages (5/6)  [=   ]Failed to build /suspend/page: /suspend (attempt 1 of 3) because it took more than 60 seconds. Retrying again shortly.
```

The behavior is not present if any of those is true:
- The promise is created on the server and passed to the client in unresolved state
- The promise resolves before the initial render completes
- The page is a soft navigation, namely, the promise wasn't pre-rendered on the server

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Home
  Available memory (MB): 32674
  Available CPU cores: 8
Binaries:
  Node: 20.5.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.163 // Latest available version is detected (15.0.0-canary.163).
  eslint-config-next: N/A
  react: 19.0.0-rc-5d19e1c8-20240923
  react-dom: 19.0.0-rc-5d19e1c8-20240923
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Lazy Loading

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

_No response_",クライアントサイドのプロミスを初期レンダリングで使用するとサーバーストリームがハングする,"### この問題を再現するコードへのリンク

https://github.com/mordechaim/promise-stream

### 再現手順

1. `npm run dev`でアプリケーションを起動する
2. 「ハードナビゲーション」リンクをクリックする

### 現在の動作と期待される動作

クライアントコンポーネントでプロミスを解決するために`use()`を使用しています。ページがフルページロードの場合、サスペンドされたコンポーネントは決して「目覚めず」、ブラウザの読み込みインジケーターは回り続け、初期レスポンスボディは決して完了しません。

`next build`でアプリケーションをビルドすると、次のエラーメッセージが表示されてハングします：

```
> next build

  ▲ Next.js 15.0.0-canary.163

   最適化されたプロダクションビルドを作成しています ...
 ✓ 成功裏にコンパイルされました
 ✓ リンティングと型の有効性のチェック    
 ✓ ページデータの収集    
   静的ページの生成 (5/6)  [=   ]/suspend/pageのビルドに失敗しました: /suspend (試行 1/3) 60秒以上かかったため。すぐに再試行します。
```

次のいずれかが真である場合、この動作は発生しません：
- プロミスがサーバーで作成され、未解決の状態でクライアントに渡される
- プロミスが初期レンダリングが完了する前に解決される
- ページがソフトナビゲーションであり、すなわちプロミスがサーバーでプリレンダリングされていない

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 10 Home
  利用可能なメモリ (MB): 32674
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.5.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.163 // 利用可能な最新バージョンが検出されました (15.0.0-canary.163)。
  eslint-config-next: N/A
  react: 19.0.0-rc-5d19e1c8-20240923
  react-dom: 19.0.0-rc-5d19e1c8-20240923
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

レイジーローディング

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

_なし_"
S1,P1,Headers function causing an empty page to be returned when using Optional Catch-all Segments,"### Link to the code that reproduces this issue

https://github.com/hugohammarstrom/next-ppr-headers-repro

### To Reproduce

1. Deploy repo to vercel
2. Go to root path
3. Go to any other path and see that the page works as expected

### Current vs. Expected behavior

When using the headers() function in a page using [Optional Catch-all Segments](https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#optional-catch-all-segments) the root returns a completely empty page. In some cases the page flickers with the correct page before returning to an empty page again. This seems to only affect the root page.

This worked previously but as of a few days ago this error started happening.

### Provide environment information

```bash
Node.js v20.17.0

Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.3
  Yarn: 3.6.1
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.159
  eslint-config-next: N/A
  react: 19.0.0-rc-5dcb0097-20240918
  react-dom: 19.0.0-rc-5dcb0097-20240918
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Partial Prerendering (PPR), Runtime

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

I've tried downgrading the canary version to a version that I know it worked on but I'm still seeing this error. My guess is that this is something in the vercel runtime.

I've seen a couple different error messages(in different canary versions) in the logs.
`Error: invariant: cache entry required but not generated`
`Error: Invariant: postponed state should not be provided when fallback params are provided`
`Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.`","タイトル:
オプショナルキャッチオールセグメントを使用する際にヘッダーファンクションが空のページを返す問題","本文:
### この問題を再現するコードへのリンク

https://github.com/hugohammarstrom/next-ppr-headers-repro

### 再現手順

1. リポジトリをVercelにデプロイする
2. ルートパスにアクセスする
3. 他のパスにアクセスし、ページが期待通りに動作することを確認する

### 現在の動作と期待される動作

[オプショナルキャッチオールセグメント](https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#optional-catch-all-segments)を使用しているページでheaders()関数を使用すると、ルートが完全に空のページを返します。場合によっては、正しいページが一瞬表示された後、再び空のページに戻ることがあります。これはルートページのみに影響を与えるようです。

以前は正常に動作していましたが、数日前からこのエラーが発生し始めました。

### 環境情報の提供

```bash
Node.js v20.17.0

オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.3
  Yarn: 3.6.1
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.159
  eslint-config-next: N/A
  react: 19.0.0-rc-5dcb0097-20240918
  react-dom: 19.0.0-rc-5dcb0097-20240918
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

部分的なプリレンダリング (PPR)、ランタイム

### 影響を受けるステージはどれですか？（該当するすべてを選択）

Vercel（デプロイ済み）

### 追加のコンテキスト

正常に動作していたバージョンにカナリアバージョンをダウングレードしてみましたが、まだこのエラーが発生しています。私の推測では、これはVercelランタイムの何かだと思います。

ログに異なるカナリアバージョンでいくつかの異なるエラーメッセージを見ました。
`Error: invariant: cache entry required but not generated`
`Error: Invariant: postponed state should not be provided when fallback params are provided`
`Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.`"
S1,P1,revalidatePath doesn't work with debouncing and page navigation,"### Link to the code that reproduces this issue

https://codesandbox.io/p/github/eduardodallmann/app-next-server-action-problem-2

### To Reproduce

1. Go to the events page
2. Edit one of the events by clicking on edit
3. Quickly click on the backdrop
4. The list in the table will not be updated

![322840551-71964ccd-ac59-45d3-b4c0-1700ebeb4a57](https://github.com/user-attachments/assets/c2695c03-8b5a-4381-823d-7a880638f65d)


### Current vs. Expected behavior

I will describe how my application works.
It has a listing of events. When I click edit, I navigate to events/[slug]. The form will use a server action with debouncing to save. To control this debouncing I use context api, also to show on the screen that it is saving. After making an edit to the form and waiting 2 seconds, the data is saved and the /events path is revalidated. Everything works perfectly.

Now I will describe the problem.
When I edit the form and click on the backdrop quickly before 2 seconds, the drawer is closed and the application navigates to /events again. When the 2 seconds are complete, the server action is executed, the data change is saved, but the list in the table is not updated.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  Available memory (MB): 31944
  Available CPU cores: 24
Binaries:
  Node: 18.19.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.10.0
Relevant Packages:
  next: 14.2.12 // Latest available version is detected (14.2.12).
  eslint-config-next: 14.2.12
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed)

### Additional context

I tested with 14.2.12 and 15.0.0-canary.158

Repo https://github.com/eduardodallmann/app-next-server-action-problem-2",再検証パスはデバウンスとページナビゲーションでは機能しません,"### この問題を再現するコードへのリンク

https://codesandbox.io/p/github/eduardodallmann/app-next-server-action-problem-2

### 再現手順

1. イベントページに移動します
2. 編集をクリックしてイベントの1つを編集します
3. バックドロップを素早くクリックします
4. テーブルのリストは更新されません

![322840551-71964ccd-ac59-45d3-b4c0-1700ebeb4a57](https://github.com/user-attachments/assets/c2695c03-8b5a-4381-823d-7a880638f65d)

### 現在の動作と期待される動作

私のアプリケーションの動作を説明します。
イベントのリストがあります。編集をクリックすると、events/[slug]に移動します。フォームはデバウンスを使用してサーバーアクションで保存します。このデバウンスを制御するためにコンテキストAPIを使用し、保存中であることを画面に表示します。フォームを編集し、2秒待つと、データが保存され、/eventsパスが再検証されます。すべてが完璧に機能します。

さて、問題を説明します。
フォームを編集し、2秒前にバックドロップを素早くクリックすると、ドロワーが閉じ、アプリケーションは再び/eventsに移動します。2秒が経過すると、サーバーアクションが実行され、データの変更が保存されますが、テーブルのリストは更新されません。

### 環境情報を提供してください

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  利用可能なメモリ (MB): 31944
  利用可能なCPUコア: 24
バイナリ：
  Node: 18.19.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.10.0
関連パッケージ：
  next: 14.2.12 // 検出された最新のバージョンは (14.2.12) です。
  eslint-config-next: 14.2.12
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.jsの設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、Vercel (デプロイ済み)

### 追加のコンテキスト

14.2.12および15.0.0-canary.158でテストしました

リポジトリ https://github.com/eduardodallmann/app-next-server-action-problem-2"
S1,P1,Search parameters are not invalidating  `notFound` cached responses in rsc,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/zen-cache-g8k798?workspaceId=835aa8f9-26fc-4cf6-be40-c1760c26a9e1

### To Reproduce

In the csb:
    1. Go to the client page
    2. It will start on the current year page 2024, which isn't found
    3. go to 2025. It will not be found (despite being there)
    4. Refresh the page on 2025, it will load.
    5. Go back to 2024. Not found, as expected.
    6. Return to 2025, Not found, this seems like a bug.

### Current vs. Expected behavior

Expected: changing pages search params should cause the server component to re-render

Actual: once a `notFound` path is hit, the response seems to be cached.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024
  Available memory (MB): 32038
  Available CPU cores: 16
Binaries:
  Node: 20.17.0
  npm: 
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.156
  eslint-config-next: 14.2.11
  react: 19.0.0-rc-f2df5694-20240916
  react-dom: 19.0.0-rc-f2df5694-20240916
  typescript: 5.6.2
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

First noticed in 14.2, but I can reproduce in  15 canary-156. I haven't tried on vercel.","タイトル:
検索パラメータが `notFound` キャッシュレスポンスを無効にしていない","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/zen-cache-g8k798?workspaceId=835aa8f9-26fc-4cf6-be40-c1760c26a9e1

### 再現手順

csb内で:
    1. クライアントページに移動
    2. 現在の年のページ2024が表示され、見つかりません
    3. 2025に移動します。見つかりません（存在するにもかかわらず）
    4. 2025のページをリフレッシュすると、読み込まれます。
    5. 2024に戻ります。見つかりません、予想通りです。
    6. 2025に戻ると、見つかりません、これはバグのようです。

### 現在の動作と期待される動作

期待される動作: ページの検索パラメータを変更すると、サーバーコンポーネントが再レンダリングされるべきです

実際の動作: 一度 `notFound` パスに到達すると、レスポンスがキャッシュされているようです。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #41-Ubuntu SMP PREEMPT_DYNAMIC Fri Aug  2 20:41:06 UTC 2024
  利用可能なメモリ (MB): 32038
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.17.0
  npm: 
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.156
  eslint-config-next: 14.2.11
  react: 19.0.0-rc-f2df5694-20240916
  react-dom: 19.0.0-rc-f2df5694-20240916
  typescript: 5.6.2
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

14.2で最初に気づきましたが、15 canary-156でも再現できます。vercelでは試していません。"
S1,P1,"""incrementalCache missing in unstable_cache"" unandled rejection when using `unstable_cache` in middleware","### Link to the code that reproduces this issue

https://github.com/tom-sherman/next-missing-incrementalcache-bug

### To Reproduce

1. `next dev`
2. Open `/`

### Current vs. Expected behavior



```
unhandledRejection: Error: Invariant: incrementalCache missing in unstable_cache ()=>Promise.resolve()
    at cachedCb (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/spec-extension/unstable-cache.js:64:19)
    at middleware (webpack-internal:///(middleware)/./middleware.ts:12:5)
    at Object.eval [as handler] (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/build/webpack/loaders/next-middleware-loader.js?absolutePagePath=%2Fhome%2Ftom%2Fcode%2Fnext-missing-incrementalcache-bug%2Fmiddleware.ts&page=%2Fmiddleware&rootDir=%2Fhome%2Ftom%2Fcode%2Fnext-missing-incrementalcache-bug&matchers=&preferredRegion=&middlewareConfig=e30%3D!:26:26)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/adapter.js:215:35)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at withRequestStore (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/async-storage/with-request-store.js:106:20)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/adapter.js:201:118)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/lib/trace/tracer.js:142:36)
    at NoopContextManager.with (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/compiled/@opentelemetry/api/index.js:2:7062)
    at ContextAPI.with (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/compiled/@opentelemetry/api/index.js:2:518)
```


### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  Available memory (MB): 7841
  Available CPU cores: 16
Binaries:
  Node: 20.12.1
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.9.0
Relevant Packages:
  next: 15.0.0-canary.150 // There is a newer canary version (15.0.0-canary.154) available, please upgrade! 
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware, Turbopack, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start

### Additional context

This is reproducible with and without `--turbo`.

Related to #51397 and #60336","タイトル:
「incrementalCacheがunstable_cacheに存在しない」ミドルウェアで`unstable_cache`を使用する際の未処理の拒否","本文:
### この問題を再現するコードへのリンク

https://github.com/tom-sherman/next-missing-incrementalcache-bug

### 再現手順

1. `next dev`
2. `/`を開く

### 現在の動作と期待される動作

```
unhandledRejection: Error: Invariant: incrementalCache missing in unstable_cache ()=>Promise.resolve()
    at cachedCb (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/spec-extension/unstable-cache.js:64:19)
    at middleware (webpack-internal:///(middleware)/./middleware.ts:12:5)
    at Object.eval [as handler] (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/build/webpack/loaders/next-middleware-loader.js?absolutePagePath=%2Fhome%2Ftom%2Fcode%2Fnext-missing-incrementalcache-bug%2Fmiddleware.ts&page=%2Fmiddleware&rootDir=%2Fhome%2Ftom%2Fcode%2Fnext-missing-incrementalcache-bug&matchers=&preferredRegion=&middlewareConfig=e30%3D!:26:26)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/adapter.js:215:35)
    at AsyncLocalStorage.run (node:async_hooks:346:14)
    at withRequestStore (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/async-storage/with-request-store.js:106:20)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/esm/server/web/adapter.js:201:118)
    at eval (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/server/lib/trace/tracer.js:142:36)
    at NoopContextManager.with (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/compiled/@opentelemetry/api/index.js:2:7062)
    at ContextAPI.with (webpack-internal:///(middleware)/./node_modules/.pnpm/next@15.0.0-canary.150_react-dom@19.0.0-rc-7771d3a7-20240827_react@19.0.0-rc-7771d3a7-2024082_2ydu7yowbuals2jgbmseymwiiq/node_modules/next/dist/compiled/@opentelemetry/api/index.js:2:518)
```

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP Fri Mar 29 23:14:13 UTC 2024
  利用可能なメモリ (MB): 7841
  利用可能なCPUコア: 16
バイナリ:
  Node: 20.12.1
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.9.0
関連パッケージ:
  next: 15.0.0-canary.150 // 新しいカナリアバージョン (15.0.0-canary.154) が利用可能です。アップグレードしてください！ 
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（すべて選択）

ミドルウェア、ターボパック、ウェブパック

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)、next start

### 追加のコンテキスト

これは`--turbo`の有無にかかわらず再現可能です。

関連する#51397および#60336"
S1,P1,SCSS Url Static Assets Failing to load,"### Link to the code that reproduces this issue

https://github.com/theblondealex/scss-reproduction

### To Reproduce

1. Clone the repo
2. Install dependencies
3. Run the dev server
4. Open the browser at http://localhost:3000
5. Go to the `src/app/page.tsx` file
6. Comment out the import of the css file and uncomment the import of the scss file
7. You will notice that the svg is **not** rendered when using the scss file but it is rendered when using the css file


### Current vs. Expected behavior

You will see that if the react-example is ran, the scss file is interpreted and works correctly.

Expected is that nextjs should render the url(svgs) correctly

SCSS is installed correctly as the styles are applied just not the svg loaded

Normal image works correctly in the url it is specific to .svg#ID sprite svgs

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #40~22.04.3-Ubuntu SMP PREEMPT_DYNAMIC Tue Jul 30 17:30:19 UTC 2
  Available memory (MB): 31546
  Available CPU cores: 14
Binaries:
  Node: 22.4.0
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 14.2.10 // Latest available version is detected (14.2.10).
  eslint-config-next: 14.2.10
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure, Middleware, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

_No response_",SCSSのURL静的アセットが読み込まれない,"### この問題を再現するコードへのリンク

https://github.com/theblondealex/scss-reproduction

### 再現手順

1. リポジトリをクローンする
2. 依存関係をインストールする
3. 開発サーバーを実行する
4. ブラウザをhttp://localhost:3000で開く
5. `src/app/page.tsx`ファイルに移動する
6. CSSファイルのインポートをコメントアウトし、SCSSファイルのインポートのコメントを外す
7. SCSSファイルを使用した場合、SVGが**表示されない**ことに気づくが、CSSファイルを使用した場合は表示される

### 現在の動作と期待される動作

react-exampleを実行すると、SCSSファイルが解釈され、正しく動作することがわかります。

期待されるのは、Next.jsがURL（SVG）を正しくレンダリングすることです。

SCSSは正しくインストールされており、スタイルは適用されていますが、SVGが読み込まれません。

通常の画像はURLで正しく動作しますが、.svg#IDスプライトSVGに特有の問題です。

### 環境情報を提供する

```bash
オペレーティングシステム：
  プラットフォーム: linux
  アーキ: x64
  バージョン: #40~22.04.3-Ubuntu SMP PREEMPT_DYNAMIC Tue Jul 30 17:30:19 UTC 2
  利用可能なメモリ (MB): 31546
  利用可能なCPUコア: 14
バイナリ：
  Node: 22.4.0
  npm: 10.8.1
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ：
  next: 14.2.10 // 利用可能な最新バージョンが検出されました (14.2.10)。
  eslint-config-next: 14.2.10
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.jsの設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明、ミドルウェア、出力（エクスポート/スタンドアロン）

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、next build（ローカル）、next start（ローカル）、Vercel（デプロイ済み）、その他（デプロイ済み）

### 追加のコンテキスト

_なし_"
S1,P1,Middleware: Cannot export config after declaration in export list format,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/nameless-hill-dt239f

### To Reproduce

Link to codesandbox is provided and it shows the issue as well.

### Current vs. Expected behavior

The config object from `middleware.ts` is loaded correctly in case 1 (exporting during declaration) while it is not loaded correctly in case 2 (exporting after decleration):

```
import { NextRequest, NextResponse } from 'next/server';

// case 1 -> works as expected
export const middleware = (request: NextRequest) => {
	console.log(request.nextUrl.pathname);

	return NextResponse.next();
};

export const config = {
	matcher: '/about',
};

// case 2 -> does not work as expected
const middleware = (request: NextRequest) => {
	console.log(request.nextUrl.pathname);

	return NextResponse.next();
};

const config = {
	matcher: '/about',
};

export { middleware, config };
```

When the config is loaded only paths with `/about` should be printed in the console. If not loaded, all paths are printed in the console. Also no error is reported (I am not sure if an error should be reported).

### Provide environment information

```bash
Sandbox is running on next.js version 15.0.0-canary-148. I encountered the same issue locally on 15.0.0-rc.0. Used app router in both instances.
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Exporting the config object while declaring it solves the issue for me, but the difference should only be one of syntax and not functionality. The `middleware` function is unaffected by this issue, only the `config` object is affected.

This issue might be related but I'm not completely sure: https://github.com/vercel/next.js/issues/67169
In the case that it is feel free to remove this issue/combine both issues.",ミドルウェア：エクスポートリスト形式で宣言後に設定をエクスポートできません,"### コードのリンク

https://codesandbox.io/p/devbox/nameless-hill-dt239f

### 再現手順

提供されたcodesandboxのリンクに問題が示されています。

### 現在の動作と期待される動作

`middleware.ts`からのconfigオブジェクトは、ケース1（宣言中にエクスポート）では正しく読み込まれますが、ケース2（宣言後にエクスポート）では正しく読み込まれません：

```
import { NextRequest, NextResponse } from 'next/server';

// ケース1 -> 期待通りに動作
export const middleware = (request: NextRequest) => {
	console.log(request.nextUrl.pathname);

	return NextResponse.next();
};

export const config = {
	matcher: '/about',
};

// ケース2 -> 期待通りに動作しない
const middleware = (request: NextRequest) => {
	console.log(request.nextUrl.pathname);

	return NextResponse.next();
};

const config = {
	matcher: '/about',
};

export { middleware, config };
```

configが読み込まれると、コンソールには`/about`のパスのみが表示されるべきです。読み込まれない場合は、すべてのパスがコンソールに表示されます。また、エラーは報告されません（エラーが報告されるべきかどうかは不明です）。

### 環境情報

```bash
Sandboxはnext.jsバージョン15.0.0-canary-148で実行中です。ローカルでも15.0.0-rc.0で同じ問題が発生しました。両方のインスタンスでアプリルーターを使用しました。
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

宣言中にconfigオブジェクトをエクスポートすることで問題が解決しましたが、違いは構文のものであり、機能には影響しないはずです。この問題には`middleware`関数は影響を受けず、`config`オブジェクトのみが影響を受けます。

この問題は関連している可能性がありますが、完全には確信がありません： https://github.com/vercel/next.js/issues/67169
もし関連している場合は、この問題を削除または統合しても構いません。"
S1,P1,Link Component does not prefetch on network recovery.,"### Link to the code that reproduces this issue

https://github.com/refirst11/reproduction-app

### To Reproduce

Sometimes unnecessary mounts are run.
And canary release e2e testing is special.

Let's say the start of the route is ""/"" and it goes offline in this state.
""/a"", ""/b"", and ""/c"" are in the viewport at this point, so there will be a smooth transition when transitioning to them.
And it is not possible to transition to links ""/d"", ""/e"", and ""/f"" on pages a, b, and c at this point, but let's say the network is restored, for example in a subway or train tunnel. In that case, when transitioning to pages d, e, and f, a network request will be sent and the page will be reloaded as in the a tag.
I call this mounting on recovery in Next.js.

However, since prefetch only needs to hit when the network restarts,
I thought it would be fixed by adding the following to the dependencies in React.useEffect.

In my environment, when I tried e2e testing next.js,
pnpm test-dev test/e2e/app-dir/app-prefetch/prefetching.test.ts

It's possible that I overlooked this, but all of the test code in the describe block of prefetching.test.ts passes (even if it fails), so I decided to write this as an issue here.

### Current vs. Expected behavior

When the network becomes online, link components in the viewport are prefetched.



### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 24.0.0: Sat Jul 13 00:56:26 PDT 2024; root:xnu-11215.0.165.0.4~50/RELEASE_ARM64_T8103
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.6.0
Relevant Packages:
  next: 14.2.5 // There is a newer version (14.2.9) available, upgrade recommended! 
  eslint-config-next: 13.5.6
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Performance

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

Deploy is with vercel and next start.
I've been using Next.js since version 11, but even back then there was no prefetching during network restarts.

## I want to improve
```ts
// use-network.ts
import { useEffect, useState } from 'react'

export function useNetwork() {
  const isClient =
    typeof window !== 'undefined' && typeof navigator.onLine === 'boolean'

  const readOnlineStatus = isClient && window.navigator.onLine
  const [isOnline, setIsOnline] = useState(readOnlineStatus)

  useEffect(() => {
    function updateOnlineStatus() {
      setIsOnline(window.navigator.onLine)
    }

    window.addEventListener('online', updateOnlineStatus)
    window.addEventListener('offline', updateOnlineStatus)

    return () => {
      window.removeEventListener('online', updateOnlineStatus)
      window.removeEventListener('offline', updateOnlineStatus)
    }
  }, [])
  return isOnline
}
```
```ts
// link.tsx
...
    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({
      rootMargin: '200px',
    })

    const isOnline = useNetwork()
    
    React.useEffect(() => {
      // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.
      if (process.env.NODE_ENV !== 'production') {
        return
      }

      if (!router) {
        return
      }

      // If we don't need to prefetch the URL, don't do prefetch.
      if (!isVisible || isOnline || !prefetchEnabled) {
        return
      }

      // Prefetch the URL.
      prefetch(
        router,
        href,
        as,
        { locale },
        {
          kind: appPrefetchKind,
        },
        isAppRouter
      )
    }, [
      as,
      href,
      isVisible,
      locale,
      prefetchEnabled,
      pagesRouter?.locale,
      router,
      isAppRouter,
      appPrefetchKind,
      isOnline,
    ])
```
## e2e test case
```ts
describe('online/offline transitions', () => {
  it('should handle transition from offline to online correctly', async () => {
    const browser = await next.browser('/static-page')
    let requests = []

    browser.on('request', (req) => {
      requests.push(new URL(req.url()).pathname)
    })

    // prefetch wait time
    await waitFor(1000)
    await browser.eval('navigator.onLine = false')

    // Link component ""/"" click
    // and request dashboard.
    await browser
      .elementByCss('#to-home')
      .click()
      .waitForElementByCss('#to-dashboard')

    await browser.eval('navigator.onLine = true')
    // prefetch wait time
    await waitFor(1000)
    expect(requests.filter((req) => req.includes('/dashboard')).length).toBe(0)

    await waitFor(1000)

    const before = Date.now()
    await browser
      .elementByCss('#to-dashboard')
      .click()
      .waitForElementByCss('#dashboard-layout')
    const after = Date.now()
    const timeToComplete = after - before

    // Ensure the dashboard page is prefetched
    expect(timeToComplete).toBeLessThan(20)
  })
})
```

",リンクコンポーネントがネットワーク回復時にプリフェッチしない,"### コードのリンク

https://github.com/refirst11/reproduction-app

### 再現手順

時々、不必要なマウントが実行されます。
カナリアリリースのE2Eテストは特別です。

ルートの開始が""/""で、この状態でオフラインになると仮定します。
この時点で""/a""、""/b""、""/c""がビューポートにあるため、それらへの遷移はスムーズに行われます。
そして、この時点ではページa、b、cのリンク""/d""、""/e""、""/f""に遷移することはできませんが、例えば地下鉄や電車のトンネルでネットワークが復旧したとしましょう。その場合、ページd、e、fに遷移する際にネットワークリクエストが送信され、aタグのようにページがリロードされます。
これをNext.jsにおける回復時のマウントと呼びます。

ただし、プリフェッチはネットワークが再起動したときにのみヒットする必要があるため、
React.useEffectの依存関係に以下を追加することで修正できると考えました。

私の環境でNext.jsのE2Eテストを試みたところ、
pnpm test-dev test/e2e/app-dir/app-prefetch/prefetching.test.ts

見落とした可能性もありますが、prefetching.test.tsのdescribeブロック内のすべてのテストコードは通過します（失敗しても）。そのため、ここに問題として書くことにしました。

### 現在の動作と期待される動作

ネットワークがオンラインになると、ビューポート内のリンクコンポーネントがプリフェッチされます。

### 環境情報

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 24.0.0: Sat Jul 13 00:56:26 PDT 2024; root:xnu-11215.0.165.0.4~50/RELEASE_ARM64_T8103
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 22.8.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.6.0
関連パッケージ:
  next: 14.2.5 // 新しいバージョン (14.2.9) が利用可能です。アップグレードを推奨します!
  eslint-config-next: 13.5.6
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域 (該当するものをすべて選択)

create-next-app、パフォーマンス

### 影響を受けるステージ (該当するものをすべて選択)

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

デプロイはvercelとnext startを使用しています。
私はNext.jsをバージョン11から使用していますが、その時もネットワーク再起動時にプリフェッチはありませんでした。

## 改善したい
```ts
// use-network.ts
import { useEffect, useState } from 'react'

export function useNetwork() {
  const isClient =
    typeof window !== 'undefined' && typeof navigator.onLine === 'boolean'

  const readOnlineStatus = isClient && window.navigator.onLine
  const [isOnline, setIsOnline] = useState(readOnlineStatus)

  useEffect(() => {
    function updateOnlineStatus() {
      setIsOnline(window.navigator.onLine)
    }

    window.addEventListener('online', updateOnlineStatus)
    window.addEventListener('offline', updateOnlineStatus)

    return () => {
      window.removeEventListener('online', updateOnlineStatus)
      window.removeEventListener('offline', updateOnlineStatus)
    }
  }, [])
  return isOnline
}
```
```ts
// link.tsx
...
    const [setIntersectionRef, isVisible, resetVisible] = useIntersection({
      rootMargin: '200px',
    })

    const isOnline = useNetwork()
    
    React.useEffect(() => {
      // 開発環境では、リソースの無駄遣いを避けるために、ホバー時のみプリフェッチします。プリフェッチはページのコンパイルをトリガーします。
      if (process.env.NODE_ENV !== 'production') {
        return
      }

      if (!router) {
        return
      }

      // URLのプリフェッチが必要ない場合は、プリフェッチを行いません。
      if (!isVisible || isOnline || !prefetchEnabled) {
        return
      }

      // URLをプリフェッチします。
      prefetch(
        router,
        href,
        as,
        { locale },
        {
          kind: appPrefetchKind,
        },
        isAppRouter
      )
    }, [
      as,
      href,
      isVisible,
      locale,
      prefetchEnabled,
      pagesRouter?.locale,
      router,
      isAppRouter,
      appPrefetchKind,
      isOnline,
    ])
```
## E2Eテストケース
```ts
describe('オンライン/オフラインの遷移', () => {
  it('オフラインからオンラインへの遷移を正しく処理する必要があります', async () => {
    const browser = await next.browser('/static-page')
    let requests = []

    browser.on('request', (req) => {
      requests.push(new URL(req.url()).pathname)
    })

    // プリフェッチ待機時間
    await waitFor(1000)
    await browser.eval('navigator.onLine = false')

    // リンクコンポーネント ""/"" をクリック
    // ダッシュボードをリクエストします。
    await browser
      .elementByCss('#to-home')
      .click()
      .waitForElementByCss('#to-dashboard')

    await browser.eval('navigator.onLine = true')
    // プリフェッチ待機時間
    await waitFor(1000)
    expect(requests.filter((req) => req.includes('/dashboard')).length).toBe(0)

    await waitFor(1000)

    const before = Date.now()
    await browser
      .elementByCss('#to-dashboard')
      .click()
      .waitForElementByCss('#dashboard-layout')
    const after = Date.now()
    const timeToComplete = after - before

    // ダッシュボードページがプリフェッチされていることを確認します
    expect(timeToComplete).toBeLessThan(20)
  })
})
```"
S1,P1,"FluentUI popover does not work in Next@14.2.X, but it does work in next@14.1.X","### Link to the code that reproduces this issue

https://stackblitz.com/edit/nextjs-bzkxez

### To Reproduce

Link to stackblitz with version next 14.2:
https://stackblitz.com/edit/nextjs-bzkxez
Link to stackblitz with version next 14.1:
https://stackblitz.com/edit/nextjs-5igbub

Both projects are completely same. They are clean next.js projects with added fluentui/react-components.

In next version 14.1.X fluentui popover does work in version 14.2.X it doesnt.

### Current vs. Expected behavior

Current behavior: Popover does not popoup as expected.

Expected behavior: Popover will popup.

### Provide environment information

```bash
node: 18.20.3,
npm: 10.2.3

Also tried with newest node version
node: 22.2.0,
yarn: 4.2.2
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

Other (Deployed)

### Additional context

Tried with yarn, pnpm, npm different versions. The only difference seems to be next version.
What I dont understand is that next app with fluentui must be used with dozens of people, yet i havent found any issue on this topic.

This is my first public issue, if I did something wrong Im ready for feedback.","タイトル:
FluentUIのポップオーバーはNext@14.2.Xでは動作しませんが、next@14.1.Xでは動作します","本文:
### この問題を再現するコードへのリンク

https://stackblitz.com/edit/nextjs-bzkxez

### 再現手順

次のバージョンのstackblitzへのリンク next 14.2:
https://stackblitz.com/edit/nextjs-bzkxez
次のバージョンのstackblitzへのリンク next 14.1:
https://stackblitz.com/edit/nextjs-5igbub

両方のプロジェクトは完全に同じです。FluentUI/react-componentsが追加されたクリーンなnext.jsプロジェクトです。

Nextバージョン14.1.XではFluentUIのポップオーバーは動作しますが、バージョン14.2.Xでは動作しません。

### 現在の動作と期待される動作

現在の動作: ポップオーバーは期待通りに表示されません。

期待される動作: ポップオーバーが表示されること。

### 環境情報を提供してください

```bash
node: 18.20.3,
npm: 10.2.3

最新のノードバージョンでも試しました
node: 22.2.0,
yarn: 4.2.2
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

その他（デプロイ済み）

### 追加のコンテキスト

yarn、pnpm、npmの異なるバージョンで試しました。唯一の違いはnextのバージョンのようです。
FluentUIを使用したnextアプリは多くの人に使用されているはずなのに、このトピックに関する問題を見つけられませんでした。

これが私の最初の公開問題です。もし何か間違ったことをしたら、フィードバックを受け入れる準備ができています。"
S1,P1,Nextjs 15: Importing git modules issue - 'Module not found: Can't resolve 'package-name',"### Link to the code that reproduces this issue

https://github.com/moltco/simple-consumer-2

### To Reproduce

1. Clone sample TypeScript module package: `git clone https://github.com/moltco/simple-package`
2. Clone NextJs@canary app boilerplate that imports the above package: `git clone https://github.com/moltco/simple-consumer-2`
3. `pnpm install && pnpm build` (or `pnpm dev` then visit http://localhost:3000/ to get it to compile)
4. Error raised by Nextjs: `'Module not found: Can't resolve 'simple-package'`

### Current vs. Expected behavior

Expected: import to work
Current: typescript intellisense etc works but cannot compile. 

### Provide environment information

```bash
OS: Win 10
Nodejs: v20.17.0
pnpm: 9.10.0
""next"": ""15.0.0-canary.148"",
""react"": ""19.0.0-rc-7771d3a7-20240827"",
""react-dom"": ""19.0.0-rc-7771d3a7-20240827"",
```


### Which area(s) are affected? (Select all that apply)

Module Resolution

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

I tested agains canary 15.0.0-canary.56 and 15.0.0-canary.148 -> both seem to suffer from the same issue",次のjs 15: gitモジュールのインポート問題 - 'モジュールが見つかりません: 'package-name'を解決できません',"### この問題を再現するコードへのリンク

https://github.com/moltco/simple-consumer-2

### 再現手順

1. サンプルTypeScriptモジュールパッケージをクローンします: `git clone https://github.com/moltco/simple-package`
2. 上記のパッケージをインポートするNextJs@canaryアプリボイラープレートをクローンします: `git clone https://github.com/moltco/simple-consumer-2`
3. `pnpm install && pnpm build`（または`pnpm dev`を実行してhttp://localhost:3000/にアクセスし、コンパイルを行います）
4. Nextjsによって発生したエラー: `'モジュールが見つかりません: 'simple-package'を解決できません`

### 現在の動作と期待される動作

期待される動作: インポートが機能すること  
現在の動作: TypeScriptのインテリセンスなどは機能しますが、コンパイルできません。

### 環境情報を提供してください

```bash
OS: Win 10
Nodejs: v20.17.0
pnpm: 9.10.0
""next"": ""15.0.0-canary.148"",
""react"": ""19.0.0-rc-7771d3a7-20240827"",
""react-dom"": ""19.0.0-rc-7771d3a7-20240827"",
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択してください）

モジュール解決

### 影響を受けるステージはどれですか？（該当するものをすべて選択してください）

next dev（ローカル）、next build（ローカル）、next start（ローカル）

### 追加のコンテキスト

canary 15.0.0-canary.56および15.0.0-canary.148でテストしましたが、両方とも同じ問題を抱えているようです。"
S1,P1,Server-side request forgery (SSRF),"### Link to the code that reproduces this issue

https://codesandbox.io/p/sandbox/next-js-forked-slktwp

### To Reproduce

When start my application, my header is visible in the browser. This is causing the below vulnerability issue

This application allows user-controlled URLs to be passed directly to HTTP client libraries.  This can result in Server-Side Request Forgery (SSRF). SSRF refers to an attack where the attacker can abuse functionality on  the server to force it to make requests to other internal systems within your  infrastructure that are not directly exposed to the internet.  This allows the attacker to access internal resources they do not have direct access to.\nSome risks of SSRF are:\n- Access and manipulation of internal databases, APIs, or administrative panels - Ability to scan internal network architecture and services - Can be used to pivot attacks into the internal network - Circumvent network segregation and firewall rules\nTo avoid this, try using hardcoded HTTP request calls or a whitelisting object to  check whether the user input is trying to access allowed resources or not.\nHere is an example: ``` var whitelist = [\n  ""https://example.com"", \n  ""https://example.com/sample""\n]\napp.get('/ssrf/node-ssrf/axios/safe/3', function (req, res) {\n  if(whitelist.includes(req.query.url)){\n      axios.get(url, {})\n          .then(function (response) {\n              console.log(response);\n          })\n          .catch(function (response) {\n              console.log(response);  \n          })\n  }\n}); ```  For more information on SSRF see OWASP: https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\n

### Current vs. Expected behavior

Current behavior: vulnerability scan failed because of injection of headers in the URL

Expected behavior: Vulnerability scan should pass

### Provide environment information

```bash
Operating system :Windows 11
Binaries :
Node : 20.11.1
npm : 10.2.4
Yarn : 1.22.19

Relevant packages
next : 14.2.7
eslint-config-next : 14.1.0
react :18
react-dom:18
typescript : 5
```


### Which area(s) are affected? (Select all that apply)

Instrumentation, Output (export/standalone)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), Other (Deployed)

### Additional context

Getting critical issue for this ",サーバーサイドリクエストフォージェリ（SSRF）,"### この問題を再現するためのコードへのリンク

https://codesandbox.io/p/sandbox/next-js-forked-slktwp

### 再現手順

アプリケーションを起動すると、ヘッダーがブラウザに表示されます。これが以下の脆弱性問題を引き起こしています。

このアプリケーションは、ユーザーが制御するURLをHTTPクライアントライブラリに直接渡すことを許可しています。これにより、サーバーサイドリクエストフォージェリ（SSRF）が発生する可能性があります。SSRFとは、攻撃者がサーバーの機能を悪用して、インターネットに直接公開されていないインフラ内の他の内部システムにリクエストを強制的に行わせる攻撃を指します。これにより、攻撃者は直接アクセスできない内部リソースにアクセスできるようになります。SSRFのリスクには以下が含まれます：
- 内部データベース、API、または管理パネルへのアクセスと操作
- 内部ネットワークアーキテクチャとサービスのスキャン能力
- 内部ネットワークへの攻撃のピボットに使用される可能性
- ネットワークの分離とファイアウォールルールの回避

これを避けるために、ハードコーディングされたHTTPリクエスト呼び出しや、ユーザー入力が許可されたリソースにアクセスしようとしているかどうかを確認するホワイトリストオブジェクトを使用することをお勧めします。
以下はその例です：
```javascript
var whitelist = [
  ""https://example.com"", 
  ""https://example.com/sample""
]
app.get('/ssrf/node-ssrf/axios/safe/3', function (req, res) {
  if(whitelist.includes(req.query.url)){
      axios.get(url, {})
          .then(function (response) {
              console.log(response);
          })
          .catch(function (response) {
              console.log(response);  
          })
  }
});
```
SSRFに関する詳細情報はOWASPを参照してください：https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html

### 現在の動作と期待される動作

現在の動作：ヘッダーのURLへの注入により脆弱性スキャンが失敗しました。

期待される動作：脆弱性スキャンが通過するべきです。

### 環境情報を提供してください

```bash
オペレーティングシステム : Windows 11
バイナリ :
Node : 20.11.1
npm : 10.2.4
Yarn : 1.22.19

関連パッケージ
next : 14.2.7
eslint-config-next : 14.1.0
react : 18
react-dom : 18
typescript : 5
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

計測、出力（エクスポート/スタンドアロン）

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

この件について重大な問題が発生しています。"
S1,P1,"Relay compiler configuration ""exclude"" option is not respected","### Link to the code that reproduces this issue

https://github.com/mjfaga/nextjs-relay-swc-excludes

### To Reproduce

Install dependencies and build:
```shell
yarn install
yarn build
```

### Current vs. Expected behavior

# Current Behavior

When adding a library (in the MVP, `@stigg/react-sdk`) that uses GraphQL under the hood, the relay compiler breaks consumption of that library and the app no longer properly builds.

```
 ± yarn build
yarn run v1.22.21
$ relay-compiler --validate && next build
[INFO] Querying files to compile...
[INFO] [default] compiling...
[INFO] [default] compiled documents: 0 reader, 0 normalization, 0 operation text
[INFO] Compilation completed.
[INFO] Done.
  ▲ Next.js 14.2.8

   Creating an optimized production build ...
Failed to compile.

./node_modules/@stigg/js-client-sdk/dist/index.js
Module not found: Can't resolve '/Users/markfaga/projects/nextjs-relay-swc-excludes/./__generated__/SlimSubscriptionFragmentV2.graphql.ts'

https://nextjs.org/docs/messages/module-not-found

Import trace for requested module:
./node_modules/@stigg/react-sdk/dist/react-sdk.esm.js
./src/app/page.tsx
```

# Expected Behavior

No errors because node_modules is excluded from being targeted during relay GraphQL compilation (see below for additional context).

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.2.0: Wed Nov 15 21:55:06 PST 2023; root:xnu-10002.61.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 98304
  Available CPU cores: 12
Binaries:
  Node: 22.7.0
  npm: 10.8.2
  Yarn: 1.22.21
  pnpm: N/A
Relevant Packages:
  next: 14.2.8 // Latest available version is detected (14.2.8).
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Turbopack

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

The current [SWC relay compiler implementation](https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript-plugins/src/transform/relay.rs#L20-L24) only supports 3 key options:
* `src`
* `language`
* `artifact_directory`

`exclude` is another critical option that is not currently supported. In the direct relay implementation, this is optional BUT ships with a default value of `[""**/node_modules/**"", ""**/mocks/**"", ""**/generated/**""]` to ensure things like packages in node_modules aren't targeted when they also happen to use GraphQL under the hood. In these cases, node_module source is recompiled, breaking those libraries.",リレーコンパイラ設定の「除外」オプションが尊重されない,"### この問題を再現するコードへのリンク

https://github.com/mjfaga/nextjs-relay-swc-excludes

### 再現手順

依存関係をインストールしてビルドします：
```shell
yarn install
yarn build
```

### 現在の動作と期待される動作

# 現在の動作

GraphQLを内部で使用するライブラリ（MVPでは`@stigg/react-sdk`）を追加すると、リレーコンパイラがそのライブラリの使用を妨げ、アプリが正しくビルドされなくなります。

```
 ± yarn build
yarn run v1.22.21
$ relay-compiler --validate && next build
[INFO] コンパイルするファイルをクエリ中...
[INFO] [default] コンパイル中...
[INFO] [default] コンパイルされたドキュメント: 0 リーダー, 0 正規化, 0 操作テキスト
[INFO] コンパイル完了。
[INFO] 完了。
  ▲ Next.js 14.2.8

   最適化されたプロダクションビルドを作成中...
コンパイルに失敗しました。

./node_modules/@stigg/js-client-sdk/dist/index.js
モジュールが見つかりません: '/Users/markfaga/projects/nextjs-relay-swc-excludes/./__generated__/SlimSubscriptionFragmentV2.graphql.ts'を解決できません

https://nextjs.org/docs/messages/module-not-found

要求されたモジュールのインポートトレース：
./node_modules/@stigg/react-sdk/dist/react-sdk.esm.js
./src/app/page.tsx
```

# 期待される動作

リレーGraphQLコンパイル中にnode_modulesがターゲットにされないため、エラーは発生しません（追加のコンテキストは以下を参照）。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 23.2.0: Wed Nov 15 21:55:06 PST 2023; root:xnu-10002.61.3~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 98304
  利用可能なCPUコア: 12
バイナリ：
  Node: 22.7.0
  npm: 10.8.2
  Yarn: 1.22.21
  pnpm: N/A
関連パッケージ：
  next: 14.2.8 // 検出された最新の利用可能バージョンは14.2.8です。
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.6.2
Next.js設定：
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ターボパック

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build（ローカル）

### 追加のコンテキスト

現在の[SWCリレーコンパイラ実装](https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript-plugins/src/transform/relay.rs#L20-L24)は、3つの主要なオプションのみをサポートしています：
* `src`
* `language`
* `artifact_directory`

`exclude`は現在サポートされていない別の重要なオプションです。直接的なリレー実装では、これはオプションですが、デフォルト値として`[""**/node_modules/**"", ""**/mocks/**"", ""**/generated/**""]`が付属しており、node_modules内のパッケージがターゲットにされないようにしています。これらのケースでは、node_moduleのソースが再コンパイルされ、そのライブラリが壊れてしまいます。"
S1,P1,`<details>` element behaves incorrectly in Next.js 14/15,"### Link to the code that reproduces this issue

https://github.com/mikedidomizio/details-element-in-Next-14

### To Reproduce

First sorry that the GitHub link is for Next14, it doesn't matter here 

The `<details>` HTML element is an accordion style HTML tag that can show and hide information.

The `onToggle` event is expected to automatically fire on render if open is set to true
[Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event)

> In the example above the event listener will be called once without any user interaction because the open attribute is set.

Below are CodeSandbox examples, the way to see if it automatically fire is to open the developer tools console and see that a console.log is either done or not.

In [HTML](https://codesandbox.io/p/sandbox/details-element-in-html-54nckm?file=%2Findex.html) it works that way ✅

In [React 19](https://codesandbox.io/p/devbox/details-element-in-react-19-wzd6ln) it works that way ✅

In [React 18](https://codesandbox.io/p/sandbox/details-element-in-react-18-jkx5pf?file=%2Fsrc%2FApp.tsx%3A6%2C16) it works that way ✅

In [Next.js 15](https://codesandbox.io/p/devbox/details-element-in-next-15-react-19-cyshxf?file=%2Fapp%2Fpage.tsx%3A8%2C16) it doesn't seem to work that way 🤔

In [Next.js 14](https://codesandbox.io/p/devbox/details-element-in-next-14-h9pqcc?file=%2Fapp%2Fpage.tsx%3A13%2C1) it doesn't seem to work that way 🤔

So HTML/React will automatically trigger the `onToggle` event on render if `open` is set to `true`, but not Next.js.

Is this a bug or am I doing something wrong with the Next example?

(Originally posted on the [Discord](https://discord.com/channels/752553802359505017/1281336661887680653/1281336661887680653)/[Forum](https://nextjs-forum.com/post/1281336661887680653))

https://github.com/user-attachments/assets/f70b5f76-e31a-4072-8de8-35a6ace844f6




### Current vs. Expected behavior

Current behaviour:

- Unless my examples are incorrect it seems that Next.js behaves differently than others.

Expected behaviour:

- Consistent with others, onToggle event is fired immediately on mount if open is true. I'm a bit conflicted, it should probably behave the same even if I don't like the idea of it automatically being triggered.



### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.3.0: Wed Dec 20 21:30:44 PST 2023; root:xnu-10002.81.5~7/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 18.18.2
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 9.1.1
Relevant Packages:
  next: 14.2.5 // There is a newer version (14.2.8) available, upgrade recommended!
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.3
Next.js Config:
  output: export
 ⚠ There is a newer version (14.2.8) available, upgrade recommended!
   Please try the latest canary version (`npm install next@canary`) to confirm the issue still exists before creating a new issue.
   Read more - https://nextjs.org/docs/messages/opening-an-issue
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

I tested with building a production build with static export as well, same thing, no auto-fire.",`<details>`要素がNext.js 14/15で正しく動作しない,"### この問題を再現するコードへのリンク

https://github.com/mikedidomizio/details-element-in-Next-14

### 再現手順

まず、GitHubのリンクがNext14用であることをお詫び申し上げますが、ここでは関係ありません。

`<details>` HTML要素は、情報を表示および非表示にできるアコーディオンスタイルのHTMLタグです。

`onToggle`イベントは、openがtrueに設定されている場合、レンダリング時に自動的に発火することが期待されています。
[ドキュメント](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event)

> 上記の例では、open属性が設定されているため、ユーザーの操作なしにイベントリスナーが一度呼び出されます。

以下はCodeSandboxの例です。自動的に発火するかどうかを確認する方法は、開発者ツールのコンソールを開き、console.logが実行されたかどうかを確認することです。

[HTML](https://codesandbox.io/p/sandbox/details-element-in-html-54nckm?file=%2Findex.html)ではそのように動作します✅

[React 19](https://codesandbox.io/p/devbox/details-element-in-react-19-wzd6ln)でもそのように動作します✅

[React 18](https://codesandbox.io/p/sandbox/details-element-in-react-18-jkx5pf?file=%2Fsrc%2FApp.tsx%3A6%2C16)でもそのように動作します✅

[Next.js 15](https://codesandbox.io/p/devbox/details-element-in-next-15-react-19-cyshxf?file=%2Fapp%2Fpage.tsx%3A8%2C16)ではそのようには動作しないようです🤔

[Next.js 14](https://codesandbox.io/p/devbox/details-element-in-next-14-h9pqcc?file=%2Fapp%2Fpage.tsx%3A13%2C1)でもそのようには動作しないようです🤔

したがって、HTML/Reactは`open`がtrueに設定されている場合、レンダリング時に`onToggle`イベントを自動的にトリガーしますが、Next.jsではそうではありません。

これはバグですか、それともNextの例で何か間違ったことをしているのでしょうか？

（元々は[Discord](https://discord.com/channels/752553802359505017/1281336661887680653/1281336661887680653)/[フォーラム](https://nextjs-forum.com/post/1281336661887680653)に投稿されました）

https://github.com/user-attachments/assets/f70b5f76-e31a-4072-8de8-35a6ace844f6

### 現在の動作と期待される動作

現在の動作：

- 私の例が間違っていなければ、Next.jsは他のものとは異なる動作をしているようです。

期待される動作：

- 他と一貫性があり、openがtrueの場合、onToggleイベントがマウント時に即座に発火することです。私は少し矛盾を感じていますが、自動的にトリガーされるのはあまり好きではないアイデアでも、同じように動作すべきだと思います。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.3.0: Wed Dec 20 21:30:44 PST 2023; root:xnu-10002.81.5~7/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 18.18.2
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 9.1.1
関連パッケージ:
  next: 14.2.5 // 新しいバージョン (14.2.8) が利用可能です。アップグレードをお勧めします！
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.3
Next.jsの設定:
  出力: export
 ⚠ 新しいバージョン (14.2.8) が利用可能です。アップグレードをお勧めします！
   新しい問題を作成する前に、最新のカナリアバージョン (`npm install next@canary`) を試して、問題がまだ存在するか確認してください。
   詳細は - https://nextjs.org/docs/messages/opening-an-issue
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

静的エクスポートでプロダクションビルドを作成しても、同じことが起こり、自動発火はありませんでした。"
S1,P1,Nextjs includes all client components in the bundle when at least one client component is rendered from a server component (app-folder),"### Link to the code that reproduces this issue

https://github.com/EvgeniyKorshun/nextjs-includes-client-code-for-all-pages

### To Reproduce

1. Start the app in prod mode (npm run build && npm run start);
2. Open http://localhost:3000;
3. Check the Source of the page.

### Current vs. Expected behavior

**Current behavior:**
Next.js includes ClientComponent2 in the bundle, even though ServerComponent2 is not used on the current page.

**Expected behavior:**
Only ClientComponent1 should be included in the bundle.

<img width=""955"" alt=""image"" src=""https://github.com/user-attachments/assets/a92ca925-33a9-45f9-a133-6e9eb63d8baf"">


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: 1.22.18
  pnpm: 9.5.0
Relevant Packages:
  next: 15.0.0-canary.146 // Latest available version is detected (15.0.0-canary.146).
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

SWC, Webpack

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local)

### Additional context

We are currently using the latest stable version of Next.js and it appears that it includes all client components in the bundle when at least one client component is rendered from a server component. (the same issue reproduced for latest canary version)

In our project we have a JAMStack architecture, it has a single catch-all route [[...slug]] that handles dynamic page generation by pulling content from a CMS. There is a file that imports multiple components in the following format (these components are not marked with use-client, and we have tried various import strategies, including conditional import, dynamic import, and lazy loading, but without any success):
```
const HeaderSection = dynamic(() => import('./components/HeaderSection'));
const TextSection = dynamic(() => import('./components/TextSection'));
const VideoSection = dynamic(() => import('./components/VideoSection'));
const TestSection = dynamic(() => import('./components/TestSection'));

const Components = {
  HeaderSection,
  TextSection,
  VideoSection,
  TestSection,
};

export const getComponent = (key) => Components[key]
```

Even when rendering a simple test page that only contains a basic block with no additional content, the entire bundle still includes all the use-client components from these sections. As a result, the page size grows excessively, often exceeding 1 MB. ","タイトル:
Nextjsは、サーバーコンポーネントから少なくとも1つのクライアントコンポーネントがレンダリングされると、すべてのクライアントコンポーネントをバンドルに含めます（アプリフォルダ）","本文:
### この問題を再現するコードへのリンク

https://github.com/EvgeniyKorshun/nextjs-includes-client-code-for-all-pages

### 再現手順

1. アプリをプロダクションモードで起動します（npm run build && npm run start）；
2. http://localhost:3000 を開きます；
3. ページのソースを確認します。

### 現在の動作と期待される動作

**現在の動作:**
Next.jsは、現在のページでServerComponent2が使用されていないにもかかわらず、バンドルにClientComponent2を含めます。

**期待される動作:**
バンドルにはClientComponent1のみが含まれるべきです。

<img width=""955"" alt=""image"" src=""https://github.com/user-attachments/assets/a92ca925-33a9-45f9-a133-6e9eb63d8baf"">

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.13.1
  npm: 10.5.2
  Yarn: 1.22.18
  pnpm: 9.5.0
関連パッケージ:
  next: 15.0.0-canary.146 // 検出された最新の利用可能なバージョン (15.0.0-canary.146)。
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: N/A
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

SWC、Webpack

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）

### 追加のコンテキスト

現在、最新の安定版Next.jsを使用しており、サーバーコンポーネントから少なくとも1つのクライアントコンポーネントがレンダリングされると、すべてのクライアントコンポーネントがバンドルに含まれるようです。（最新のカナリアバージョンでも同様の問題が再現されました）

私たちのプロジェクトはJAMStackアーキテクチャを採用しており、CMSからコンテンツを取得して動的ページ生成を処理する単一のキャッチオールルート[[...slug]]があります。以下の形式で複数のコンポーネントをインポートするファイルがあります（これらのコンポーネントはuse-clientでマークされておらず、条件付きインポート、動的インポート、遅延読み込みなど、さまざまなインポート戦略を試みましたが、成功しませんでした）：
```
const HeaderSection = dynamic(() => import('./components/HeaderSection'));
const TextSection = dynamic(() => import('./components/TextSection'));
const VideoSection = dynamic(() => import('./components/VideoSection'));
const TestSection = dynamic(() => import('./components/TestSection'));

const Components = {
  HeaderSection,
  TextSection,
  VideoSection,
  TestSection,
};

export const getComponent = (key) => Components[key]
```

追加のコンテンツがない基本的なブロックのみを含むシンプルなテストページをレンダリングしても、バンドル全体にはこれらのセクションからのすべてのuse-clientコンポーネントが含まれます。その結果、ページサイズが過度に増加し、しばしば1MBを超えます。"
S1,P1,Wrong `error.tsx` matched using both parallel and dynamic routes,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/wonderful-dewdney-gp48mc

### To Reproduce

1. Start the dev server and open the preview: _Home error_ and _Slot error_ are shown correcly.
2. Navigate to `/page/one`: two _Home error_ are shown.

### Current vs. Expected behavior

#### Current
1. Start the dev server and open the preview: _Home error_ and _Slot error_ are shown correcly.
2. Navigate to `/page/one`: two _Home error_ are shown.

#### Expected
1. Start the dev server and open the preview: _Home error_ and _Slot error_ are shown correcly.
2. Navigate to `/page/one`: _Home error_ and _Slot error_ are shown correcly.

### Provide environment information

```bash
Platform: linux
  Arch: x64
  Version: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  Available memory (MB): 4102
  Available CPU cores: 2
Binaries:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 8.15.4
Relevant Packages:
  next: 14.2.8 // Latest available version is detected (14.2.8).
  eslint-config-next: 14.2.1
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.4.5
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Parallel & Intercepting Routes

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
誤った `error.tsx` が並列ルートと動的ルートの両方で一致している","本文:
### この問題を再現するコードへのリンク

https://codesandbox.io/p/devbox/wonderful-dewdney-gp48mc

### 再現手順

1. 開発サーバーを起動し、プレビューを開く: _Home error_ と _Slot error_ が正しく表示される。
2. `/page/one` に移動する: 2つの _Home error_ が表示される。

### 現在の動作と期待される動作

#### 現在の動作
1. 開発サーバーを起動し、プレビューを開く: _Home error_ と _Slot error_ が正しく表示される。
2. `/page/one` に移動する: 2つの _Home error_ が表示される。

#### 期待される動作
1. 開発サーバーを起動し、プレビューを開く: _Home error_ と _Slot error_ が正しく表示される。
2. `/page/one` に移動する: _Home error_ と _Slot error_ が正しく表示される。

### 環境情報を提供する

```bash
プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP PREEMPT_DYNAMIC Sun Aug  6 20:05:33 UTC 2023
  利用可能なメモリ (MB): 4102
  利用可能な CPU コア: 2
バイナリ:
  Node: 20.11.1
  npm: 10.2.4
  Yarn: 1.22.19
  pnpm: 8.15.4
関連パッケージ:
  next: 14.2.8 // 利用可能な最新バージョンが検出されました (14.2.8)。
  eslint-config-next: 14.2.1
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.4.5
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

並列およびインターセプティングルート

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,Setting a cookie in middleware & a server action results in duplicate Set-Cookie headers,"### Link to the code that reproduces this issue

https://github.com/nphmuller/next-duplicate-set-cookies/commit/b93779fbabcb0cdf16084f7b68443c1bc38581f8

### To Reproduce

See https://github.com/nphmuller/next-duplicate-set-cookies/commit/b93779fbabcb0cdf16084f7b68443c1bc38581f8 for easy repro

1. Create middleware:

```
import { NextResponse } from ""next/server"";

export default async function Middleware() {
  const response = NextResponse.next();
  response.cookies.set(""middleware-repro"", ""from-middleware"");
  return response;
}
```

2. Create server action:

```
""use server"";

import { cookies } from ""next/headers"";

export async function cookieReproAction() {
  const cookieStore = cookies();
  cookieStore.set(""middleware-repro"", ""from-action"");
  cookieStore.set(""action-repro"", ""from-action-1"");
  cookieStore.set(""action-repro"", ""from-action-2"");
}
```

3. Call the server action (for example in an onclick event

### Current vs. Expected behavior

Current cookie related response headers:

```
set-cookie: middleware-repro=from-middleware; Path=/
set-cookie: middleware-repro=from-action; Path=/
set-cookie: action-repro=from-action-2; Path=/
x-middleware-set-cookie: middleware-repro=from-middleware; Path=/
``` 

Expected behaviour:

I would expect the same behaviour as setting the same cookie multiple times in a Server Action.

This means that previous ""set-cookie"" values for the same cookie name would be overwritten and only the last one set is part of the response.

So I would expect only these `set-cookie` headers:

```
-- the action is called after the middleware, so only set the action
set-cookie: middleware-repro=from-action; Path=/ 
-- this already works as expected. `from-action-1` gets overwritten by `from-action-2`, since it's called last in the Server Action.
set-cookie: action-repro=from-action-2; Path=/
```

It's also weird that `x-middleware-set-cookie` is present in the final response that the browser receives, but I'm not sure if this is expected. I thought that these headers were used for communication between the middleware and server components or server actions. So I expected they would be stripped out in the final response. I could be totally wrong here though.

A good reason for stripping out `the x-middleware` header would be to keep the response header size small. When setting a session cookie in the middleware it would cause the session cookie to be set multiple times in the response headers. This could make the response header too large for most proxy servers, in certain cases.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.13.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.0.5
Relevant Packages:
  next: 14.2.8 // Latest available version is detected (14.2.8).
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Middleware

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context

I also verified this behaviour in next canary. It behaves exactly the same.

```
 ""next"": ""^15.0.0-canary.143"",
 ""react"": ""^19.0.0-rc-4c58fce7-20240904"",
 ""react-dom"": ""^19.0.0-rc-4c58fce7-20240904""
```

The `x-middleware-set-cookie` response header is new since Next 14.2.8 (doesn't appear in 14.2.7).
The duplicate `set-cookie` response header has been happening for a long time. Earliest version I tried is Next 13.5.1 
","タイトル:
ミドルウェアとサーバーアクションでクッキーを設定すると、重複したSet-Cookieヘッダーが生成される","本文:
### この問題を再現するコードへのリンク

https://github.com/nphmuller/next-duplicate-set-cookies/commit/b93779fbabcb0cdf16084f7b68443c1bc38581f8

### 再現手順

https://github.com/nphmuller/next-duplicate-set-cookies/commit/b93779fbabcb0cdf16084f7b68443c1bc38581f8 を参照して簡単に再現できます。

1. ミドルウェアを作成します：

```
import { NextResponse } from ""next/server"";

export default async function Middleware() {
  const response = NextResponse.next();
  response.cookies.set(""middleware-repro"", ""from-middleware"");
  return response;
}
```

2. サーバーアクションを作成します：

```
""use server"";

import { cookies } from ""next/headers"";

export async function cookieReproAction() {
  const cookieStore = cookies();
  cookieStore.set(""middleware-repro"", ""from-action"");
  cookieStore.set(""action-repro"", ""from-action-1"");
  cookieStore.set(""action-repro"", ""from-action-2"");
}
```

3. サーバーアクションを呼び出します（例えば、onclickイベントで）

### 現在の動作と期待される動作

現在のクッキー関連のレスポンスヘッダー：

```
set-cookie: middleware-repro=from-middleware; Path=/
set-cookie: middleware-repro=from-action; Path=/
set-cookie: action-repro=from-action-2; Path=/
x-middleware-set-cookie: middleware-repro=from-middleware; Path=/
```

期待される動作：

同じクッキーをサーバーアクション内で複数回設定した場合と同じ動作を期待します。

つまり、同じクッキー名の以前の「set-cookie」値は上書きされ、最後に設定されたものだけがレスポンスの一部になるべきです。

したがって、以下の`set-cookie`ヘッダーのみが期待されます：

```
-- アクションはミドルウェアの後に呼び出されるため、アクションのみを設定
set-cookie: middleware-repro=from-action; Path=/ 
-- これは期待通りに機能します。`from-action-1`は`from-action-2`によって上書きされます。これはサーバーアクション内で最後に呼び出されるためです。
set-cookie: action-repro=from-action-2; Path=/
```

また、ブラウザが受け取る最終レスポンスに`x-middleware-set-cookie`が存在するのは奇妙ですが、これは期待されることかどうかはわかりません。これらのヘッダーはミドルウェアとサーバーコンポーネントまたはサーバーアクション間の通信に使用されると思っていました。したがって、最終レスポンスでは削除されると期待していました。ただし、私は完全に間違っているかもしれません。

`x-middleware`ヘッダーを削除する良い理由は、レスポンスヘッダーのサイズを小さく保つことです。ミドルウェアでセッションクッキーを設定すると、レスポンスヘッダーにセッションクッキーが複数回設定されることになります。これにより、特定のケースでは、レスポンスヘッダーがほとんどのプロキシサーバーにとって大きすぎる可能性があります。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.13.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: 9.0.5
関連パッケージ:
  next: 14.2.8 // 利用可能な最新バージョンが検出されました (14.2.8)。
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ミドルウェア

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)、next start (ローカル)、Vercel (デプロイ済み)、その他 (デプロイ済み)

### 追加のコンテキスト

この動作はnext canaryでも確認しました。まったく同じ動作をします。

```
 ""next"": ""^15.0.0-canary.143"",
 ""react"": ""^19.0.0-rc-4c58fce7-20240904"",
 ""react-dom"": ""^19.0.0-rc-4c58fce7-20240904""
```

`x-middleware-set-cookie`レスポンスヘッダーはNext 14.2.8以降の新機能です（14.2.7には表示されません）。
重複した`set-cookie`レスポンスヘッダーは長い間発生しています。私が試した最も古いバージョンはNext 13.5.1です。"
S1,P1,app router does not resolve routes according to `generateStaticParams` constraints,"### Link to the code that reproduces this issue

https://stackblitz.com/edit/stackblitz-starters-941nyd

### To Reproduce

1. click on ""post 2"" → it's a post
1. click on ""post 1"" → it's a post
1. click on ""page 2"" → **it's a post**
1. click on ""page 1"" → **it's a post**

### Current vs. Expected behavior

the ""pages"" urls should resolve with the page route, not the post route.

### Provide environment information

```bash
irrelevant, happens in stackblitz too.
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
アプリルーターが `generateStaticParams` 制約に従ってルートを解決しない","本文:
### この問題を再現するコードへのリンク

https://stackblitz.com/edit/stackblitz-starters-941nyd

### 再現手順

1. 「ポスト 2」をクリック → それはポストです
1. 「ポスト 1」をクリック → それはポストです
1. 「ページ 2」をクリック → **それはポストです**
1. 「ページ 1」をクリック → **それはポストです**

### 現在の動作と期待される動作

「ページ」のURLは、ポストルートではなくページルートで解決されるべきです。

### 環境情報を提供してください

```bash
無関係、stackblitzでも発生します。
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

不明

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,"generateStaticParams validation makes react-router migrations difficult ","### Link to the code that reproduces this issue

https://github.com/GuiBibeau/react-router-nextapp-reproduction

### To Reproduce


While following the [tutorial to migrate](https://nextjs.org/docs/app/building-your-application/upgrading/from-vite) from a Vite SPA (with react-router),  I am able to build and render the application but hot reloading does not work.

1. clone repo, install dependency and start dev server
2. navigate to home page http://localhost:3000/
3. Click on `Data 1` link on the home page, SPA behavior will work as expected
4. refresh page or trigger hot reloading, page will break

### Current vs. Expected behavior

A first render of `next dev` will work. However regular workflows like hot reloading or refreshing the page will cause the validation from `generateStaticParams` will trigger. This makes an inplace migration from a vite react-router spa application difficult since it breaks regular dev workflows while the migration is happening.

It would be great to have away to turn off this error for a few routes in the next config or other ways.

### Provide environment information

```bash
- **Operating System:**
  - Platform: darwin
  - Architecture: arm64
  - Version: Darwin Kernel Version 23.5.0
  - Available memory: 16384 MB
  - Available CPU cores: 8

- **Binaries:**
  - Node: 20.12.2
  - npm: 10.5.0
  - Yarn: 1.22.22
  - pnpm: 9.1.2

- **Relevant Packages:**
  - Next.js: 14.2.8
  - ESLint Config Next: 14.2.8
  - React: 18.3.1
  - React DOM: 18.3.1
  - TypeScript: 5.5.4

- **Next.js Config:**
  - Output: export
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

We are currently on a vite + react-router SPA setup looking to gradually move to next export and then to full SSR hosting with server components and all the modern stuff. Our goal is to migrate gradually over 12-18 months.",generateStaticParamsの検証がreact-routerの移行を困難にする,"### この問題を再現するコードへのリンク

https://github.com/GuiBibeau/react-router-nextapp-reproduction

### 再現手順

Vite SPA（react-routerを使用）からの移行に関する[チュートリアル](https://nextjs.org/docs/app/building-your-application/upgrading/from-vite)に従っていると、アプリケーションをビルドしてレンダリングすることはできますが、ホットリロードが機能しません。

1. リポジトリをクローンし、依存関係をインストールして開発サーバーを起動します。
2. ホームページ http://localhost:3000/ に移動します。
3. ホームページの `Data 1` リンクをクリックすると、SPAの動作が期待通りに機能します。
4. ページをリフレッシュするか、ホットリロードをトリガーすると、ページが壊れます。

### 現在の動作と期待される動作

`next dev` の最初のレンダリングは機能します。しかし、ホットリロードやページのリフレッシュなどの通常のワークフローでは、`generateStaticParams` の検証がトリガーされます。これにより、viteのreact-router SPAアプリケーションからのインプレース移行が困難になり、移行中に通常の開発ワークフローが壊れてしまいます。

次の設定や他の方法で、いくつかのルートに対してこのエラーをオフにする方法があれば素晴らしいです。

### 環境情報を提供

```bash
- **オペレーティングシステム:**
  - プラットフォーム: darwin
  - アーキテクチャ: arm64
  - バージョン: Darwin Kernel Version 23.5.0
  - 利用可能なメモリ: 16384 MB
  - 利用可能なCPUコア: 8

- **バイナリ:**
  - Node: 20.12.2
  - npm: 10.5.0
  - Yarn: 1.22.22
  - pnpm: 9.1.2

- **関連パッケージ:**
  - Next.js: 14.2.8
  - ESLint Config Next: 14.2.8
  - React: 18.3.1
  - React DOM: 18.3.1
  - TypeScript: 5.5.4

- **Next.js 設定:**
  - 出力: export
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）

### 追加のコンテキスト

現在、vite + react-routerのSPAセットアップを使用しており、次にエクスポートに移行し、その後サーバーコンポーネントやすべての最新の機能を備えた完全なSSRホスティングに移行する予定です。私たちの目標は、12〜18ヶ月かけて徐々に移行することです。"
S1,P1,iFrame will not call the onLoad handler in dev mode,"### Link to the code that reproduces this issue

https://github.com/robcaldecott/iframe-nextjs

### To Reproduce

Clone the repo and first build the app that will be hosted in an `iframe` (this part is build using Vite but that does not matter).

```bash
cd remote
npm install
npm run dev
```

This will start a little app on http://localhost:5173. Leave this running.

Now, in a separate shell, run the NextJS app that exhibits the issue:

```bash
cd host
npm install
npm run dev
```

Open http://localhost:3000 in your browser, and open the DevTools so you can see the console.
Refresh the page and note that there are no console messages and the three `iframe` components on the page do not get the `onLoad` handler called.

![image](https://github.com/user-attachments/assets/2105d327-e190-4943-be49-0b4cdc73cc39)

However, if you make changes to the source and the app is reloaded by HMR then sometimes the `onLoad` event will work. But this is intermittent.

Next, shut down the NextJS `host`, build it for production and start it up:

```bash
cd host
npm run build
npm start
```

Go to http://localhost:3000 and refresh the page - you will see that `onLoad` is now working for all three `iframe` components correctly.

![image](https://github.com/user-attachments/assets/0f951ec5-9766-42a0-aac3-cc6727d17c28)

![image](https://github.com/user-attachments/assets/a055c0b0-9c96-42e2-b602-e86efdbca3e2)


### Current vs. Expected behavior

When running the NextJS `host` app in dev mode I would expect the `onLoad` handler on the `iframe` elements to work. However, it never works in dev mode when refreshing the page.

In production mode everything works correctly and the three `onLoad` events work as expected.

Included in the repo is a host app written using Vite and the latest React 18 build. This app does not suffer from this issue and `onLoad` works in dev and prodcuction.


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  Available memory (MB): 16384
  Available CPU cores: 12
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.8 // Latest available version is detected (14.2.8).
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Not sure

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

I have tried the following to get the `onLoad` event to fire in dev mode:

- Make everything a client component with `use client`.
- Disabling React Strict mode in the NextJS config.
- Throttling the network.
- Throttling the CPU.
- Using `addEventListener` on the `iframe` `ref` to capture the `load` event.
- Replacing the iframe content with a public website URL.
- Using Safari instead of Chrome.

None of these make any difference: `onLoad` will not work when refreshing the page in dev mode. It will only fire occasionally when editing the code and causing the module to reload.

While the app works fine in production, I am relying on `onLoad` working in dev mode as the host then communicates with each `iframe` using `postMessage` (this code has been removed to simplify the example.) I can hack around this using a `useEffect` with a `setTimeout` to call `setLoaded` but this is not ideal.

",iFrameは開発モードでonLoadハンドラーを呼び出さない,"### この問題を再現するコードへのリンク

https://github.com/robcaldecott/iframe-nextjs

### 再現手順

リポジトリをクローンし、最初に`iframe`でホストされるアプリをビルドします（この部分はViteを使用してビルドされていますが、それは問題ではありません）。

```bash
cd remote
npm install
npm run dev
```

これにより、http://localhost:5173で小さなアプリが起動します。このまま実行しておいてください。

次に、別のシェルで問題を示すNextJSアプリを実行します：

```bash
cd host
npm install
npm run dev
```

ブラウザでhttp://localhost:3000を開き、DevToolsを開いてコンソールを確認します。
ページをリフレッシュし、コンソールメッセージが表示されないこと、ページ上の3つの`iframe`コンポーネントが`onLoad`ハンドラーを呼び出さないことに注意してください。

![image](https://github.com/user-attachments/assets/2105d327-e190-4943-be49-0b4cdc73cc39)

ただし、ソースに変更を加え、アプリがHMRによってリロードされると、時々`onLoad`イベントが機能します。しかし、これは不定期です。

次に、NextJSの`host`をシャットダウンし、プロダクション用にビルドして起動します：

```bash
cd host
npm run build
npm start
```

http://localhost:3000に移動し、ページをリフレッシュすると、すべての3つの`iframe`コンポーネントで`onLoad`が正しく機能していることがわかります。

![image](https://github.com/user-attachments/assets/0f951ec5-9766-42a0-aac3-cc6727d17c28)

![image](https://github.com/user-attachments/assets/a055c0b0-9c96-42e2-b602-e86efdbca3e2)

### 現在の動作と期待される動作

NextJSの`host`アプリを開発モードで実行しているとき、`iframe`要素の`onLoad`ハンドラーが機能することを期待しています。しかし、ページをリフレッシュすると、開発モードでは決して機能しません。

プロダクションモードではすべてが正しく機能し、3つの`onLoad`イベントが期待通りに動作します。

リポジトリには、Viteと最新のReact 18ビルドを使用して書かれたホストアプリが含まれています。このアプリはこの問題に悩まされず、開発およびプロダクションで`onLoad`が機能します。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:13:04 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 12
バイナリ:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.8 // 利用可能な最新バージョンが検出されました (14.2.8)。
  eslint-config-next: 14.2.8
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

不明

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev (ローカル)

### 追加のコンテキスト

開発モードで`onLoad`イベントを発火させるために以下のことを試みました：

- すべてを`use client`でクライアントコンポーネントにする。
- NextJS設定でReact Strictモードを無効にする。
- ネットワークをスロットリングする。
- CPUをスロットリングする。
- `iframe`の`ref`で`addEventListener`を使用して`load`イベントをキャプチャする。
- `iframe`の内容を公開ウェブサイトのURLに置き換える。
- Chromeの代わりにSafariを使用する。

これらのいずれも違いを生じさせません：開発モードでページをリフレッシュすると`onLoad`は機能しません。コードを編集してモジュールをリロードさせるときにのみ、時々発火します。

アプリはプロダクションで正常に動作しますが、ホストが各`iframe`と`postMessage`を使用して通信するため、開発モードで`onLoad`が機能することに依存しています（このコードは例を簡素化するために削除されています）。`setLoaded`を呼び出すために`setTimeout`を使用した`useEffect`を使って回避することはできますが、理想的ではありません。"
S1,P1,Next.js App Router: Server Component with Context Provider and Tailwind causes rendering issues,"### Link to the code that reproduces this issue

https://github.com/jmderby/min-repro-next-render-issue

### To Reproduce

1. run `pnpm i`
2. run `pnpm dev`
3. visit localhost:3000, see console logs not display on the client browser console.
Caveat: Issue will reproduce intermittently, to repro successfully, restart the Next.js server. 

### Current vs. Expected behavior

- Expected: App mounts and re-renders allowing the `TestProvider`'s console log to print client-side.
- Actual: Server hangs after initial render, blocking further updates and does not print `TestProvider`'s console log client-side. There is sometimes an error that prints which is: `Uncaught SyntaxError: Invalid or unexpected token (at layout.js)`


### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.7.1
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
  tailwindcss: 3.4.1,
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Developer Experience, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

This issue seems to be related to the interaction between Server Components, Client Components with Context Providers, and importing `globals.css` which contains the Tailwind directives from the `layout.tsx` Server Component. It persists even when following Next.js best practices for mixing Server, Client Components, and Context Providers.

The issue is most noticeable immediately after starting the development server. If you refresh the page after the initial load, the app typically functions as expected. The problem primarily affects the first render following server startup.

A minimal reproduction repository has been created to demonstrate this issue.

This minimal reproduction was inspired by this Vercel guide of using React Context with Next.js: https://vercel.com/guides/react-context-state-management-nextjs
","タイトル:
Next.js アプリルーター: コンテキストプロバイダーと Tailwind を使用したサーバーコンポーネントがレンダリングの問題を引き起こす","本文:
### この問題を再現するコードへのリンク

https://github.com/jmderby/min-repro-next-render-issue

### 再現手順

1. `pnpm i` を実行
2. `pnpm dev` を実行
3. localhost:3000 にアクセスし、クライアントブラウザのコンソールにログが表示されないことを確認。
注意: 問題は断続的に再現されるため、成功裏に再現するには Next.js サーバーを再起動する必要があります。

### 現在の動作と期待される動作

- 期待される動作: アプリがマウントされ、再レンダリングされて `TestProvider` のコンソールログがクライアント側に表示されること。
- 実際の動作: 初回レンダリング後にサーバーがハングし、さらなる更新をブロックし、`TestProvider` のコンソールログがクライアント側に表示されない。時々、次のエラーが表示される: `Uncaught SyntaxError: Invalid or unexpected token (at layout.js)`

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能メモリ (MB): 16384
  利用可能 CPU コア: 8
バイナリ:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.7.1
関連パッケージ:
  next: 14.2.7 // 検出された最新の利用可能バージョン (14.2.7)。
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
  tailwindcss: 3.4.1,
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？ (該当するすべてを選択)

create-next-app, 開発者体験, ランタイム

### 影響を受けるステージはどれですか？ (該当するすべてを選択)

next dev (ローカル)

### 追加のコンテキスト

この問題は、サーバーコンポーネント、コンテキストプロバイダーを持つクライアントコンポーネント、および `layout.tsx` サーバーコンポーネントから Tailwind ディレクティブを含む `globals.css` をインポートすることとの相互作用に関連しているようです。サーバー、クライアントコンポーネント、およびコンテキストプロバイダーを混在させるための Next.js のベストプラクティスに従っても、この問題は持続します。

この問題は、開発サーバーを起動した直後に最も顕著です。初回読み込み後にページをリフレッシュすると、アプリは通常通り機能します。この問題は、サーバー起動後の最初のレンダリングに主に影響を与えます。

この問題を示すために、最小限の再現リポジトリが作成されました。

この最小限の再現は、Next.js での React コンテキストの使用に関する Vercel ガイドに触発されました: https://vercel.com/guides/react-context-state-management-nextjs"
S1,P1,Catch all route within dynamic segment breaks dynamic params,"### Link to the code that reproduces this issue

https://codesandbox.io/p/devbox/optimistic-brahmagupta-qcqflx

### To Reproduce

1. Start dev server
2. Change locale to be anything but en
3. Page is being rendered / no 404 even though there is dynamicParams = false on the locale's segment level

### Current vs. Expected behavior

Following the steps from the previous section, I expected /de to render a 404, as dynamicParams is false and de ist not listed within the segment's static params. Somehow the nested catch all route breaks this behaviour and makes it fall back to a dynamic behaviour, trying to render the given locale, running into errors because the locale does not exist.

### Provide environment information

```bash
Binaries:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
Relevant Packages:
  next: 15.0.0-canary.140 // Latest available version is detected (15.0.0-canary.140).
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed)

### Additional context

_No response_",すべてのルートが動的セグメント内で動的パラメータをブレイクする,"### コードのリンク

https://codesandbox.io/p/devbox/optimistic-brahmagupta-qcqflx

### 再現手順

1. 開発サーバーを起動する
2. ロケールを英語以外に変更する
3. ページがレンダリングされる / ロケールのセグメントレベルで dynamicParams = false であるにもかかわらず404エラーが発生しない

### 現在の動作と期待される動作

前のセクションの手順に従った場合、/de が404エラーを返すことを期待していました。dynamicParamsがfalseであり、deがセグメントの静的パラメータにリストされていないためです。何らかの理由で、ネストされたキャッチオールルートがこの動作を壊し、動的な動作にフォールバックし、指定されたロケールをレンダリングしようとしてエラーが発生します。なぜなら、そのロケールは存在しないからです。

### 環境情報

```bash
バイナリ:
  Node: 20.9.0
  npm: 9.8.1
  Yarn: 1.22.19
  pnpm: 8.10.2
関連パッケージ:
  next: 15.0.0-canary.140 // 利用可能な最新バージョンが検出されました (15.0.0-canary.140)。
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next start（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

_回答なし_"
S1,P1,Nested layout inheriting classes from outer layout on page load,"### Link to the code that reproduces this issue

https://github.com/Zain-ul-din/mdx-templates

### To Reproduce


I have no idea this is a feature or bug but it's not working as I want it to work. I'm using next js app router and my directory structure is following

```file
- app
  - docs
    page.tsx
    layout.tsx
 layout.tsx
 page.tsx
```

I'm trying to add classes inside `docs/layout.tsx` body it's working on runtime but as I refresh the page it's being replaced by root layout `app/layout.tsx` body classes.

```tsx
// app/layout.tsx
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <body className={`${inter.className} root`}>{children}</body>
    </html>
  );
}
```

```tsx
// app/docs/layout.tsx
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <body className={`${inter.className} prose`}>
        <h1 className=""text-2xl my-4"">
          👑 This is root {`'/(docs)/docs/layout.tsx'`}
        </h1>
        {children}
      </body>
    </html>
  );
}
```

https://github.com/user-attachments/assets/42ac0b7d-1327-4d05-9452-8258b039265c



### Current vs. Expected behavior

Nested layout classes should not be overridden by root layout.

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 10 Pro
  Available memory (MB): 15742
  Available CPU cores: 16
Binaries:
  Node: 20.10.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

Repo Link: https://github.com/Zain-ul-din/mdx-templates

Thank you in advance","タイトル:
ページ読み込み時に外部レイアウトからクラスを継承するネストされたレイアウト","本文:
### この問題を再現するコードへのリンク

https://github.com/Zain-ul-din/mdx-templates

### 再現手順

これは機能なのかバグなのか分かりませんが、私が望むようには動作していません。私はNext.jsのアプリルーターを使用しており、ディレクトリ構造は以下の通りです。

```file
- app
  - docs
    page.tsx
    layout.tsx
 layout.tsx
 page.tsx
```

`docs/layout.tsx`のボディ内にクラスを追加しようとしていますが、ランタイムでは機能していますが、ページをリフレッシュすると、ルートレイアウト`app/layout.tsx`のボディクラスに置き換えられています。

```tsx
// app/layout.tsx
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <body className={`${inter.className} root`}>{children}</body>
    </html>
  );
}
```

```tsx
// app/docs/layout.tsx
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang=""en"">
      <body className={`${inter.className} prose`}>
        <h1 className=""text-2xl my-4"">
          👑 これはルート {`'/(docs)/docs/layout.tsx'`}
        </h1>
        {children}
      </body>
    </html>
  );
}
```

https://github.com/user-attachments/assets/42ac0b7d-1327-4d05-9452-8258b039265c

### 現在の動作と期待される動作

ネストされたレイアウトのクラスは、ルートレイアウトによって上書きされるべきではありません。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキ: x64
  バージョン: Windows 10 Pro
  利用可能メモリ (MB): 15742
  利用可能CPUコア: 16
バイナリ:
  Node: 20.10.0
  npm: N/A
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 14.2.7 // 検出された最新のバージョンは (14.2.7) です。
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.jsの設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

リポジトリリンク: https://github.com/Zain-ul-din/mdx-templates

事前にありがとうございます。"
S1,P1,Changing search params on the same page does not reset the not found boundary,"### Link to the code that reproduces this issue

https://github.com/ali-idrizi/next-not-found-search-params-reproduction

### To Reproduce

This is a very minimal reproduction. In the `/about` page if the `q` search param is `""404""`, then `notFound` is called.

The layout has three buttons that call `router.push`, one to `/`, one to `/about` and the last to `/about?q=404`. Clicking the last button correctly shows the not found page. However, afterwards clicking `/about` no longer resets it. The 404 page goes away only after navigating to an entirely different page, or hard reloading.

In the network tab, I can see that the request for RSC payload is being sent, and it does not contain the `NEXT_NOT_FOUND` error, but the client fails to update the content.


https://github.com/user-attachments/assets/5e417703-8f70-4c35-9495-20e90318adbe



### Current vs. Expected behavior

Once `notFound` has been called on `/about?q=404`, clicking the `/about` button should correctly render the page, but instead it keeps showing the not found error.

### Provide environment information

```bash
Operating System:
  Platform: linux
  Arch: x64
  Version: #1 SMP Thu Oct 5 21:02:42 UTC 2023
  Available memory (MB): 38098
  Available CPU cores: 24
Binaries:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: N/A
  pnpm: 8.15.1
Relevant Packages:
  next: 15.0.0-canary.139 // Latest available version is detected (15.0.0-canary.139).
  eslint-config-next: N/A
  react: 19.0.0-rc-fb9a90fa48-20240614
  react-dom: 19.0.0-rc-fb9a90fa48-20240614
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Navigation

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local)

### Additional context

_No response_","タイトル:
同じページで検索パラメータを変更しても、見つからない境界がリセットされない","本文:
### この問題を再現するコードへのリンク

https://github.com/ali-idrizi/next-not-found-search-params-reproduction

### 再現手順

これは非常に最小限の再現です。`/about`ページで`q`検索パラメータが`""404""`の場合、`notFound`が呼び出されます。

レイアウトには、`router.push`を呼び出す3つのボタンがあります。1つは`/`、1つは`/about`、最後の1つは`/about?q=404`です。最後のボタンをクリックすると、正しく見つからないページが表示されます。しかし、その後`/about`をクリックしてもリセットされません。404ページは、まったく異なるページに移動するか、ハードリロードするまで消えません。

ネットワークタブでは、RSCペイロードのリクエストが送信されているのが確認でき、`NEXT_NOT_FOUND`エラーは含まれていませんが、クライアントはコンテンツを更新できません。

https://github.com/user-attachments/assets/5e417703-8f70-4c35-9495-20e90318adbe

### 現在の動作と期待される動作

`/about?q=404`で`notFound`が呼び出された後、`/about`ボタンをクリックすると正しくページがレンダリングされるべきですが、代わりに見つからないエラーが表示され続けます。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: linux
  アーキテクチャ: x64
  バージョン: #1 SMP Thu Oct 5 21:02:42 UTC 2023
  利用可能なメモリ (MB): 38098
  利用可能なCPUコア: 24
バイナリ:
  Node: 20.10.0
  npm: 10.2.3
  Yarn: N/A
  pnpm: 8.15.1
関連パッケージ:
  next: 15.0.0-canary.139 // 検出された最新の利用可能バージョン (15.0.0-canary.139)。
  eslint-config-next: N/A
  react: 19.0.0-rc-fb9a90fa48-20240614
  react-dom: 19.0.0-rc-fb9a90fa48-20240614
  typescript: 5.5.4
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ナビゲーション

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)、next start (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,Using MDXProvider with mdx-components.tsx,"### Link to the code that reproduces this issue

https://github.com/ProchaLu/next-js-mdx-provider

[CodeSandbox](https://codesandbox.io/p/devbox/github/ProchaLu/next-js-mdx-provider/tree/main/?file=%2Fapp%2FMDXComponent.tsx)

### To Reproduce

1. Clone repro, `git clone https://github.com/ProchaLu/next-js-mdx-provider` 
2. install dependencies
3. run development server

### Current vs. Expected behavior

I'm trying to use both `mdx-components.tsx` and `MDXProvider` together (like [the nested `MDXProvider` pattern](https://mdxjs.com/docs/using-mdx/#:~:text=When%20MDXProviders%20are%20nested%2C%20their%20components%20are%20merged.%20Take%20this%20example%3A)). Our constraints are as follows:
1. our app is large with multiple areas - different areas should receive different MDX `components`
2. we are trying to avoid [prop drilling - having to pass `components={props.components}` in every MDX file](https://nextjs.org/docs/app/building-your-application/configuring/mdx#local-styles-and-components) where we import another MDX file, eg. trying to avoid this:
   
   ```mdx
   import Child from './child.mdx'
   {/* Trying to avoid this */}
   <Child components={props.components} />
   ```
   
 ### Current Behavior
When using the MDXProvider in `MDXComponent.tsx` to provide custom components (h3 and h4), these components are not applied to the MDX content. Instead, only the global components defined in `mdx-components.tsx` (for h1 and h2) are applied.

`mdx-components.tsx`

```tsx
const components = {
  h1: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h1 style={{ color: 'tomato' }} {...props}>
      {children}
    </h1>
  ),
  h2: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h2 style={{ color: 'blue' }} {...props}>
      {children}
    </h2>
  ),
} satisfies MDXComponents;

declare global {
  type MDXProvidedComponents = typeof components;
}
// eslint-disable-next-line no-undef
export function useMDXComponents(): MDXProvidedComponents {
  return components;
}
```

`MDXComponent.tsx` 

```tsx
'use client';

import { MDXProvider } from '@mdx-js/react';
import { MDXComponents } from 'mdx/types';
import { HTMLAttributes } from 'react';
import Content from './message.mdx';

const components = {
  h3: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h3 style={{ color: 'purple' }} {...props}>
      {children}
    </h3>
  ),
  h4: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h4 style={{ color: 'yellow' }} {...props}>
      {children}
    </h4>
  ),
} satisfies MDXComponents;

export default function MDXComponent() {
  return (
    <MDXProvider components={components}>
      <Content />
    </MDXProvider>
  );
}
```

<img width=""339"" alt=""Screenshot 2024-09-03 at 14 04 07"" src=""https://github.com/user-attachments/assets/903d3e84-0033-40d7-a7fe-ef7f4b894daf"">

 
### Expected Behavior

The `MDXProvider` in `MDXComponent.tsx` should apply its locally defined custom components (h3 and h4) to the MDX content. 

- h1 and h2 should get their styles from the global `mdx-components.tsx`.
- h3 and h4 should get their styles from the local `MDXProvider` in `MDXComponent.tsx`.

This would allow for a more flexible and modular approach where different sections of the application can have different MDX component configurations without the need for prop drilling or defining all components globally.
   
However, it appears that this is not supported in the Next.js MDX integration:
- https://github.com/vercel/next.js/issues/54212#issuecomment-1803973892
- https://github.com/vercel/next.js/pull/69609

Are there any suggestions for providing custom MDX `components` in different app areas without manually prop drilling?

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:19:05 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T8112
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.4.0
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.2
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Markdown (MDX)

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), next start (local)

### Additional context

_No response_",MDXProviderとmdx-components.tsxの使用,"### コードのリンク

https://github.com/ProchaLu/next-js-mdx-provider

[CodeSandbox](https://codesandbox.io/p/devbox/github/ProchaLu/next-js-mdx-provider/tree/main/?file=%2Fapp%2FMDXComponent.tsx)

### 再現手順

1. リポジトリをクローンする: `git clone https://github.com/ProchaLu/next-js-mdx-provider` 
2. 依存関係をインストールする
3. 開発サーバーを起動する

### 現在の動作と期待される動作

私は`mdx-components.tsx`と`MDXProvider`を一緒に使用しようとしています（[ネストされた`MDXProvider`パターン](https://mdxjs.com/docs/using-mdx/#:~:text=When%20MDXProviders%20are%20nested%2C%20their%20components%20are%20merged.%20Take%20this%20example%3A)のように）。私たちの制約は次のとおりです：
1. アプリは大きく、複数のエリアがあります - 異なるエリアには異なるMDX `components`が必要です
2. [プロップドリリングを避ける - 各MDXファイルで`components={props.components}`を渡す必要がある](https://nextjs.org/docs/app/building-your-application/configuring/mdx#local-styles-and-components)ことを避けようとしています。例えば、次のようなことを避けたいです：

   ```mdx
   import Child from './child.mdx'
   {/* これを避けようとしています */}
   <Child components={props.components} />
   ```

### 現在の動作
`MDXComponent.tsx`でMDXコンテンツにカスタムコンポーネント（h3とh4）を提供するために`MDXProvider`を使用すると、これらのコンポーネントはMDXコンテンツに適用されません。代わりに、`mdx-components.tsx`で定義されたグローバルコンポーネント（h1とh2）のみが適用されます。

`mdx-components.tsx`

```tsx
const components = {
  h1: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h1 style={{ color: 'tomato' }} {...props}>
      {children}
    </h1>
  ),
  h2: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h2 style={{ color: 'blue' }} {...props}>
      {children}
    </h2>
  ),
} satisfies MDXComponents;

declare global {
  type MDXProvidedComponents = typeof components;
}
// eslint-disable-next-line no-undef
export function useMDXComponents(): MDXProvidedComponents {
  return components;
}
```

`MDXComponent.tsx` 

```tsx
'use client';

import { MDXProvider } from '@mdx-js/react';
import { MDXComponents } from 'mdx/types';
import { HTMLAttributes } from 'react';
import Content from './message.mdx';

const components = {
  h3: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h3 style={{ color: 'purple' }} {...props}>
      {children}
    </h3>
  ),
  h4: ({ children, ...props }: HTMLAttributes<HTMLHeadElement>) => (
    <h4 style={{ color: 'yellow' }} {...props}>
      {children}
    </h4>
  ),
} satisfies MDXComponents;

export default function MDXComponent() {
  return (
    <MDXProvider components={components}>
      <Content />
    </MDXProvider>
  );
}
```

<img width=""339"" alt=""Screenshot 2024-09-03 at 14 04 07"" src=""https://github.com/user-attachments/assets/903d3e84-0033-40d7-a7fe-ef7f4b894daf"">

### 期待される動作

`MDXComponent.tsx`の`MDXProvider`は、MDXコンテンツにローカルで定義されたカスタムコンポーネント（h3とh4）を適用するべきです。

- h1とh2はグローバル`mdx-components.tsx`からスタイルを取得するべきです。
- h3とh4は`MDXComponent.tsx`のローカル`MDXProvider`からスタイルを取得するべきです。

これにより、アプリケーションの異なるセクションが異なるMDXコンポーネント構成を持つことができ、プロップドリリングやすべてのコンポーネントをグローバルに定義する必要がなくなります。

しかし、これはNext.jsのMDX統合ではサポートされていないようです：
- https://github.com/vercel/next.js/issues/54212#issuecomment-1803973892
- https://github.com/vercel/next.js/pull/69609

異なるアプリエリアでカスタムMDX `components`を手動でプロップドリリングせずに提供するための提案はありますか？

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:19:05 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T8112
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.16.0
  npm: 10.8.1
  Yarn: N/A
  pnpm: 9.4.0
関連パッケージ:
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7)。
  eslint-config-next: N/A
  react: 18.2.0
  react-dom: 18.2.0
  typescript: 5.5.2
Next.jsの設定:
  output: N/A
```

### 影響を受けるエリアはどれですか？（すべて選択）

Markdown (MDX)

### 影響を受けるステージはどれですか？（すべて選択）

next dev (ローカル)、next build (ローカル)、next start (ローカル)

### 追加のコンテキスト

_なし_"
S1,P1,BeforeInteractive script not firing after calling notFound() function,"### Link to the code that reproduces this issue

https://github.com/kacyee/before-interactive-2

### To Reproduce

1. Start the application in production mode (npm build -> npm start)
2. Go to http://localhost:3000
3. Look into browser console, there should logged messages:
First -> ""I should be beforeInteractive""
Second -> ""Im in root layout!""
4. Go to http://localhost:3000/not-existing-route, console should log as in point 3.
5. Go to http://localhost:3000/pl/newsite, console log only ""Im in root layout!"", but not ""I should be beforeInteractive"" - 
_**which is the problem I am describing**_


### Current vs. Expected behavior

Currently when firing notFound function, for some reason script injected with strategy ""beforeInteractive"" are not fired.
In that case - CMP (Consent Management Platform) cookie consent is not being initialized and some cookies are already generated.
To avoid that - all scripts with strategy ""beforeInteractive"" should be fired on every single page, even on notFound.
On other pages it works fine, but not when we call notFound function.

Expected behavior:
scripts with strategy ""beforeInteractive"" are fired on every single page, even after calling notFound() function.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.4.0: Fri Mar 15 00:19:22 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T8112
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.5.0
  npm: 9.8.0
  Yarn: 3.6.1
  pnpm: 8.6.6
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Script (next/script)

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

I tested few version from 14.2.3 to ""15.0.0-canary.135"", error occurs on all of them.","タイトル:
notFound()関数を呼び出した後にbeforeInteractiveスクリプトが発火しない","本文:
### この問題を再現するコードへのリンク

https://github.com/kacyee/before-interactive-2

### 再現手順

1. アプリケーションをプロダクションモードで起動する（npm build -> npm start）
2. http://localhost:3000 にアクセスする
3. ブラウザのコンソールを確認すると、以下のメッセージがログに表示されるはずです：
最初 -> ""I should be beforeInteractive""
次 -> ""Im in root layout!""
4. http://localhost:3000/not-existing-route にアクセスすると、コンソールはポイント3と同様のログを表示する。
5. http://localhost:3000/pl/newsite にアクセスすると、コンソールには ""Im in root layout!"" のみが表示され、""I should be beforeInteractive"" は表示されない - 
_**これが私が説明している問題です**_

### 現在の動作と期待される動作

現在、notFound関数を発火させると、なぜか ""beforeInteractive"" ストラテジーで注入されたスクリプトが発火しません。
その場合、CMP（コンセント管理プラットフォーム）クッキー同意が初期化されず、一部のクッキーがすでに生成されています。
これを避けるために、すべての ""beforeInteractive"" ストラテジーを持つスクリプトは、notFoundでも含めて、すべてのページで発火する必要があります。
他のページでは正常に動作しますが、notFound関数を呼び出すときには動作しません。

期待される動作：
""beforeInteractive"" ストラテジーを持つスクリプトは、notFound() 関数を呼び出した後でも、すべてのページで発火する。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.4.0: Fri Mar 15 00:19:22 PDT 2024; root:xnu-10063.101.17~1/RELEASE_ARM64_T8112
  利用可能メモリ (MB): 16384
  利用可能CPUコア: 8
バイナリ:
  Node: 20.5.0
  npm: 9.8.0
  Yarn: 3.6.1
  pnpm: 8.6.6
関連パッケージ:
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7)。
  eslint-config-next: N/A
  react: 18.3.1
  react-dom: 18.3.1
  typescript: N/A
Next.js 設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

スクリプト (next/script)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next build (ローカル)

### 追加のコンテキスト

14.2.3から ""15.0.0-canary.135"" までのいくつかのバージョンをテストしましたが、すべてでエラーが発生しました。"
S1,P1,Code imported inside instrumentation.ts can't mutate imported modules,"### Link to the code that reproduces this issue

https://github.com/shkreios/next-js-instrumentation-bug-reproduction

### To Reproduce

1. Open the [codesandbox](https://codesandbox.io/p/github/shkreios/next-js-instrumentation-bug-reproduction/main?import=true&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522cm0jrhq8100053b6ikn0p21gt%2522%252C%2522sizes%2522%253A%255B100%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522cm0jrhq8100023b6ig8egxvdf%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522cm0jrhq8100033b6iqqmal62q%2522%257D%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522cm0jrhq8100043b6ixl2b7wdp%2522%257D%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522cm0jrhq8100023b6ig8egxvdf%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522cm0jrhq8100013b6ixhcnjd6m%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252FREADME.md%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522cm0jrhq8100023b6ig8egxvdf%2522%252C%2522activeTabId%2522%253A%2522cm0jrhq8100013b6ixhcnjd6m%2522%257D%252C%2522cm0jrhq8100043b6ixl2b7wdp%2522%253A%257B%2522id%2522%253A%2522cm0jrhq8100043b6ixl2b7wdp%2522%252C%2522activeTabId%2522%253A%2522cm0jrk5a9000g3b6igbd81nr3%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522SETUP_TASKS%2522%252C%2522id%2522%253A%2522cm0jrhrjn000p3b6i28okzqzk%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%252C%257B%2522type%2522%253A%2522ENV_SETUP%2522%252C%2522id%2522%253A%2522cm0jrk5a9000g3b6igbd81nr3%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%252C%2522cm0jrhq8100033b6iqqmal62q%2522%253A%257B%2522id%2522%253A%2522cm0jrhq8100033b6iqqmal62q%2522%252C%2522activeTabId%2522%253A%2522cm0jri4hx00153b6ivspu4uap%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522id%2522%253A%2522cm0jri4hx00153b6ivspu4uap%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Afalse%252C%2522sidebarPanelSize%2522%253A15%257D)
2. Start the next dev server 
3. Open the app on http://localhost:3000
4. Click the request button
5. Inspect the logs see that the mutating of the store object inside instrumentation.ts has no effect to the imported store object inside api/update-store

### Current vs. Expected behavior

I would expect the code inside `instrumentation.ts` to be able to mutate the store object.
Console output
```log

// log from inside instrumentation.ts successfully setting the onUpdate prop on the store object
Store listener is ready { update: [Function: update], onUpdate: [Function (anonymous)] } 

log from inside the api/update-store/route.ts showing a different object which does not have the change 
{ update: [Function: update] } 

```

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 8
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: 1.22.19
  pnpm: 9.9.0
Relevant Packages:
  next: 15.0.0-canary.137 // Latest available version is detected (15.0.0-canary.137).
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Instrumentation, Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), next start (local), Vercel (Deployed), Other (Deployed)

### Additional context
My main use case for this approach, as demonstrated in the example, is to attach listeners to the data layer once. A more complex scenario would involve attempting to share an `EventEmitter` object. However, it would be less obvious that the objects within instrumentation.ts and the API route are not identical.",インストゥルメンテーション.ts内でインポートされたコードは、インポートされたモジュールを変更できません,"### この問題を再現するコードへのリンク

https://github.com/shkreios/next-js-instrumentation-bug-reproduction

### 再現手順

1. [codesandbox](https://codesandbox.io/p/github/shkreios/next-js-instrumentation-bug-reproduction/main?import=true&layout=%257B%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522rootPanelGroup%2522%253A%257B%2522direction%2522%253A%2522horizontal%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522id%2522%253A%2522ROOT_LAYOUT%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522UNKNOWN%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522cm0jrhq8100053b6ikn0p21gt%2522%252C%2522sizes%2522%253A%255B100%255D%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522EDITOR%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522EDITOR%2522%252C%2522id%2522%253A%2522cm0jrhq8100023b6ig8egxvdf%2522%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522direction%2522%253A%2522horizontal%2522%252C%2522id%2522%253A%2522SHELLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522SHELLS%2522%252C%2522id%2522%253A%2522cm0jrhq8100033b6iqqmal62q%2522%257D%255D%257D%255D%257D%252C%257B%2522type%2522%253A%2522PANEL_GROUP%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522direction%2522%253A%2522vertical%2522%252C%2522id%2522%253A%2522DEVTOOLS%2522%252C%2522panels%2522%253A%255B%257B%2522type%2522%253A%2522PANEL%2522%252C%2522contentType%2522%253A%2522DEVTOOLS%2522%252C%2522id%2522%253A%2522cm0jrhq8100043b6ixl2b7wdp%2522%257D%255D%257D%255D%252C%2522sizes%2522%253A%255B50%252C50%255D%257D%252C%2522tabbedPanels%2522%253A%257B%2522cm0jrhq8100023b6ig8egxvdf%2522%253A%257B%2522tabs%2522%253A%255B%257B%2522id%2522%253A%2522cm0jrhq8100013b6ixhcnjd6m%2522%252C%2522mode%2522%253A%2522permanent%2522%252C%2522type%2522%253A%2522FILE%2522%252C%2522filepath%2522%253A%2522%252FREADME.md%2522%252C%2522state%2522%253A%2522IDLE%2522%257D%255D%252C%2522id%2522%253A%2522cm0jrhq8100023b6ig8egxvdf%2522%252C%2522activeTabId%2522%253A%2522cm0jrhq8100013b6ixhcnjd6m%2522%257D%252C%2522cm0jrhq8100043b6ixl2b7wdp%2522%253A%257B%2522id%2522%253A%2522cm0jrhq8100043b6ixl2b7wdp%2522%252C%2522activeTabId%2522%253A%2522cm0jrk5a9000g3b6igbd81nr3%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522SETUP_TASKS%2522%252C%2522id%2522%253A%2522cm0jrhrjn000p3b6i28okzqzk%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%252C%257B%2522type%2522%253A%2522ENV_SETUP%2522%252C%2522id%2522%253A%2522cm0jrk5a9000g3b6igbd81nr3%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%252C%2522cm0jrhq8100033b6iqqmal62q%2522%253A%257B%2522id%2522%253A%2522cm0jrhq8100033b6iqqmal62q%2522%252C%2522activeTabId%2522%253A%2522cm0jri4hx00153b6ivspu4uap%2522%252C%2522tabs%2522%253A%255B%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522id%2522%253A%2522cm0jri4hx00153b6ivspu4uap%2522%252C%2522mode%2522%253A%2522permanent%2522%257D%255D%257D%257D%252C%2522showDevtools%2522%253Atrue%252C%2522showShells%2522%253Atrue%252C%2522showSidebar%2522%253Afalse%252C%2522sidebarPanelSize%2522%253A15%257D)
2. 次に、開発サーバーを起動します
3. http://localhost:3000 でアプリを開きます
4. リクエストボタンをクリックします
5. ログを確認し、instrumentation.ts内のストアオブジェクトの変更がapi/update-store内のインポートされたストアオブジェクトに影響を与えないことを確認します

### 現在の動作と期待される動作

`instrumentation.ts`内のコードがストアオブジェクトを変更できることを期待しています。
コンソール出力
```log

// instrumentation.ts内からのログ、ストアオブジェクトのonUpdateプロパティを正常に設定
ストアリスナーは準備完了です { update: [Function: update], onUpdate: [Function (anonymous)] } 

api/update-store/route.ts内のログ、変更がない異なるオブジェクトを表示
{ update: [Function:"
S1,P1,Inconsistent handling of notFound() from server action,"### Link to the code that reproduces this issue

https://github.com/VitaliyPotapov/next-reproduction-app

### To Reproduce

1. `npm run dev` and navigate to http://localhost:3000
2. click `Form with server action` -> `not-found.tsx` is correctly shown
3. click `Button with server action` -> there is uncaught error `NEXT_NOT_FOUND`

### Current vs. Expected behavior

I except that click on `Button with server action` would show `not-found.tsx`.
So that handling of notFound() from server action to be consistent, no matter how I invoke that server action: via form or via click handler.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 16384
  Available CPU cores: 10
Binaries:
  Node: 18.20.1
  npm: 10.5.0
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.135 // Latest available version is detected (15.0.0-canary.135).
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
サーバーアクションからのnotFound()の不一致な処理","本文:
### この問題を再現するコードへのリンク

https://github.com/VitaliyPotapov/next-reproduction-app

### 再現手順

1. `npm run dev`を実行し、http://localhost:3000に移動
2. `サーバーアクションを持つフォーム`をクリック -> `not-found.tsx`が正しく表示される
3. `サーバーアクションを持つボタン`をクリック -> 捕捉されていないエラー`NEXT_NOT_FOUND`が発生

### 現在の動作と期待される動作

`サーバーアクションを持つボタン`をクリックすると`not-found.tsx`が表示されることを期待しています。
サーバーアクションの呼び出し方法に関わらず、notFound()の処理が一貫しているべきです：フォーム経由でもクリックハンドラー経由でも。

### 環境情報の提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 10
バイナリ:
  Node: 18.20.1
  npm: 10.5.0
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.135 // 利用可能な最新バージョンが検出されました (15.0.0-canary.135)。
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js設定:
  output: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,Third-party script synchronous loading Hydration problem,"### Link to the code that reproduces this issue

https://github.com/yanqc1996/GD-Next

### To Reproduce

Description of the problem encountered: I have to rely on an external third-party js in the project to perform a/b testing on the page, in which we may have a test for page diversion, which forces me to divert before loading the page content (to prevent users from seeing page a before page b), which also forces me to load this js script synchronously to block page rendering, so next/script does not apply to me because there is no synchronization option. I use native <script> loading (eslint will report an error when srcipt is loaded synchronously, but this can be prohibited by custom rules)

The deployment address of vercel is: https://gd-next-un88.vercel.app/. When you open the console, you can see that there are many Hydration errors in the right window.

When in official use, these errors will even affect the rendering of the page. I must trigger a click before rendering other things. For example, the test page https://vibe-portal-rik-vibeus.vercel.app/products/vibe-smart-whiteboard-s1/, you can try to open the page without a trace, and you will find that the loading of home page pictures/videos will be stuck, and can only be loaded after triggering a click

I don’t think this is a Next.js problem. I just want to ask if there is a solution that allows me to load only a synchronous blocking rendering js script on the client?

If you find that there is no such problem in the deployment during testing, this should be caused by the need for the third-party script to specify the corresponding domain name in the background. I tried it. If the effective domain name is not specified, this error will not appear

### Current vs. Expected behavior

I hope to be able to implement a third-party js synchronous blocking loading logic on the client side normally

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:13:18 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6030
  Available memory (MB): 18432
  Available CPU cores: 11
Binaries:
  Node: 18.17.0
  npm: 9.6.7
  Yarn: 1.22.21
  pnpm: 7.1.0
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Script (next/script)

### Which stage(s) are affected? (Select all that apply)

Vercel (Deployed)

### Additional context

_No response_",サードパーティスクリプトの同期読み込みによるハイドレーション問題,"### この問題を再現するコードへのリンク

https://github.com/yanqc1996/GD-Next

### 再現手順

遭遇した問題の説明: プロジェクトでページのA/Bテストを行うために外部のサードパーティのJSに依存する必要があります。このテストではページの振り分けを行う可能性があり、ページのコンテンツを読み込む前に振り分けを強制する必要があります（ユーザーがページAをページBの前に見るのを防ぐため）。これにより、ページのレンダリングをブロックするためにこのJSスクリプトを同期的に読み込む必要があり、next/scriptは同期オプションがないため私には適用できません。ネイティブの<script>読み込みを使用しています（スクリプトが同期的に読み込まれるとeslintがエラーを報告しますが、カスタムルールでこれを禁止できます）。

vercelのデプロイ先アドレスは: https://gd-next-un88.vercel.app/です。コンソールを開くと、右ウィンドウに多くのハイドレーションエラーが表示されます。

公式に使用する際、これらのエラーはページのレンダリングにも影響を与えます。他のものをレンダリングする前にクリックをトリガーする必要があります。例えば、テストページ https://vibe-portal-rik-vibeus.vercel.app/products/vibe-smart-whiteboard-s1/を開くと、痕跡なしでページを開くと、ホームページの画像/動画の読み込みが止まり、クリックをトリガーした後にのみ読み込まれます。

これはNext.jsの問題ではないと思います。クライアント側で同期的にレンダリングをブロックするJSスクリプトを読み込むための解決策があるかどうかを尋ねたいだけです。

テスト中にデプロイメントでこのような問題が見つからない場合、これはサードパーティスクリプトがバックグラウンドで対応するドメイン名を指定する必要があるためだと思われます。試してみましたが、有効なドメイン名が指定されていない場合、このエラーは表示されません。

### 現在の動作と期待される動作

クライアント側でサードパーティのJSを同期的にブロックして読み込むロジックを正常に実装できることを望んでいます。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:13:18 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6030
  利用可能なメモリ (MB): 18432
  利用可能なCPUコア: 11
バイナリ:
  Node: 18.17.0
  npm: 9.6.7
  Yarn: 1.22.21
  pnpm: 7.1.0
関連パッケージ:
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

スクリプト (next/script)

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

Vercel (デプロイ済み)

### 追加のコンテキスト

_返答なし_"
S1,P1,Draft mode cookie no being set on edge runtime,"### Link to the code that reproduces this issue

https://github.com/otoxiep95/next-draft-edge-issue-reproduction

### To Reproduce


1. Clone the repo
2. Run `npm install`
3. Run `npm run dev`
4. Open the browser at `http://localhost:3000/api`
5. Open and edit `app/api/route.ts` and remove `export const runtime = ""edge"";` 
6. Retest the issue

### Current vs. Expected behavior

Cookie header is set, but the value it wrong and results in draft mode not being enabled.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.2.0: Wed Nov 15 21:55:06 PST 2023; root:xnu-10002.61.3~2/RELEASE_ARM64_T6020
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
Relevant Packages:
  next: 15.0.0-canary.134 // Latest available version is detected (15.0.0-canary.134).
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Runtime

### Which stage(s) are affected? (Select all that apply)

next dev (local), Vercel (Deployed)

### Additional context

![Screenshot 2024-08-29 at 11 24 16](https://github.com/user-attachments/assets/c5402e83-8caf-4354-9ebf-94286029057d)
![Screenshot 2024-08-29 at 11 24 28](https://github.com/user-attachments/assets/6a2c619e-5e1a-4c6f-9223-f7993c63aae9)
![Screenshot 2024-08-29 at 11 24 56](https://github.com/user-attachments/assets/eb1c1921-0659-4e7a-aa47-1a702d753305)


","タイトル:
エッジランタイムでドラフトモードのクッキーが設定されない","本文:
### この問題を再現するコードへのリンク

https://github.com/otoxiep95/next-draft-edge-issue-reproduction

### 再現手順

1. リポジトリをクローンする
2. `npm install`を実行する
3. `npm run dev`を実行する
4. ブラウザで`http://localhost:3000/api`を開く
5. `app/api/route.ts`を開いて編集し、`export const runtime = ""edge"";`を削除する
6. 問題を再テストする

### 現在の動作と期待される動作

クッキーヘッダーは設定されているが、値が間違っており、ドラフトモードが有効にならない。

### 環境情報を提供する

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 23.2.0: Wed Nov 15 21:55:06 PST 2023; root:xnu-10002.61.3~2/RELEASE_ARM64_T6020
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.17.0
  npm: 10.8.2
  Yarn: N/A
  pnpm: N/A
関連パッケージ:
  next: 15.0.0-canary.134 // 検出された最新の利用可能バージョン (15.0.0-canary.134)。
  eslint-config-next: N/A
  react: 19.0.0-rc-7771d3a7-20240827
  react-dom: 19.0.0-rc-7771d3a7-20240827
  typescript: 5.3.3
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

ランタイム

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev（ローカル）、Vercel（デプロイ済み）

### 追加のコンテキスト

![Screenshot 2024-08-29 at 11 24 16](https://github.com/user-attachments/assets/c5402e83-8caf-4354-9ebf-94286029057d)
![Screenshot 2024-08-29 at 11 24 28](https://github.com/user-attachments/assets/6a2c619e-5e1a-4c6f-9223-f7993c63aae9)
![Screenshot 2024-08-29 at 11 24 56](https://github.com/user-attachments/assets/eb1c1921-0659-4e7a-aa47-1a702d753305)"
S1,P1,hydrate not finished until the whole content is loaded at Stream SSR mode,"### Link to the code that reproduces this issue

https://github.com/HomyeeKing/next-ssr

### To Reproduce

```bash
npm install

npm run dev
```



### Current vs. Expected behavior

I create a simple demo, that the first Comp wait 2s and the other two components wait 3s to hydrate
but the mounted time(useEffect) is 10s later

even run in sequently, the time should be 2 + 3 + 3 = 8s, how the 10s comes out?

![image](https://github.com/user-attachments/assets/89df74c1-c582-4407-a384-5a688b59cfe4)


expect that the element can be interactive once the suspense finished

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103
  Available memory (MB): 16384
  Available CPU cores: 8
Binaries:
  Node: 20.16.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.7.1
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Partial Prerendering (PPR), Performance

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:
ストリームSSRモードで全コンテンツが読み込まれるまでハイドレートが完了しない","本文:
### この問題を再現するコードへのリンク

https://github.com/HomyeeKing/next-ssr

### 再現手順

```bash
npm install

npm run dev
```

### 現在の動作と期待される動作

私はシンプルなデモを作成しました。最初のコンポーネントは2秒待ち、他の2つのコンポーネントは3秒待ってハイドレートしますが、マウント時間（useEffect）は10秒後です。

順番に実行しても、時間は2 + 3 + 3 = 8秒のはずなのに、なぜ10秒になるのでしょうか？

![image](https://github.com/user-attachments/assets/89df74c1-c582-4407-a384-5a688b59cfe4)

サスペンスが終了したら、要素がインタラクティブになることを期待しています。

### 環境情報を提供

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: arm64
  バージョン: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103
  利用可能なメモリ (MB): 16384
  利用可能なCPUコア: 8
バイナリ:
  Node: 20.16.0
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: 9.7.1
関連パッケージ:
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7)。
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

部分的なプリレンダリング (PPR)、パフォーマンス

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

next dev (ローカル)

### 追加のコンテキスト

_回答なし_"
S1,P1,How to update current route data by using revalidateTag in the server action??,"### Link to the code that reproduces this issue

https://github.com/takakikasuga/revalidate-app

### To Reproduce

Now, I study app router and the next cahce like data cache and so on...
I try to do some option of fetch and revalidate tag and path.
today, I use [revalidateTag](https://nextjs.org/docs/app/api-reference/functions/revalidateTag) in the server action, and I wanna update data of the tag and I don't expect to update data other than tag.

In this below video, I updated `layout tag` in the ActionLayout, but after revalidate `layout tag`, other tag data like `page tag` in the ActionPage and `root tag` int the RootLayout  was updated.
I don't know this action happend...

additionally, after updated data related to all tags and reload the browser, `layout tag` was updated correctly but, other than tag like `page tag` and `root tag` wasn't updated and display old cached data...


https://github.com/user-attachments/assets/357a2961-82d1-4e79-913e-c1d6193a1043








How can I update current data by revalidateTag???👀



but,,, there is one thing, I succeeded in the specified tag's data.

I inject [redirect function](https://nextjs.org/docs/app/building-your-application/routing/redirecting#redirect-function) after revalidate tag and redirect to current route, I can found the my expectation that `layout tag` was updated and other than tag like `page tag` and `root tag` wasn't updated like below the video.
but I don't know this implementation is correct because this implementation example don't be writtern in the nextjs official document.
（I refered to the this [youtube](https://www.youtube.com/watch?v=-mPm2IRkacM)）


https://github.com/user-attachments/assets/142c9c49-284e-4c42-92cb-b57dae325743




I love the nextjs, thank you for your project and the best effort for software enginner!!

### Current vs. Expected behavior

 I wanna update data of the tag and I don't expect to update data other than tag by using only revalidateTag, it means I don't use redirect.

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: x64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 65536
  Available CPU cores: 10
Binaries:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

create-next-app

### Which stage(s) are affected? (Select all that apply)

next dev (local)

### Additional context

_No response_","タイトル:  
サーバーアクションでrevalidateTagを使用して現在のルートデータを更新する方法は？","本文:  
### この問題を再現するためのコードへのリンク

https://github.com/takakikasuga/revalidate-app

### 再現手順

現在、アプリルーターと次のキャッシュ（データキャッシュなど）を学んでいます...
fetchとrevalidateタグおよびパスのいくつかのオプションを試しています。
今日は、サーバーアクションで[revalidateTag](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)を使用して、タグのデータを更新したいと思っていますが、タグ以外のデータが更新されることは期待していません。

以下のビデオでは、ActionLayoutで`layout tag`を更新しましたが、`layout tag`を再検証した後、ActionPageの`page tag`やRootLayoutの`root tag`などの他のタグデータが更新されました。
このアクションが発生する理由がわかりません...

さらに、すべてのタグに関連するデータを更新した後、ブラウザをリロードすると、`layout tag`は正しく更新されましたが、`page tag`や`root tag`などの他のタグは更新されず、古いキャッシュデータが表示されました...

https://github.com/user-attachments/assets/357a2961-82d1-4e79-913e-c1d6193a1043

現在のデータをrevalidateTagで更新するにはどうすればよいですか？？👀

しかし、、、一つだけ成功したことがあります。指定したタグのデータを更新することに成功しました。

revalidateタグの後に[リダイレクト関数](https://nextjs.org/docs/app/building-your-application/routing/redirecting#redirect-function)を注入し、現在のルートにリダイレクトすると、`layout tag`が更新され、`page tag`や`root tag`などの他のタグは更新されないという期待が得られました。以下のビデオのように。
しかし、この実装が正しいかどうかわからないのは、次のjs公式ドキュメントにこの実装例が記載されていないからです。
（この[YouTube](https://www.youtube.com/watch?v=-mPm2IRkacM)を参考にしました）

https://github.com/user-attachments/assets/142c9c49-284e-4c42-92cb-b57dae325743

私はnextjsが大好きです。プロジェクトとソフトウェアエンジニアリングへの最高の努力に感謝します！！

### 現在の動作と期待される動作

私はタグのデータを更新したいと思っており、リダイレクトを使用せずにrevalidateTagのみを使用して、タグ以外のデータが更新されることは期待していません。

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: darwin
  アーキテクチャ: x64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 65536
  利用可能なCPUコア: 10
バイナリ:
  Node: 20.14.0
  npm: 10.7.0
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7)。
  eslint-config-next: 14.2.7
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.jsの設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（すべて選択してください）

create-next-app

### 影響を受けるステージはどれですか？（すべて選択してください）

next dev (ローカル)

### 追加のコンテキスト

_応答なし_"
S1,P1,next build hangs after next dev has compiled on Windows,"### Link to the code that reproduces this issue

https://github.com/jazelly/next-hang

### To Reproduce

1. `create-next-app`
2. `yarn dev` in one terminal
3. visit it to let it compile
4. `yarn build` in a different terminal
5. You might see an error, try again then you will see it hangs

### Current vs. Expected behavior

**Expect:**

I expect it to pass/fail consistently

**Actual:**

It hangs at

PS E:\github\my\next-bug\next-dead-lock> npx yarn build
npm info using npm@10.8.2
npm info using node@v22.5.1
npm http fetch GET 200 https://registry.npmjs.org/yarn 136ms (cache revalidated)
yarn run v1.22.22
$ next build
  ▲ Next.js 14.2.7

### Provide environment information

```bash
Operating System:
  Platform: win32
  Arch: x64
  Version: Windows 11 Home
Binaries:
  Node: 22.5.1
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
Relevant Packages:
  next: 14.2.5
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js Config:
  output: N/A
```


### Which area(s) are affected? (Select all that apply)

Developer Experience

### Which stage(s) are affected? (Select all that apply)

next build (local)

### Additional context

_No response_",次のビルドが Windows で次の開発がコンパイルされた後にハングする,"### この問題を再現するコードへのリンク

https://github.com/jazelly/next-hang

### 再現手順

1. `create-next-app`
2. 別のターミナルで `yarn dev` を実行
3. コンパイルさせるために訪問
4. 別のターミナルで `yarn build` を実行
5. エラーが表示されるかもしれませんが、再試行するとハングします

### 現在の動作と期待される動作

**期待される動作:**

一貫して成功または失敗することを期待しています

**実際の動作:**

以下でハングします

PS E:\github\my\next-bug\next-dead-lock> npx yarn build
npm 情報 npm@10.8.2 を使用中
npm 情報 node@v22.5.1 を使用中
npm http fetch GET 200 https://registry.npmjs.org/yarn 136ms (キャッシュ再検証)
yarn run v1.22.22
$ next build
  ▲ Next.js 14.2.7

### 環境情報を提供してください

```bash
オペレーティングシステム:
  プラットフォーム: win32
  アーキテクチャ: x64
  バージョン: Windows 11 Home
バイナリ:
  Node: 22.5.1
  npm: 10.8.2
  Yarn: 1.22.22
  pnpm: N/A
関連パッケージ:
  next: 14.2.5
  eslint-config-next: 14.2.5
  react: 18.3.1
  react-dom: 18.3.1
  typescript: 5.5.4
Next.js 設定:
  出力: N/A
```

### 影響を受ける領域はどれですか？（該当するものをすべて選択）

開発者体験

### 影響を受けるステージはどれですか？（該当するものをすべて選択）

次のビルド（ローカル）

### 追加のコンテキスト

_回答なし_"
S1,P1,Memory issue with API routes and middleware,"### Link to the code that reproduces this issue

https://github.com/a-hyssopus/nextjs_memory_issue

### To Reproduce

1. `bun/npm install`
2. `docker build -t memory_repo .`
3. `docker run -p 3000:3000 memory_repo`
4. `docker stats` in a new terminal tab
5. Click the ""Send POST request of normal size"" button in application. Observe the behaviour of stats in the tab which tracks Docker, and pay attention to the memory consumption.
6. Click ""Send POST request of huge size"" button, observe skyrocketed memory usage in Docker stats.

### Current vs. Expected behavior

**Actual result**:
Having `middleware.js` (or `.ts`) and reaching out to a BE endpoint through an API route makes memory consumption raise significantly if a huge request (>50 MB) or a sequence of relatively big requests are sent. 
**A very important note**: it only happens when **both** `middleware` and API routes are used. 

All tested scenarios are also listed in README of reproduction repo and have tags assigned (check README):

1. Reproduction created with API route (with `getOnProxyInit`) and `middleware`: hits 940 MB when a 400 MB request is sent, and although error was returned from server, precisely HTTP 413, the memory consumption doesn't decrease at all
2. Removed `getOnProxyInit` from API route: the same situation as above
3. Removed `middleware.js`: memory consumption doesn't raise at all
4. Commented out API route, but restored `middleware.ts`: memory consumption doesn't raise at all
5. Restored API route with `bodyParser: false`: the same as in 1 and 2
6. Completely removed `httpProxyMiddleware`: hit the value >1 GB and never came back to normal values

**The main points here are**:

1. Removal of `middleware.js` but preservation of API route doesn't trigger high memory consumption
2. Removal of API route but preservation of `middleware.js` doesn't trigger high memory consumption

**Expected result**:
I expect no high memory consumption when a network call happens in a project that has both API routes and middleware present in a project, if neither of these read/modify request's body. I also expect `bodyParse: false` to improve the situation. 

### Provide environment information

```bash
Operating System:
  Platform: darwin
  Arch: arm64
  Version: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  Available memory (MB): 32768
  Available CPU cores: 10
Binaries:
  Node: 18.20.0
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.7.0
Relevant Packages:
  next: 14.2.7 // Latest available version is detected (14.2.7).
  eslint-config-next: 14.2.7
```


### Which area(s) are affected? (Select all that apply)

create-next-app, Middleware, Pages Router, App Router

### Which stage(s) are affected? (Select all that apply)

next dev (local), next build (local), Other (Deployed)

### Additional context

**Edit:** Tested with Next 15.0.3 and App router, the issue persists. Check the branch `app_router` and follow the instructions from above to see the result.

_No response_",メモリの問題：APIルートとミドルウェア,"### この問題を再現するためのコードへのリンク

https://github.com/a-hyssopus/nextjs_memory_issue

### 再現手順

1. `bun/npm install`
2. `docker build -t memory_repo .`
3. `docker run -p 3000:3000 memory_repo`
4. 新しいターミナルタブで`docker stats`
5. アプリケーション内の「通常サイズのPOSTリクエストを送信」ボタンをクリックします。Dockerを追跡するタブの統計の挙動を観察し、メモリ消費に注意を払います。
6. 「巨大サイズのPOSTリクエストを送信」ボタンをクリックし、Dockerの統計で急増したメモリ使用量を観察します。

### 現在の動作と期待される動作

**実際の結果**：
`middleware.js`（または`.ts`）を持ち、APIルートを介してBEエンドポイントにアクセスすると、巨大なリクエスト（>50 MB）または比較的大きなリクエストのシーケンスが送信されると、メモリ消費が大幅に増加します。
**非常に重要な注意**：これは**両方の**`middleware`とAPIルートが使用されているときにのみ発生します。

テストされたすべてのシナリオは、再現リポジトリのREADMEにもリストされており、タグが付けられています（READMEを確認）：

1. APIルート（`getOnProxyInit`を使用）と`middleware`を使用して作成された再現：400 MBのリクエストが送信されると940 MBに達し、サーバーからエラーが返されましたが、正確にはHTTP 413で、メモリ消費は全く減少しません。
2. APIルートから`getOnProxyInit`を削除：上記と同じ状況。
3. `middleware.js`を削除：メモリ消費は全く増加しません。
4. APIルートをコメントアウトし、`middleware.ts`を復元：メモリ消費は全く増加しません。
5. `bodyParser: false`でAPIルートを復元：1および2と同じ。
6. `httpProxyMiddleware`を完全に削除：1 GBを超える値に達し、正常な値には戻りませんでした。

**ここでの主なポイントは**：

1. `middleware.js`を削除してAPIルートを保持しても高いメモリ消費は引き起こされません。
2. APIルートを削除して`middleware.js`を保持しても高いメモリ消費は引き起こされません。

**期待される結果**：
APIルートとミドルウェアの両方がプロジェクトに存在する場合、リクエストのボディを読み取ったり変更したりしない限り、ネットワーク呼び出しが発生したときに高いメモリ消費がないことを期待します。また、`bodyParse: false`が状況を改善することを期待します。

### 環境情報を提供

```bash
オペレーティングシステム：
  プラットフォーム: darwin
  アーキ: arm64
  バージョン: Darwin Kernel Version 23.5.0: Wed May  1 20:12:58 PDT 2024; root:xnu-10063.121.3~5/RELEASE_ARM64_T6000
  利用可能なメモリ (MB): 32768
  利用可能なCPUコア: 10
バイナリ：
  Node: 18.20.0
  npm: 10.5.0
  Yarn: 1.22.22
  pnpm: 9.7.0
関連パッケージ：
  next: 14.2.7 // 利用可能な最新バージョンが検出されました (14.2.7)。
  eslint-config-next: 14.2.7
```

### 影響を受ける領域はどれですか？（該当するすべてを選択）

create-next-app、ミドルウェア、ページルーター、アプリルーター

### 影響を受けるステージはどれですか？（該当するすべてを選択）

next dev（ローカル）、next build（ローカル）、その他（デプロイ済み）

### 追加のコンテキスト

**編集：** Next 15.0.3およびアプリルーターでテストしましたが、問題は持続しています。`app_router`ブランチを確認し、上記の手順に従って結果を確認してください。"